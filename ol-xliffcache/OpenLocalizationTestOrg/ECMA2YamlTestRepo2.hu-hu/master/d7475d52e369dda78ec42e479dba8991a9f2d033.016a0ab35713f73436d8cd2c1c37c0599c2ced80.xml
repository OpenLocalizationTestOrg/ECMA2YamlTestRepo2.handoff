{"nodes":[{"pos":[3400,3514],"content":"Represents a business object that provides data to data-bound controls in multitier Web application architectures.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a business object that provides data to data-bound controls in multitier Web application architectures.","pos":[0,114]}]},{"pos":[3527,42243],"content":"In this topic:      -   [Introduction](#introduction)      -   [Purpose](#purpose)      -   [Retrieving Data](#retrieving_data)      -   [Performing Data Operations](#performing_data_operations)      -   [Filtering Data](#filtering_data)      -   [Caching](#caching)      -   [Features](#features)      -   [Data View](#data_view)      -   [Using LINQ to SQL](#using_linq_to_sql)      -   [Declarative Syntax](#declarative_syntax)      <a name=\"introduction\"></a>    ## Introduction    An ObjectDataSource control works with a class that you create. You create methods that retrieve and update data, and you provide the names of those methods to the ObjectDataSource control in markup. During rendering or postback processing, the ObjectDataSource calls the methods that you have specified.       There is no visual rendering of the ObjectDataSource control. As a result, the ObjectDataSource does not support visual features such as the <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> or <xref:System.Web.UI.DataSourceControl.SkinID%2A> property.      <a name=\"purpose\"></a>    ## Purpose    A very common application design practice is to separate the presentation layer from business logic and to encapsulate the business logic in business objects. These business objects form a distinct layer between the presentation layer and the data tier, resulting in a three-tier application architecture. The ObjectDataSource control enables developers to use an ASP.NET data source control while retaining their three-tier application architecture.       The ObjectDataSource control uses reflection to create instances of business objects and to call methods on them to retrieve, update, insert, and delete data. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property identifies the name of the class that the ObjectDataSource works with. The ObjectDataSource control creates and destroys an instance of the class for each method call; it does not hold the object in memory for the lifetime of the Web request. This is a serious consideration if the business object that you use requires many resources or is otherwise expensive to create and destroy. Using an expensive object might not be an optimal design choice, but you can control the life cycle of the object by using the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.      > [!NOTE] >  The methods that are identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties can be instance methods or `static` (`Shared` in Visual Basic) methods. If the methods are `static` (`Shared` in Visual Basic), an instance of the business object is not created, and the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events are not raised.      <a name=\"retrieving_data\"></a>    ## Retrieving Data    To retrieve data from a business object, set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to the name of the method that retrieves data. If the method does not return an <xref:System.Collections.IEnumerable> or <xref:System.Data.DataSet> object, the object is wrapped by the runtime in an <xref:System.Collections.IEnumerable> collection. If the method signature has parameters, you can add <xref:System.Web.UI.WebControls.Parameter> objects to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection, and then bind them to the values that you want to pass to the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. In order for the ObjectDataSource control to use the parameters, the parameters must match the names and types of the parameters in the method signature. For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).       The ObjectDataSource control retrieves data whenever the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called. This method provides programmatic access to the method that is specified by <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. The method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property is called automatically by controls that are bound to the ObjectDataSource when their `DataBind` method is called. If you set the `DataSourceID` property of a data-bound control, the control automatically binds to data from the data source, as needed. Setting the `DataSourceID` property is the recommended method for binding an ObjectDataSource control to a data-bound control. Alternatively, you can set the `DataSource` property, but then you must explicitly call the `DataBind` method of the data-bound control. You can call the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method programmatically at any time to retrieve data.       For more information about binding data-bound controls to data source controls, see [Binding to Data Using a Data Source Control](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7).      <a name=\"performing_data_operations\"></a>    ## Performing Data Operations    Depending on the capabilities of the business object that the ObjectDataSource control works with, you can perform data operations, such as updates, insertions, and deletions. To perform these data operations, set the appropriate method name and any associated parameters for the operation that you want to perform. For example, for an update operation, set the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property to the name of the business object method that performs updates and add any required parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. If the ObjectDataSource control is associated with a data-bound control, the parameters are added by the data-bound control. In this case, you need to ensure that the parameter names of the method match the field names in the data-bound control. The update is performed when the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is called, either explicitly by your code or automatically by a data-bound control. The same general pattern is followed for <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operations. Business objects are assumed to perform these types of data operations one record at a time, rather than batched.      <a name=\"filtering_data\"></a>    ## Filtering Data    The ObjectDataSource control can filter data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, if the data is returned as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. You can set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property to a filtering expression by using a format string syntax and bind values in the expression to parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.      <a name=\"caching\"></a>    ## Caching    Although the ObjectDataSource does not retain the instance of the business object across multiple requests, it can cache the result of calling the method identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. While the data is cached, subsequent calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method return the cached data instead of creating the business object and calling its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> using reflection. Caching lets you avoid creating the object and calling its data method at the expense of memory on the Web server. The ObjectDataSource automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to the number of seconds that the cache stores data before the cache is discarded. You can also specify a <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property and an optional <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> property. The ObjectDataSource control allows you to cache all types of data, but you should not cache objects that retain resources or state that cannot be shared to service multiple requests (for example, an open <xref:System.Data.SqlClient.SqlDataReader> object), because the same instance of the object will be used to service multiple requests.      <a name=\"features\"></a>    ## Features    The following table describes the features of the ObjectDataSource control.      |Capability|Requirements|   |----------------|------------------|   |Selecting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to the name of the business object method that selects data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection either programmatically or by using a data-bound control.|   |Sorting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> property to the name of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> method that carries the sort criteria.|   |Filtering|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property to a filtering expression and optionally add any parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection to filter the data when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called. The method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property must return a <xref:System.Data.DataSet> or <xref:System.Data.DataTable>.|   |Paging|Data source paging is supported, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> method contains parameters for the maximum number of records to retrieve and the index of the first record to retrieve. The names of those parameters must be set in the  <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> properties, respectively. A data-bound control might be able to perform paging itself, even if the ObjectDataSource control does not support paging directly in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. The requirement for the data-bound control to be able to do this is that the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property return an object that implements the <xref:System.Collections.ICollection> interface.|   |Updating|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property to the name of the business object method that updates data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection.|   |Deleting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property to the name of the business object method or function that deletes data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection.|   |Inserting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property to the name of the business object method or function that inserts data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection.|   |Caching|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties according to the caching behavior you want for your cached data.|      > [!NOTE] >  When you use the ObjectDataSource class to update or insert data, strings that are entered at the client are not automatically converted from the client culture format to the server culture format. For example, the client culture might specify DD/MM/YYYY as the date format, and the date format on the server might be MM/DD/YYYY. In that case, October 5, 2009 would be entered in a <xref:System.Web.UI.WebControls.TextBox> control as 5/10/2009 but would be interpreted as May 10, 2009. October 15, 2009 would be entered as 15/10/2009, and would be rejected as an invalid date.      <a name=\"data_view\"></a>    ## Data View    As with all data source controls, the ObjectDataSource control is associated with a data source view class. While the ObjectDataSource control is the interface that the page developer uses to work with data, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> class is the interface that data-bound controls work with. Additionally, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> class describes the capabilities of the data source control, and performs the actual work. The ObjectDataSource control has only one associated <xref:System.Web.UI.WebControls.ObjectDataSourceView>, and it is always named `DefaultView`. While the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> method, many of its properties and methods are wrapped and exposed directly by the ObjectDataSource control. Behind the scenes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object performs all data operations, including retrieving, inserting, updating, deleting, filtering, and sorting the data. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSourceView>.      <a name=\"using_linq_to_sql\"></a>    ## Using LINQ to SQL    You can use the ObjectDataSource control with a LINQ to SQL class. To do so, you set the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property to the name of the data-context class. You also set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> methods to the methods in the data-context class that perform the corresponding operations. You must create an event handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event in order to cancel disposing of the data-context class. This step is necessary because LINQ to SQL supports deferred execution, whereas the ObjectDataSource control tries to dispose the data context after the Select operation. For more information about how to create LINQ to SQL classes, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081). For an example of how to cancel the disposing of a data context class, see the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event.      ## Using the Entity Framework    You can also use the ObjectDataSource control with the Entity Framework. For more information, see [Using the Entity Framework and the ObjectDataSource Control](http://go.microsoft.com/fwlink/?LinkId=209117).      <a name=\"declarative_syntax\"></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=\"string|Infinite\"       CacheExpirationPolicy=\"Absolute|Sliding\"       CacheKeyDependency=\"string\"       ConflictDetection=\"OverwriteChanges|CompareAllValues\"       ConvertNullToDBNull=\"True|False\"       DataObjectTypeName=\"string\"       DeleteMethod=\"string\"       EnableCaching=\"True|False\"       EnablePaging=\"True|False\"       EnableTheming=\"True|False\"       EnableViewState=\"True|False\"       FilterExpression=\"string\"       ID=\"string\"       InsertMethod=\"string\"       MaximumRowsParameterName=\"string\"       OldValuesParameterFormatString=\"string\"       OnDataBinding=\"DataBinding event handler\"       OnDeleted=\"Deleted event handler\"       OnDeleting=\"Deleting event handler\"       OnDisposed=\"Disposed event handler\"       OnFiltering=\"Filtering event handler\"       OnInit=\"Init event handler\"       OnInserted=\"Inserted event handler\"       OnInserting=\"Inserting event handler\"       OnLoad=\"Load event handler\"       OnObjectCreated=\"ObjectCreated event handler\"       OnObjectCreating=\"ObjectCreating event handler\"       OnObjectDisposing=\"ObjectDisposing event handler\"       OnPreRender=\"PreRender event handler\"       OnSelected=\"Selected event handler\"       OnSelecting=\"Selecting event handler\"       OnUnload=\"Unload event handler\"       OnUpdated=\"Updated event handler\"       OnUpdating=\"Updating event handler\"       runat=\"server\"       SelectCountMethod=\"string\"       SelectMethod=\"string\"       SkinID=\"string\"       SortParameterName=\"string\"       SqlCacheDependency=\"string\"       StartRowIndexParameterName=\"string\"       TypeName=\"string\"       UpdateMethod=\"string\"       Visible=\"True|False\"   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In this topic:      -   <bpt id=\"p1\">[</bpt>Introduction<ept id=\"p1\">](#introduction)</ept><ph id=\"ph1\">      -   </ph><bpt id=\"p2\">[</bpt>Purpose<ept id=\"p2\">](#purpose)</ept><ph id=\"ph2\">      -   </ph><bpt id=\"p3\">[</bpt>Retrieving Data<ept id=\"p3\">](#retrieving_data)</ept><ph id=\"ph3\">      -   </ph><bpt id=\"p4\">[</bpt>Performing Data Operations<ept id=\"p4\">](#performing_data_operations)</ept><ph id=\"ph4\">      -   </ph><bpt id=\"p5\">[</bpt>Filtering Data<ept id=\"p5\">](#filtering_data)</ept><ph id=\"ph5\">      -   </ph><bpt id=\"p6\">[</bpt>Caching<ept id=\"p6\">](#caching)</ept><ph id=\"ph6\">      -   </ph><bpt id=\"p7\">[</bpt>Features<ept id=\"p7\">](#features)</ept><ph id=\"ph7\">      -   </ph><bpt id=\"p8\">[</bpt>Data View<ept id=\"p8\">](#data_view)</ept><ph id=\"ph8\">      -   </ph><bpt id=\"p9\">[</bpt>Using LINQ to SQL<ept id=\"p9\">](#using_linq_to_sql)</ept><ph id=\"ph9\">      -   </ph><bpt id=\"p10\">[</bpt>Declarative Syntax<ept id=\"p10\">](#declarative_syntax)</ept>      <bpt id=\"p11\">&lt;a name=\"introduction\"&gt;</bpt><ept id=\"p11\">&lt;/a&gt;</ept>    ## Introduction    An ObjectDataSource control works with a class that you create.","pos":[0,549],"source":"In this topic:      -   [Introduction](#introduction)      -   [Purpose](#purpose)      -   [Retrieving Data](#retrieving_data)      -   [Performing Data Operations](#performing_data_operations)      -   [Filtering Data](#filtering_data)      -   [Caching](#caching)      -   [Features](#features)      -   [Data View](#data_view)      -   [Using LINQ to SQL](#using_linq_to_sql)      -   [Declarative Syntax](#declarative_syntax)      <a name=\"introduction\"></a>    ## Introduction    An ObjectDataSource control works with a class that you create."},{"content":"You create methods that retrieve and update data, and you provide the names of those methods to the ObjectDataSource control in markup.","pos":[550,685]},{"content":"During rendering or postback processing, the ObjectDataSource calls the methods that you have specified.","pos":[686,790]},{"content":"There is no visual rendering of the ObjectDataSource control.","pos":[797,858]},{"content":"As a result, the ObjectDataSource does not support visual features such as the &lt;xref:System.Web.UI.DataSourceControl.EnableTheming%2A&gt; or &lt;xref:System.Web.UI.DataSourceControl.SkinID%2A&gt; property.","pos":[859,1055],"source":" As a result, the ObjectDataSource does not support visual features such as the <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> or <xref:System.Web.UI.DataSourceControl.SkinID%2A> property."},{"content":"<bpt id=\"p1\">&lt;a name=\"purpose\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Purpose    A very common application design practice is to separate the presentation layer from business logic and to encapsulate the business logic in business objects.","pos":[1061,1259],"source":"<a name=\"purpose\"></a>    ## Purpose    A very common application design practice is to separate the presentation layer from business logic and to encapsulate the business logic in business objects."},{"content":"These business objects form a distinct layer between the presentation layer and the data tier, resulting in a three-tier application architecture.","pos":[1260,1406]},{"content":"The ObjectDataSource control enables developers to use an ASP.NET data source control while retaining their three-tier application architecture.","pos":[1407,1551]},{"content":"The ObjectDataSource control uses reflection to create instances of business objects and to call methods on them to retrieve, update, insert, and delete data.","pos":[1558,1716]},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property identifies the name of the class that the ObjectDataSource works with.","pos":[1717,1862],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property identifies the name of the class that the ObjectDataSource works with."},{"content":"The ObjectDataSource control creates and destroys an instance of the class for each method call; it does not hold the object in memory for the lifetime of the Web request.","pos":[1863,2034]},{"content":"This is a serious consideration if the business object that you use requires many resources or is otherwise expensive to create and destroy.","pos":[2035,2175]},{"content":"Using an expensive object might not be an optimal design choice, but you can control the life cycle of the object by using the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; events.","pos":[2176,2511],"source":" Using an expensive object might not be an optimal design choice, but you can control the life cycle of the object by using the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The methods that are identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; properties can be instance methods or <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) methods.","pos":[2517,2922],"source":"      > [!NOTE] >  The methods that are identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties can be instance methods or `static` (`Shared` in Visual Basic) methods."},{"content":"If the methods are <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), an instance of the business object is not created, and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; events are not raised.","pos":[2923,3261],"source":" If the methods are `static` (`Shared` in Visual Basic), an instance of the business object is not created, and the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events are not raised."},{"content":"<bpt id=\"p1\">&lt;a name=\"retrieving_data\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Retrieving Data    To retrieve data from a business object, set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property to the name of the method that retrieves data.","pos":[3267,3493],"source":"<a name=\"retrieving_data\"></a>    ## Retrieving Data    To retrieve data from a business object, set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to the name of the method that retrieves data."},{"content":"If the method does not return an &lt;xref:System.Collections.IEnumerable&gt; or &lt;xref:System.Data.DataSet&gt; object, the object is wrapped by the runtime in an &lt;xref:System.Collections.IEnumerable&gt; collection.","pos":[3494,3695],"source":" If the method does not return an <xref:System.Collections.IEnumerable> or <xref:System.Data.DataSet> object, the object is wrapped by the runtime in an <xref:System.Collections.IEnumerable> collection."},{"content":"If the method signature has parameters, you can add &lt;xref:System.Web.UI.WebControls.Parameter&gt; objects to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; collection, and then bind them to the values that you want to pass to the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property.","pos":[3696,4057],"source":" If the method signature has parameters, you can add <xref:System.Web.UI.WebControls.Parameter> objects to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection, and then bind them to the values that you want to pass to the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property."},{"content":"In order for the ObjectDataSource control to use the parameters, the parameters must match the names and types of the parameters in the method signature.","pos":[4058,4211]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Parameters with the ObjectDataSource Control<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[4212,4330],"source":" For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md)."},{"content":"The ObjectDataSource control retrieves data whenever the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is called.","pos":[4337,4471],"source":"       The ObjectDataSource control retrieves data whenever the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called."},{"content":"This method provides programmatic access to the method that is specified by &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property.","pos":[4472,4623],"source":" This method provides programmatic access to the method that is specified by <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property."},{"content":"The method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property is called automatically by controls that are bound to the ObjectDataSource when their <ph id=\"ph1\">`DataBind`</ph> method is called.","pos":[4624,4849],"source":" The method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property is called automatically by controls that are bound to the ObjectDataSource when their `DataBind` method is called."},{"content":"If you set the <ph id=\"ph1\">`DataSourceID`</ph> property of a data-bound control, the control automatically binds to data from the data source, as needed.","pos":[4850,4986],"source":" If you set the `DataSourceID` property of a data-bound control, the control automatically binds to data from the data source, as needed."},{"content":"Setting the <ph id=\"ph1\">`DataSourceID`</ph> property is the recommended method for binding an ObjectDataSource control to a data-bound control.","pos":[4987,5113],"source":" Setting the `DataSourceID` property is the recommended method for binding an ObjectDataSource control to a data-bound control."},{"content":"Alternatively, you can set the <ph id=\"ph1\">`DataSource`</ph> property, but then you must explicitly call the <ph id=\"ph2\">`DataBind`</ph> method of the data-bound control.","pos":[5114,5250],"source":" Alternatively, you can set the `DataSource` property, but then you must explicitly call the `DataBind` method of the data-bound control."},{"content":"You can call the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method programmatically at any time to retrieve data.","pos":[5251,5381],"source":" You can call the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method programmatically at any time to retrieve data."},{"content":"For more information about binding data-bound controls to data source controls, see <bpt id=\"p1\">[</bpt>Binding to Data Using a Data Source Control<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)</ept>.","pos":[5388,5588],"source":"       For more information about binding data-bound controls to data source controls, see [Binding to Data Using a Data Source Control](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)."},{"content":"<bpt id=\"p1\">&lt;a name=\"performing_data_operations\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Performing Data Operations    Depending on the capabilities of the business object that the ObjectDataSource control works with, you can perform data operations, such as updates, insertions, and deletions.","pos":[5594,5847],"source":"<a name=\"performing_data_operations\"></a>    ## Performing Data Operations    Depending on the capabilities of the business object that the ObjectDataSource control works with, you can perform data operations, such as updates, insertions, and deletions."},{"content":"To perform these data operations, set the appropriate method name and any associated parameters for the operation that you want to perform.","pos":[5848,5987]},{"content":"For example, for an update operation, set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property to the name of the business object method that performs updates and add any required parameters to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection.","pos":[5988,6293],"source":" For example, for an update operation, set the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property to the name of the business object method that performs updates and add any required parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection."},{"content":"If the ObjectDataSource control is associated with a data-bound control, the parameters are added by the data-bound control.","pos":[6294,6418]},{"content":"In this case, you need to ensure that the parameter names of the method match the field names in the data-bound control.","pos":[6419,6539]},{"content":"The update is performed when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt; method is called, either explicitly by your code or automatically by a data-bound control.","pos":[6540,6723],"source":" The update is performed when the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is called, either explicitly by your code or automatically by a data-bound control."},{"content":"The same general pattern is followed for &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt; operations.","pos":[6724,6900],"source":" The same general pattern is followed for <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operations."},{"content":"Business objects are assumed to perform these types of data operations one record at a time, rather than batched.","pos":[6901,7014]},{"content":"<bpt id=\"p1\">&lt;a name=\"filtering_data\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Filtering Data    The ObjectDataSource control can filter data that is retrieved by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property, if the data is returned as a &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt; object.","pos":[7020,7315],"source":"<a name=\"filtering_data\"></a>    ## Filtering Data    The ObjectDataSource control can filter data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, if the data is returned as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object."},{"content":"You can set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; property to a filtering expression by using a format string syntax and bind values in the expression to parameters that are specified in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A&gt; collection.","pos":[7316,7624],"source":" You can set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property to a filtering expression by using a format string syntax and bind values in the expression to parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection."},{"content":"<bpt id=\"p1\">&lt;a name=\"caching\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Caching    Although the ObjectDataSource does not retain the instance of the business object across multiple requests, it can cache the result of calling the method identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property.","pos":[7630,7917],"source":"<a name=\"caching\"></a>    ## Caching    Although the ObjectDataSource does not retain the instance of the business object across multiple requests, it can cache the result of calling the method identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property."},{"content":"While the data is cached, subsequent calls to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method return the cached data instead of creating the business object and calling its &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; using reflection.","pos":[7918,8197],"source":" While the data is cached, subsequent calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method return the cached data instead of creating the business object and calling its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> using reflection."},{"content":"Caching lets you avoid creating the object and calling its data method at the expense of memory on the Web server.","pos":[8198,8312]},{"content":"The ObjectDataSource automatically caches data when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A&gt; property is set to <ph id=\"ph1\">`true`</ph>, and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; property is set to the number of seconds that the cache stores data before the cache is discarded.","pos":[8313,8636],"source":" The ObjectDataSource automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to the number of seconds that the cache stores data before the cache is discarded."},{"content":"You can also specify a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt; property and an optional &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A&gt; property.","pos":[8637,8841],"source":" You can also specify a <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property and an optional <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> property."},{"content":"The ObjectDataSource control allows you to cache all types of data, but you should not cache objects that retain resources or state that cannot be shared to service multiple requests (for example, an open &lt;xref:System.Data.SqlClient.SqlDataReader&gt; object), because the same instance of the object will be used to service multiple requests.","pos":[8842,9181],"source":" The ObjectDataSource control allows you to cache all types of data, but you should not cache objects that retain resources or state that cannot be shared to service multiple requests (for example, an open <xref:System.Data.SqlClient.SqlDataReader> object), because the same instance of the object will be used to service multiple requests."},{"content":"<bpt id=\"p1\">&lt;a name=\"features\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Features    The following table describes the features of the ObjectDataSource control.","pos":[9187,9304],"source":"<a name=\"features\"></a>    ## Features    The following table describes the features of the ObjectDataSource control."},{"content":"|Capability|Requirements|   |----------------|------------------|   |Selecting|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property to the name of the business object method that selects data, and include any necessary parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; collection either programmatically or by using a data-bound control.|   |Sorting|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A&gt; property to the name of the parameter in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; method that carries the sort criteria.|   |Filtering|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; property to a filtering expression and optionally add any parameters to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A&gt; collection to filter the data when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is called.","pos":[9310,10311],"source":"      |Capability|Requirements|   |----------------|------------------|   |Selecting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to the name of the business object method that selects data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection either programmatically or by using a data-bound control.|   |Sorting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> property to the name of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> method that carries the sort criteria.|   |Filtering|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property to a filtering expression and optionally add any parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection to filter the data when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called."},{"content":"The method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property must return a &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt;.|   |Paging|Data source paging is supported, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; method contains parameters for the maximum number of records to retrieve and the index of the first record to retrieve.","pos":[10312,10725],"source":" The method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property must return a <xref:System.Data.DataSet> or <xref:System.Data.DataTable>.|   |Paging|Data source paging is supported, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> method contains parameters for the maximum number of records to retrieve and the index of the first record to retrieve."},{"content":"The names of those parameters must be set in the  &lt;xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A&gt; properties, respectively.","pos":[10726,10963],"source":" The names of those parameters must be set in the  <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> properties, respectively."},{"content":"A data-bound control might be able to perform paging itself, even if the ObjectDataSource control does not support paging directly in the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property.","pos":[10964,11201],"source":" A data-bound control might be able to perform paging itself, even if the ObjectDataSource control does not support paging directly in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property."},{"content":"The requirement for the data-bound control to be able to do this is that the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property return an object that implements the &lt;xref:System.Collections.ICollection&gt; interface.|   |Updating|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property to the name of the business object method that updates data, and include any necessary parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection.|   |Deleting|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; property to the name of the business object method or function that deletes data, and include any necessary parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection.|   |Inserting|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt; property to the name of the business object method or function that inserts data, and include any necessary parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A&gt; collection.|   |Caching|Set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A&gt; property to <ph id=\"ph1\">`true`</ph>, and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt; properties according to the caching behavior you want for your cached data.|      &gt; <ph id=\"ph2\">[!NOTE]</ph> &gt;  When you use the ObjectDataSource class to update or insert data, strings that are entered at the client are not automatically converted from the client culture format to the server culture format.","pos":[11202,12891],"source":" The requirement for the data-bound control to be able to do this is that the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property return an object that implements the <xref:System.Collections.ICollection> interface.|   |Updating|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property to the name of the business object method that updates data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection.|   |Deleting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property to the name of the business object method or function that deletes data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection.|   |Inserting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property to the name of the business object method or function that inserts data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection.|   |Caching|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties according to the caching behavior you want for your cached data.|      > [!NOTE] >  When you use the ObjectDataSource class to update or insert data, strings that are entered at the client are not automatically converted from the client culture format to the server culture format."},{"content":"For example, the client culture might specify DD/MM/YYYY as the date format, and the date format on the server might be MM/DD/YYYY.","pos":[12892,13023]},{"content":"In that case, October 5, 2009 would be entered in a &lt;xref:System.Web.UI.WebControls.TextBox&gt; control as 5/10/2009 but would be interpreted as May 10, 2009.","pos":[13024,13179],"source":" In that case, October 5, 2009 would be entered in a <xref:System.Web.UI.WebControls.TextBox> control as 5/10/2009 but would be interpreted as May 10, 2009."},{"content":"October 15, 2009 would be entered as 15/10/2009, and would be rejected as an invalid date.","pos":[13180,13270]},{"content":"<bpt id=\"p1\">&lt;a name=\"data_view\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Data View    As with all data source controls, the ObjectDataSource control is associated with a data source view class.","pos":[13276,13427],"source":"<a name=\"data_view\"></a>    ## Data View    As with all data source controls, the ObjectDataSource control is associated with a data source view class."},{"content":"While the ObjectDataSource control is the interface that the page developer uses to work with data, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; class is the interface that data-bound controls work with.","pos":[13428,13644],"source":" While the ObjectDataSource control is the interface that the page developer uses to work with data, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> class is the interface that data-bound controls work with."},{"content":"Additionally, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; class describes the capabilities of the data source control, and performs the actual work.","pos":[13645,13807],"source":" Additionally, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> class describes the capabilities of the data source control, and performs the actual work."},{"content":"The ObjectDataSource control has only one associated &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt;, and it is always named <ph id=\"ph1\">`DefaultView`</ph>.","pos":[13808,13953],"source":" The ObjectDataSource control has only one associated <xref:System.Web.UI.WebControls.ObjectDataSourceView>, and it is always named `DefaultView`."},{"content":"While the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A&gt; method, many of its properties and methods are wrapped and exposed directly by the ObjectDataSource control.","pos":[13954,14212],"source":" While the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> method, many of its properties and methods are wrapped and exposed directly by the ObjectDataSource control."},{"content":"Behind the scenes, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object performs all data operations, including retrieving, inserting, updating, deleting, filtering, and sorting the data.","pos":[14213,14412],"source":" Behind the scenes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object performs all data operations, including retrieving, inserting, updating, deleting, filtering, and sorting the data."},{"content":"For more information, see &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt;.","pos":[14413,14493],"source":" For more information, see <xref:System.Web.UI.WebControls.ObjectDataSourceView>."},{"content":"<bpt id=\"p1\">&lt;a name=\"using_linq_to_sql\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Using LINQ to SQL    You can use the ObjectDataSource control with a LINQ to SQL class.","pos":[14499,14625],"source":"<a name=\"using_linq_to_sql\"></a>    ## Using LINQ to SQL    You can use the ObjectDataSource control with a LINQ to SQL class."},{"content":"To do so, you set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property to the name of the data-context class.","pos":[14626,14757],"source":" To do so, you set the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property to the name of the data-context class."},{"content":"You also set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; methods to the methods in the data-context class that perform the corresponding operations.","pos":[14758,15137],"source":" You also set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> methods to the methods in the data-context class that perform the corresponding operations."},{"content":"You must create an event handler for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; event in order to cancel disposing of the data-context class.","pos":[15138,15306],"source":" You must create an event handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event in order to cancel disposing of the data-context class."},{"content":"This step is necessary because LINQ to SQL supports deferred execution, whereas the ObjectDataSource control tries to dispose the data context after the Select operation.","pos":[15307,15477]},{"content":"For more information about how to create LINQ to SQL classes, see <bpt id=\"p1\">[</bpt>How to: Create LINQ to SQL Classes in a Web Project<ept id=\"p1\">](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081)</ept>.","pos":[15478,15668],"source":" For more information about how to create LINQ to SQL classes, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081)."},{"content":"For an example of how to cancel the disposing of a data context class, see the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; event.","pos":[15669,15820],"source":" For an example of how to cancel the disposing of a data context class, see the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event."},{"content":"Using the Entity Framework    You can also use the ObjectDataSource control with the Entity Framework.","pos":[15829,15931]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using the Entity Framework and the ObjectDataSource Control<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=209117)</ept>.","pos":[15932,16067],"source":" For more information, see [Using the Entity Framework and the ObjectDataSource Control](http://go.microsoft.com/fwlink/?LinkId=209117)."},{"content":"<bpt id=\"p1\">&lt;a name=\"declarative_syntax\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Declarative Syntax      <ph id=\"ph1\">```   &lt;asp:ObjectDataSource       CacheDuration=\"string|Infinite\"       CacheExpirationPolicy=\"Absolute|Sliding\"       CacheKeyDependency=\"string\"       ConflictDetection=\"OverwriteChanges|CompareAllValues\"       ConvertNullToDBNull=\"True|False\"       DataObjectTypeName=\"string\"       DeleteMethod=\"string\"       EnableCaching=\"True|False\"       EnablePaging=\"True|False\"       EnableTheming=\"True|False\"       EnableViewState=\"True|False\"       FilterExpression=\"string\"       ID=\"string\"       InsertMethod=\"string\"       MaximumRowsParameterName=\"string\"       OldValuesParameterFormatString=\"string\"       OnDataBinding=\"DataBinding event handler\"       OnDeleted=\"Deleted event handler\"       OnDeleting=\"Deleting event handler\"       OnDisposed=\"Disposed event handler\"       OnFiltering=\"Filtering event handler\"       OnInit=\"Init event handler\"       OnInserted=\"Inserted event handler\"       OnInserting=\"Inserting event handler\"       OnLoad=\"Load event handler\"       OnObjectCreated=\"ObjectCreated event handler\"       OnObjectCreating=\"ObjectCreating event handler\"       OnObjectDisposing=\"ObjectDisposing event handler\"       OnPreRender=\"PreRender event handler\"       OnSelected=\"Selected event handler\"       OnSelecting=\"Selecting event handler\"       OnUnload=\"Unload event handler\"       OnUpdated=\"Updated event handler\"       OnUpdating=\"Updating event handler\"       runat=\"server\"       SelectCountMethod=\"string\"       SelectMethod=\"string\"       SkinID=\"string\"       SortParameterName=\"string\"       SqlCacheDependency=\"string\"       StartRowIndexParameterName=\"string\"       TypeName=\"string\"       UpdateMethod=\"string\"       Visible=\"True|False\"   &gt;           &lt;DeleteParameters&gt;                   &lt;asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;           &lt;/DeleteParameters&gt;           &lt;FilterParameters&gt;                   &lt;asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;           &lt;/FilterParameters&gt;           &lt;InsertParameters&gt;                   &lt;asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;           &lt;/InsertParameters&gt;           &lt;SelectParameters&gt;                   &lt;asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;           &lt;/SelectParameters&gt;           &lt;UpdateParameters&gt;                   &lt;asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;                   &lt;asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   /&gt;           &lt;/UpdateParameters&gt;   &lt;/asp:ObjectDataSource&gt;   ```</ph>","pos":[16073,37586],"source":"<a name=\"declarative_syntax\"></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=\"string|Infinite\"       CacheExpirationPolicy=\"Absolute|Sliding\"       CacheKeyDependency=\"string\"       ConflictDetection=\"OverwriteChanges|CompareAllValues\"       ConvertNullToDBNull=\"True|False\"       DataObjectTypeName=\"string\"       DeleteMethod=\"string\"       EnableCaching=\"True|False\"       EnablePaging=\"True|False\"       EnableTheming=\"True|False\"       EnableViewState=\"True|False\"       FilterExpression=\"string\"       ID=\"string\"       InsertMethod=\"string\"       MaximumRowsParameterName=\"string\"       OldValuesParameterFormatString=\"string\"       OnDataBinding=\"DataBinding event handler\"       OnDeleted=\"Deleted event handler\"       OnDeleting=\"Deleting event handler\"       OnDisposed=\"Disposed event handler\"       OnFiltering=\"Filtering event handler\"       OnInit=\"Init event handler\"       OnInserted=\"Inserted event handler\"       OnInserting=\"Inserting event handler\"       OnLoad=\"Load event handler\"       OnObjectCreated=\"ObjectCreated event handler\"       OnObjectCreating=\"ObjectCreating event handler\"       OnObjectDisposing=\"ObjectDisposing event handler\"       OnPreRender=\"PreRender event handler\"       OnSelected=\"Selected event handler\"       OnSelecting=\"Selecting event handler\"       OnUnload=\"Unload event handler\"       OnUpdated=\"Updated event handler\"       OnUpdating=\"Updating event handler\"       runat=\"server\"       SelectCountMethod=\"string\"       SelectMethod=\"string\"       SkinID=\"string\"       SortParameterName=\"string\"       SqlCacheDependency=\"string\"       StartRowIndexParameterName=\"string\"       TypeName=\"string\"       UpdateMethod=\"string\"       Visible=\"True|False\"   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=\"string\"                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=\"True|False\"                       CookieName=\"string\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       FormField=\"string\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:Parameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       PropertyName=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       QueryStringField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=\"True|False\"                       DefaultValue=\"string\"                       Direction=\"Input|Output|InputOutput|ReturnValue\"                       Name=\"string\"                       SessionField=\"string\"                       Size=\"integer\"                       Type=\"Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String\"                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```"}]},{"pos":[51652,51756],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> class."},{"pos":[52421,52585],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified type name and data retrieval method name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> class with the specified type name and data retrieval method name."},{"pos":[52597,52976],"content":"The value of the `typeName` parameter can be a partially qualified type for code that is located in the Bin or App_Code directory or a fully qualified type name for code that is registered in the global assembly cache. If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config configuration file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the <ph id=\"ph1\">`typeName`</ph> parameter can be a partially qualified type for code that is located in the Bin or App_Code directory or a fully qualified type name for code that is registered in the global assembly cache.","pos":[0,218],"source":"The value of the `typeName` parameter can be a partially qualified type for code that is located in the Bin or App_Code directory or a fully qualified type name for code that is registered in the global assembly cache."},{"content":"If you use the global assembly cache, you must add the appropriate reference to the <ph id=\"ph1\">`assemblies`</ph> section of the Machine.config or Web.config configuration file.","pos":[219,379],"source":" If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config configuration file."}]},{"pos":[53144,53250],"content":"The name of the class that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> works with.","needQuote":true,"needEscape":true,"source":"The name of the class that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> works with."},{"pos":[53319,53452],"content":"The name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> invokes to retrieve data.","needQuote":true,"needEscape":true,"source":"The name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> invokes to retrieve data."},{"pos":[53946,54130],"content":"Gets or sets the length of time, in seconds, that the data source control caches data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the length of time, in seconds, that the data source control caches data that is retrieved by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property.","pos":[0,184],"source":"Gets or sets the length of time, in seconds, that the data source control caches data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property."}]},{"pos":[54143,56451],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.       The cache is regulated by a combination of the duration and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> setting. If the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.ObjectDataSource> caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method and holds it in memory for, at most, the amount of time that is specified by the CacheDuration property. The data might be released before the duration time, if the memory is needed. The cache is then refreshed during the next call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property is set to <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, but resets the time window for which it holds the cache on each subsequent call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. The cache expires if there is no activity for a time that is equal to the CacheDuration property since the last call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports data caching.","pos":[0,84],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching."},{"content":"While data is cached, calls to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieve data from the cache rather than from the business object that the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; works with.","pos":[85,323],"source":" While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with."},{"content":"When the cache expires, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieves data from the business object, and then caches the data again.","pos":[324,491],"source":" When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically caches data when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A&gt; property is set to <ph id=\"ph1\">`true`</ph> and the CacheDuration property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded.","pos":[498,854],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded."},{"content":"A value of 0 indicates an infinitely long cache.","pos":[855,903]},{"content":"The cache is regulated by a combination of the duration and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt; setting.","pos":[910,1057],"source":"       The cache is regulated by a combination of the duration and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> setting."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt; property is set to the &lt;xref:System.Web.UI.DataSourceCacheExpiry&gt; value, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; caches data on the first call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method and holds it in memory for, at most, the amount of time that is specified by the CacheDuration property.","pos":[1058,1475],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.ObjectDataSource> caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method and holds it in memory for, at most, the amount of time that is specified by the CacheDuration property."},{"content":"The data might be released before the duration time, if the memory is needed.","pos":[1476,1553]},{"content":"The cache is then refreshed during the next call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[1554,1677],"source":" The cache is then refreshed during the next call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt; property is set to &lt;xref:System.Web.UI.DataSourceCacheExpiry&gt; value, the data source control caches data on the first call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method, but resets the time window for which it holds the cache on each subsequent call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[1678,2112],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property is set to <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, but resets the time window for which it holds the cache on each subsequent call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."},{"content":"The cache expires if there is no activity for a time that is equal to the CacheDuration property since the last call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[2113,2304],"source":" The cache expires if there is no activity for a time that is equal to the CacheDuration property since the last call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."}]},{"pos":[59010,59261],"content":"The number of seconds that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> caches the results of a <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property invocation. The default is 0. The value cannot be negative.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of seconds that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> caches the results of a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property invocation.","pos":[0,203],"source":"The number of seconds that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> caches the results of a <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property invocation."},{"content":"The default is 0.","pos":[204,221]},{"content":"The value cannot be negative.","pos":[222,251]}]},{"pos":[59803,59955],"content":"Gets or sets the cache expiration behavior that, when combined with the duration, describes the behavior of the cache that the data source control uses.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the cache expiration behavior that, when combined with the duration, describes the behavior of the cache that the data source control uses.","pos":[0,152]}]},{"pos":[59968,62288],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache period.       The cache is regulated by a combination of the duration and the CacheExpirationPolicy setting. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.ObjectDataSource> caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method and holds it in memory for, at most, the amount of time that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property. The data might be released before the duration time, if the memory is needed. The cache is then refreshed during the next call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, but resets the time window for which it holds the cache for each subsequent call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. The cache expires if there is no activity for a time that is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property since the last call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports data caching.","pos":[0,84],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching."},{"content":"While data is cached, calls to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieve data from the cache rather than from the business object that the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; works with.","pos":[85,323],"source":" While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with."},{"content":"When the cache expires, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieves data from the business object, and then caches the data again.","pos":[324,491],"source":" When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically caches data when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A&gt; property is set to <ph id=\"ph1\">`true`</ph> and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded.","pos":[498,907],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded."},{"content":"A value of 0 indicates an infinitely long cache period.","pos":[908,963]},{"content":"The cache is regulated by a combination of the duration and the CacheExpirationPolicy setting.","pos":[970,1064]},{"content":"If the CacheExpirationPolicy property is set to the &lt;xref:System.Web.UI.DataSourceCacheExpiry&gt; value, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; caches data on the first call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method and holds it in memory for, at most, the amount of time that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; property.","pos":[1065,1482],"source":" If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.ObjectDataSource> caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method and holds it in memory for, at most, the amount of time that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property."},{"content":"The data might be released before the duration time, if the memory is needed.","pos":[1483,1560]},{"content":"The cache is then refreshed during the next call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[1561,1684],"source":" The cache is then refreshed during the next call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."},{"content":"If the CacheExpirationPolicy property is set to the &lt;xref:System.Web.UI.DataSourceCacheExpiry&gt; value, the data source control caches data on the first call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method, but resets the time window for which it holds the cache for each subsequent call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[1685,2071],"source":" If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, but resets the time window for which it holds the cache for each subsequent call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."},{"content":"The cache expires if there is no activity for a time that is equal to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; property since the last call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[2072,2316],"source":" The cache expires if there is no activity for a time that is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property since the last call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."}]},{"pos":[65065,65213],"content":"One of the <xref href=\"System.Web.UI.DataSourceCacheExpiry\"></xref> values. The default is <xref href=\"System.Web.UI.DataSourceCacheExpiry\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataSourceCacheExpiry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,75],"source":"One of the <xref href=\"System.Web.UI.DataSourceCacheExpiry\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.DataSourceCacheExpiry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[76,148],"source":" The default is <xref href=\"System.Web.UI.DataSourceCacheExpiry\"></xref>."}]},{"pos":[65748,65876],"content":"Gets or sets a user-defined key dependency that is linked to all data cache objects that are created by the data source control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a user-defined key dependency that is linked to all data cache objects that are created by the data source control.","pos":[0,128]}]},{"pos":[65889,68215],"content":"The CacheKeyDependency property can be set to any arbitrary string value.       All cache objects are explicitly expired when the key is expired. This allows you to invalidate cache entries that are created by the <xref:System.Web.UI.WebControls.ObjectDataSource> from your own page code programmatically.       The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.       You can set the CacheKeyDependency property to create a dependency between all cache entries that are created by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and the key. You can expire all the cache entries programmatically at any time by expiring the key. Expire the key by using the <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName> method with the current CacheKeyDependency value as the parameter.       A unique cache entry is created for every combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> properties. Multiple <xref:System.Web.UI.WebControls.ObjectDataSource> controls can use the same cache entries in scenarios where they load data using the same type, method, and parameters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The CacheKeyDependency property can be set to any arbitrary string value.","pos":[0,73]},{"content":"All cache objects are explicitly expired when the key is expired.","pos":[80,145]},{"content":"This allows you to invalidate cache entries that are created by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; from your own page code programmatically.","pos":[146,305],"source":" This allows you to invalidate cache entries that are created by the <xref:System.Web.UI.WebControls.ObjectDataSource> from your own page code programmatically."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports data caching.","pos":[312,396],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching."},{"content":"While data is cached, calls to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieve data from the cache rather than from the business object that the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; works with.","pos":[397,635],"source":" While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with."},{"content":"When the cache expires, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieves data from the business object, and then caches the data again.","pos":[636,803],"source":" When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically caches data when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A&gt; property is set to <ph id=\"ph1\">`true`</ph> and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded.","pos":[810,1219],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded."},{"content":"A value of 0 indicates an infinitely long cache.","pos":[1220,1268]},{"content":"You can set the CacheKeyDependency property to create a dependency between all cache entries that are created by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control and the key.","pos":[1275,1462],"source":"       You can set the CacheKeyDependency property to create a dependency between all cache entries that are created by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and the key."},{"content":"You can expire all the cache entries programmatically at any time by expiring the key.","pos":[1463,1549]},{"content":"Expire the key by using the &lt;xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName&gt; method with the current CacheKeyDependency value as the parameter.","pos":[1550,1711],"source":" Expire the key by using the <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName> method with the current CacheKeyDependency value as the parameter."},{"content":"A unique cache entry is created for every combination of the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; properties.","pos":[1718,2138],"source":"       A unique cache entry is created for every combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> properties."},{"content":"Multiple &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; controls can use the same cache entries in scenarios where they load data using the same type, method, and parameters.","pos":[2139,2316],"source":" Multiple <xref:System.Web.UI.WebControls.ObjectDataSource> controls can use the same cache entries in scenarios where they load data using the same type, method, and parameters."}]},{"pos":[71330,71449],"content":"A key that identifies all cache objects created by the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A key that identifies all cache objects created by the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref>."},{"pos":[71976,72259],"content":"Gets or sets a value that determines whether or not just the new values are passed to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method or both the old and new values are passed to the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> method.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that determines whether or not just the new values are passed to the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> method or both the old and new values are passed to the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> method."},{"pos":[72272,74447],"content":"This property determines whether parameters for old and new values are applied to the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property. For example, if the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataTable> control with the columns `Name` and `Number`, and the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> field, parameters are created for `Name` and `Number` for the `Update` method. If the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name`, `Number`, `original_Name`, and `original_Number`. (The exact name of the parameters for the original values depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property.) The <xref:System.Web.UI.WebControls.ObjectDataSource> then determines whether the method that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property has parameters that match.       Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data and presents it to a different user. If both users update the data and submit it to the data storage, an unexpected result might occur, because both clients might provide different values for the same data. This is considered a conflict. By setting the ConflictDetection property to the <xref:System.Web.UI.ConflictOptions> value, the `Update` method can then compare the old and new values to the original data source to detect conflicts and handle them as necessary.       The ConflictDetection property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines whether parameters for old and new values are applied to the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property.","pos":[0,185],"source":"This property determines whether parameters for old and new values are applied to the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property."},{"content":"For example, if the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property returns a &lt;xref:System.Data.DataTable&gt; control with the columns <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`Number`</ph>, and the ConflictDetection property is set to the &lt;xref:System.Web.UI.ConflictOptions&gt; field, parameters are created for <ph id=\"ph3\">`Name`</ph> and <ph id=\"ph4\">`Number`</ph> for the <ph id=\"ph5\">`Update`</ph> method.","pos":[186,562],"source":" For example, if the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataTable> control with the columns `Name` and `Number`, and the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> field, parameters are created for `Name` and `Number` for the `Update` method."},{"content":"If the ConflictDetection property is set to the &lt;xref:System.Web.UI.ConflictOptions&gt; value, parameters are created for <ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Number`</ph>, <ph id=\"ph3\">`original_Name`</ph>, and <ph id=\"ph4\">`original_Number`</ph>.","pos":[563,739],"source":" If the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name`, `Number`, `original_Name`, and `original_Number`."},{"content":"(The exact name of the parameters for the original values depends on the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A&gt; property.) The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; then determines whether the method that is specified in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property has parameters that match.","pos":[740,1123],"source":" (The exact name of the parameters for the original values depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property.) The <xref:System.Web.UI.WebControls.ObjectDataSource> then determines whether the method that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property has parameters that match."},{"content":"Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data.","pos":[1130,1306]},{"content":"For example, one client reads data and presents it to a user, while another client reads the same data and presents it to a different user.","pos":[1307,1446]},{"content":"If both users update the data and submit it to the data storage, an unexpected result might occur, because both clients might provide different values for the same data.","pos":[1447,1616]},{"content":"This is considered a conflict.","pos":[1617,1647]},{"content":"By setting the ConflictDetection property to the &lt;xref:System.Web.UI.ConflictOptions&gt; value, the <ph id=\"ph1\">`Update`</ph> method can then compare the old and new values to the original data source to detect conflicts and handle them as necessary.","pos":[1648,1878],"source":" By setting the ConflictDetection property to the <xref:System.Web.UI.ConflictOptions> value, the `Update` method can then compare the old and new values to the original data source to detect conflicts and handle them as necessary."},{"content":"The ConflictDetection property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1885,2171],"source":"       The ConflictDetection property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]},{"pos":[74614,74750],"content":"One of the <xref href=\"System.Web.UI.ConflictOptions\"></xref> values. The default is <xref href=\"System.Web.UI.ConflictOptions\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.ConflictOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,69],"source":"One of the <xref href=\"System.Web.UI.ConflictOptions\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.ConflictOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[70,136],"source":" The default is <xref href=\"System.Web.UI.ConflictOptions\"></xref>."}]},{"pos":[75286,75679],"content":"Gets or sets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Parameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that are passed to an update, insert, or delete operation are automatically converted from <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to the <bpt id=\"p3\">&lt;xref href=\"System.DBNull.Value\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> value by the <bpt id=\"p4\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.Parameter\"></xref> values that are passed to an update, insert, or delete operation are automatically converted from <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to the <xref href=\"System.DBNull.Value\"></xref> value by the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control."},{"pos":[75691,76097],"content":"Not converting `null` to the <xref:System.DBNull.Value> value can result in errors at run time. Use the ConvertNullToDBNull property to indicate whether <xref:System.Web.UI.WebControls.Parameter> values that are passed to an update, insert, or delete operation are automatically converted from `null` to the <xref:System.DBNull.Value> value by the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Not converting <ph id=\"ph1\">`null`</ph> to the &lt;xref:System.DBNull.Value&gt; value can result in errors at run time.","pos":[0,95],"source":"Not converting `null` to the <xref:System.DBNull.Value> value can result in errors at run time."},{"content":"Use the ConvertNullToDBNull property to indicate whether &lt;xref:System.Web.UI.WebControls.Parameter&gt; values that are passed to an update, insert, or delete operation are automatically converted from <ph id=\"ph1\">`null`</ph> to the &lt;xref:System.DBNull.Value&gt; value by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[96,406],"source":" Use the ConvertNullToDBNull property to indicate whether <xref:System.Web.UI.WebControls.Parameter> values that are passed to an update, insert, or delete operation are automatically converted from `null` to the <xref:System.DBNull.Value> value by the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]},{"pos":[76225,76749],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if any <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> values in <xref href=\"System.Web.UI.WebControls.Parameter\"></xref> objects passed to the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control are automatically converted to <xref href=\"System.DBNull.Value\"></xref> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if any <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> values in <bpt id=\"p3\">&lt;xref href=\"System.Web.UI.WebControls.Parameter\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> objects passed to the <bpt id=\"p4\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> control are automatically converted to <bpt id=\"p5\">&lt;xref href=\"System.DBNull.Value\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept> values; otherwise, <bpt id=\"p6\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p6\">&lt;/xref&gt;</ept>.","pos":[0,445],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if any <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> values in <xref href=\"System.Web.UI.WebControls.Parameter\"></xref> objects passed to the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control are automatically converted to <xref href=\"System.DBNull.Value\"></xref> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[446,524],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[77282,77530],"content":"Gets or sets the name of a class that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control uses for a parameter in an update, insert, or delete data operation, instead of passing individual values from the data-bound control.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of a class that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control uses for a parameter in an update, insert, or delete data operation, instead of passing individual values from the data-bound control."},{"pos":[77543,80715],"content":"Instead of specifying several parameters that are passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, you can create one object that aggregates several data field values. This one object is passed to the methods, instead of several parameters.       The default behavior of an <xref:System.Web.UI.WebControls.ObjectDataSource> control that is bound to a data-bound control is that the data-bound control creates a <xref:System.Web.UI.WebControls.Parameter> object for each parameter in the data source. If the business object has many fields, the resulting method also has many fields. The DataObjectTypeName property allows you to specify a type that has a property for each data field. Then, instead of passing several parameters to the method, the runtime creates one object and sets all of its properties. This one object is added to the parameters collection for the method call.       The type that is specified by the DataObjectTypeName property must have a default constructor that has no parameters, so the <xref:System.Web.UI.WebControls.ObjectDataSource> control can create an instance of the type. The type must also have settable properties that allow the <xref:System.Web.UI.WebControls.ObjectDataSource> control to populate the object with values that are passed from the data-bound control. The property names on the <xref:System.Web.UI.WebControls.ObjectDataSource> control are expected to exactly match the parameter names of values that are passed by the data-bound control.       When the DataObjectTypeName property is set and the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, the methods that are specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties must each have one parameter of the type that is specified in the DataObjectTypeName property. If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have one parameter of the type that is specified in the DataObjectTypeName property. If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have two parameters of the type that is specified in the DataObjectTypeName property. The first parameter contains the original values; the second parameter contains the new values.       The DataObjectTypeName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Instead of specifying several parameters that are passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, you can create one object that aggregates several data field values. This one object is passed to the methods, instead of several parameters.       The default behavior of an <xref:System.Web.UI.WebControls.ObjectDataSource> control that is bound to a data-bound control is that the data-bound control creates a <xref:System.Web.UI.WebControls.Parameter> object for each parameter in the data source. If the business object has many fields, the resulting method also has many fields. The DataObjectTypeName property allows you to specify a type that has a property for each data field. Then, instead of passing several parameters to the method, the runtime creates one object and sets all of its properties. This one object is added to the parameters collection for the method call.       The type that is specified by the DataObjectTypeName property must have a default constructor that has no parameters, so the <xref:System.Web.UI.WebControls.ObjectDataSource> control can create an instance of the type. The type must also have settable properties that allow the <xref:System.Web.UI.WebControls.ObjectDataSource> control to populate the object with values that are passed from the data-bound control. The property names on the <xref:System.Web.UI.WebControls.ObjectDataSource> control are expected to exactly match the parameter names of values that are passed by the data-bound control.       When the DataObjectTypeName property is set and the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, the methods that are specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties must each have one parameter of the type that is specified in the DataObjectTypeName property. If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have one parameter of the type that is specified in the DataObjectTypeName property. If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have two parameters of the type that is specified in the DataObjectTypeName property. The first parameter contains the original values; the second parameter contains the new values.       The DataObjectTypeName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","pos":[0,3164],"nodes":[{"content":"Instead of specifying several parameters that are passed to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; methods, you can create one object that aggregates several data field values.","pos":[0,327],"source":"Instead of specifying several parameters that are passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, you can create one object that aggregates several data field values."},{"content":"This one object is passed to the methods, instead of several parameters.","pos":[328,400]},{"content":"The default behavior of an &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control that is bound to a data-bound control is that the data-bound control creates a &lt;xref:System.Web.UI.WebControls.Parameter&gt; object for each parameter in the data source.","pos":[407,659],"source":"       The default behavior of an <xref:System.Web.UI.WebControls.ObjectDataSource> control that is bound to a data-bound control is that the data-bound control creates a <xref:System.Web.UI.WebControls.Parameter> object for each parameter in the data source."},{"content":"If the business object has many fields, the resulting method also has many fields.","pos":[660,742]},{"content":"The DataObjectTypeName property allows you to specify a type that has a property for each data field.","pos":[743,844]},{"content":"Then, instead of passing several parameters to the method, the runtime creates one object and sets all of its properties.","pos":[845,966]},{"content":"This one object is added to the parameters collection for the method call.","pos":[967,1041]},{"content":"The type that is specified by the DataObjectTypeName property must have a default constructor that has no parameters, so the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control can create an instance of the type.","pos":[1048,1266],"source":"       The type that is specified by the DataObjectTypeName property must have a default constructor that has no parameters, so the <xref:System.Web.UI.WebControls.ObjectDataSource> control can create an instance of the type."},{"content":"The type must also have settable properties that allow the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control to populate the object with values that are passed from the data-bound control.","pos":[1267,1463],"source":" The type must also have settable properties that allow the <xref:System.Web.UI.WebControls.ObjectDataSource> control to populate the object with values that are passed from the data-bound control."},{"content":"The property names on the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control are expected to exactly match the parameter names of values that are passed by the data-bound control.","pos":[1464,1650],"source":" The property names on the <xref:System.Web.UI.WebControls.ObjectDataSource> control are expected to exactly match the parameter names of values that are passed by the data-bound control."},{"content":"When the DataObjectTypeName property is set and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is associated with a data-bound control, the methods that are specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; properties must each have one parameter of the type that is specified in the DataObjectTypeName property.","pos":[1657,2087],"source":"       When the DataObjectTypeName property is set and the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, the methods that are specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties must each have one parameter of the type that is specified in the DataObjectTypeName property."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A&gt; property is set to the &lt;xref:System.Web.UI.ConflictOptions&gt; value, the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property must have one parameter of the type that is specified in the DataObjectTypeName property.","pos":[2088,2433],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have one parameter of the type that is specified in the DataObjectTypeName property."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A&gt; property is set to the &lt;xref:System.Web.UI.ConflictOptions&gt; value, the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property must have two parameters of the type that is specified in the DataObjectTypeName property.","pos":[2434,2780],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have two parameters of the type that is specified in the DataObjectTypeName property."},{"content":"The first parameter contains the original values; the second parameter contains the new values.","pos":[2781,2876]},{"content":"The DataObjectTypeName property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[2883,3164],"source":"       The DataObjectTypeName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]}]},{"pos":[82396,82808],"content":"A partially or fully qualified class name that identifies the type of the object that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> can use as a parameter for an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>, or a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A partially or fully qualified class name that identifies the type of the object that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can use as a parameter for an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert<bpt id=\"p2\">*</bpt>&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update<ept id=\"p2\">*</ept>&gt;, or a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete*&gt; operation.","pos":[0,375],"source":"A partially or fully qualified class name that identifies the type of the object that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> can use as a parameter for an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>, or a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation."},{"content":"The default is an empty string (\"\").","pos":[376,412]}]},{"pos":[83284,83548],"content":"Performs a delete operation by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod<bpt id=\"p1\">*</bpt>&gt; property with any parameters that are in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Performs a delete operation by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> property with any parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*> collection."},{"pos":[83561,85812],"content":"Before the Delete operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event to examine the values of the parameters and to perform any preprocessing before a Delete operation. To perform a delete operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> properties. If the deletion parameters come from an associated data-bound control, the name of the parameters is created according to the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. After the Delete operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.       The Delete method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Delete method from page code. The Delete method is invoked directly by the data-bound control instead.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before the Delete operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event to examine the values of the parameters and to perform any preprocessing before a Delete operation. To perform a delete operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> properties. If the deletion parameters come from an associated data-bound control, the name of the parameters is created according to the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. After the Delete operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.       The Delete method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Delete method from page code. The Delete method is invoked directly by the data-bound control instead.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.","pos":[0,2244],"nodes":[{"content":"Before the Delete operation is performed, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Deleting&gt; event.","pos":[0,209],"source":"Before the Delete operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Deleting&gt; event to examine the values of the parameters and to perform any preprocessing before a Delete operation.","pos":[210,393],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event to examine the values of the parameters and to perform any preprocessing before a Delete operation."},{"content":"To perform a delete operation, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object uses reflection to create an instance of the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property.","pos":[394,639],"source":" To perform a delete operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property."},{"content":"It then calls the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; property, using any associated &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; properties.","pos":[640,869],"source":" It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> properties."},{"content":"If the deletion parameters come from an associated data-bound control, the name of the parameters is created according to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A&gt; property.","pos":[870,1089],"source":" If the deletion parameters come from an associated data-bound control, the name of the parameters is created according to the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property."},{"content":"After the Delete operation completes, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Deleted&gt; event.","pos":[1090,1293],"source":" After the Delete operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Deleted&gt; event to examine any return values, output parameters, and exceptions, and to perform any post-processing.","pos":[1294,1477],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing."},{"content":"The Delete method delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A&gt; method of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1484,1744],"source":"       The Delete method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"Data-Bound Controls    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is associated with a data-bound control, such as the &lt;xref:System.Web.UI.WebControls.GridView&gt; control, it is not necessary to call the Delete method from page code.","pos":[1753,2008],"source":"      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Delete method from page code."},{"content":"The Delete method is invoked directly by the data-bound control instead.","pos":[2009,2081]},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt;.","pos":[2088,2244],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>."}]}]},{"pos":[85934,86307],"content":"A value that represents the number of rows deleted from the underlying data storage, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is set in the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource.Deleted\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event; otherwise, -1.","needQuote":true,"needEscape":true,"source":"A value that represents the number of rows deleted from the underlying data storage, if the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*> property of the <xref href=\"System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs\"></xref> is set in the <xref href=\"System.Web.UI.WebControls.ObjectDataSource.Deleted\"></xref> event; otherwise, -1."},{"pos":[86769,86865],"content":"Occurs when a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete*&gt; operation has completed.","pos":[0,96],"source":"Occurs when a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation has completed."}]},{"pos":[86878,88244],"content":"Handle the Deleted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.       You can use the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object to return the number of rows that were deleted from the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method. To do this, set the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property. If you return the number of deleted rows from the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, the value is available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Deleted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; operation has completed.","pos":[0,227],"source":"Handle the Deleted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> operation has completed."},{"content":"The return value, output parameters, and exception handling properties are available from the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&gt; object that is associated with the event.","pos":[228,428],"source":" The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event."},{"content":"You can use the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&gt; object to return the number of rows that were deleted from the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; method.","pos":[435,743],"source":"       You can use the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object to return the number of rows that were deleted from the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method."},{"content":"To do this, set the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A&gt; property.","pos":[744,854],"source":" To do this, set the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property."},{"content":"If you return the number of deleted rows from the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; property, the value is available from the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&gt; object.","pos":[855,1213],"source":" If you return the number of deleted rows from the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, the value is available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[1220,1362],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[90967,90979],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[91406,91558],"content":"Gets or sets the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control invokes to delete data.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to delete data."},{"pos":[91571,96983],"content":"The business object is assumed to delete data one record at a time, rather than in a batch.       The DeleteMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       Make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection match the column names that are returned by the select method.      ## Object Lifetime    The method that is identified by the DeleteMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the DeleteMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the DeleteMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the DeleteMethod property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection from three sources:      -   From the data-bound control, at run time.      -   From the `DeleteParameters` element, declaratively.      -   From the `Deleting` method, declaratively.       First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, parameters for `Name` and `Number` are added to the collection. The exact name of the parameter depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. The data type of these parameters is `string`. Next, the parameters that are listed in the `DeleteParameters` element are added. If a parameter in the `DeleteParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `DeleteParameters` element. Typically, this is used to modify the type of the data in the parameter. Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `DeleteParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> object then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the DeleteMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose the type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `DeleteARecord`. One `DeleteARecord` has one parameter, `ID`, and the other `DeleteARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection has only one parameter named `ID`, the `DeleteARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the DeleteMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The business object is assumed to delete data one record at a time, rather than in a batch.","pos":[0,91]},{"content":"The DeleteMethod property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[98,374],"source":"       The DeleteMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"Make sure that the parameter names configured for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection match the column names that are returned by the select method.","pos":[381,643],"source":"       Make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection match the column names that are returned by the select method."},{"content":"Object Lifetime    The method that is identified by the DeleteMethod property can be an instance method or a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method.","pos":[652,804],"source":"      ## Object Lifetime    The method that is identified by the DeleteMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method."},{"content":"If it is an instance method, the business object is created and destroyed each time the DeleteMethod property is called.","pos":[805,925]},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt; events to work with the business object before the DeleteMethod property is called.","pos":[926,1161],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the DeleteMethod property is called."},{"content":"You can also handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; event that is raised after the DeleteMethod property is called.","pos":[1162,1315],"source":" You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the DeleteMethod property is called."},{"content":"If the business object implements the &lt;xref:System.IDisposable&gt; interface, the &lt;xref:System.IDisposable.Dispose%2A&gt; method is called before the object is destroyed.","pos":[1316,1480],"source":" If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed."},{"content":"If the method is a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method, the business object is never created and you cannot handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; events.","pos":[1481,1815],"source":" If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events."},{"content":"Parameter Merging    Parameters are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection from three sources:      -   From the data-bound control, at run time.","pos":[1824,2024],"source":"      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection from three sources:      -   From the data-bound control, at run time."},{"content":"-   From the <ph id=\"ph1\">`DeleteParameters`</ph> element, declaratively.","pos":[2030,2085],"source":"      -   From the `DeleteParameters` element, declaratively."},{"content":"-   From the <ph id=\"ph1\">`Deleting`</ph> method, declaratively.","pos":[2091,2137],"source":"      -   From the `Deleting` method, declaratively."},{"content":"First, any parameters that are generated from data-bound controls are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection.","pos":[2144,2308],"source":"       First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection."},{"content":"For example, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is bound to a &lt;xref:System.Web.UI.WebControls.GridView&gt; control that has the columns <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`Number`</ph>, parameters for <ph id=\"ph3\">`Name`</ph> and <ph id=\"ph4\">`Number`</ph> are added to the collection.","pos":[2309,2556],"source":" For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, parameters for `Name` and `Number` are added to the collection."},{"content":"The exact name of the parameter depends on the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A&gt; property.","pos":[2557,2697],"source":" The exact name of the parameter depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property."},{"content":"The data type of these parameters is <ph id=\"ph1\">`string`</ph>.","pos":[2698,2744],"source":" The data type of these parameters is `string`."},{"content":"Next, the parameters that are listed in the <ph id=\"ph1\">`DeleteParameters`</ph> element are added.","pos":[2745,2826],"source":" Next, the parameters that are listed in the `DeleteParameters` element are added."},{"content":"If a parameter in the <ph id=\"ph1\">`DeleteParameters`</ph> element is found with the same name as a parameter that is already in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection, the existing parameter is modified to match the parameter that is specified in the <ph id=\"ph2\">`DeleteParameters`</ph> element.","pos":[2827,3134],"source":" If a parameter in the `DeleteParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `DeleteParameters` element."},{"content":"Typically, this is used to modify the type of the data in the parameter.","pos":[3135,3207]},{"content":"Finally, you can programmatically add and remove parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Deleting&gt; event, which occurs before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; method is run.","pos":[3208,3439],"source":" Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method is run."},{"content":"The method is resolved after the parameters are merged.","pos":[3440,3495]},{"content":"Method resolution is discussed in the next section.","pos":[3496,3547]},{"content":"Method Resolution    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; method is called, the data fields from the data-bound control, the parameters that were created declaratively in the <ph id=\"ph1\">`DeleteParameters`</ph> element, and the parameters that were added in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Deleting&gt; event handler are all merged.","pos":[3556,3921],"source":"      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `DeleteParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event handler are all merged."},{"content":"(For more information, see the preceding section.) The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; object then attempts to find a method to call.","pos":[3922,4073],"source":" (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> object then attempts to find a method to call."},{"content":"First, it looks for one or more methods with the name that is specified in the DeleteMethod property.","pos":[4074,4175]},{"content":"If no match is found, an &lt;xref:System.InvalidOperationException&gt; exception is thrown.","pos":[4176,4261],"source":" If no match is found, an <xref:System.InvalidOperationException> exception is thrown."},{"content":"If a match is found, it then looks for matching parameter names.","pos":[4262,4326]},{"content":"For example, suppose the type that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property has two methods named <ph id=\"ph1\">`DeleteARecord`</ph>.","pos":[4327,4491],"source":" For example, suppose the type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `DeleteARecord`."},{"content":"One <ph id=\"ph1\">`DeleteARecord`</ph> has one parameter, <ph id=\"ph2\">`ID`</ph>, and the other <ph id=\"ph3\">`DeleteARecord`</ph> has two parameters, <ph id=\"ph4\">`Name`</ph> and <ph id=\"ph5\">`Number`</ph>.","pos":[4492,4607],"source":" One `DeleteARecord` has one parameter, `ID`, and the other `DeleteARecord` has two parameters, `Name` and `Number`."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection has only one parameter named <ph id=\"ph1\">`ID`</ph>, the <ph id=\"ph2\">`DeleteARecord`</ph> method with just the <ph id=\"ph3\">`ID`</ph> parameter is called.","pos":[4608,4797],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection has only one parameter named `ID`, the `DeleteARecord` method with just the `ID` parameter is called."},{"content":"The type of the parameter is not checked in resolving the methods.","pos":[4798,4864]},{"content":"The order of the parameters does not matter.","pos":[4865,4909]},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property is set, the method is resolved in a different way.","pos":[4916,5054],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; looks for a method with the name that is specified in the DeleteMethod property that takes one parameter of the type that is specified in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property.","pos":[5055,5332],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the DeleteMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property."},{"content":"In this case, the name of the parameter does not matter.","pos":[5333,5389]}]},{"pos":[99606,99796],"content":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to delete data. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses to delete data.","pos":[0,153],"source":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to delete data."},{"content":"The default is an empty string (\"\").","pos":[154,190]}]},{"pos":[100312,100464],"content":"Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*&gt; method.","pos":[0,152],"source":"Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> method."}]},{"pos":[100477,101734],"content":"The names and types of the parameters that are contained in the DeleteParameters collection must match the names and types of the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> method signature. The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property and are case-sensitive. The parameters in the collection depend on the data that is in the data-bound control, the parameters that are specified declaratively, and the parameters that are added programmatically. For more information, see \"Parameter Merging\" in <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> and [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).       The DeleteParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The names and types of the parameters that are contained in the DeleteParameters collection must match the names and types of the parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; method signature.","pos":[0,231],"source":"The names and types of the parameters that are contained in the DeleteParameters collection must match the names and types of the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> method signature."},{"content":"The parameter names are affected by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A&gt; property and are case-sensitive.","pos":[232,388],"source":" The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property and are case-sensitive."},{"content":"The parameters in the collection depend on the data that is in the data-bound control, the parameters that are specified declaratively, and the parameters that are added programmatically.","pos":[389,576]},{"content":"For more information, see \"Parameter Merging\" in &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; and <bpt id=\"p1\">[</bpt>Using Parameters with the ObjectDataSource Control<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[577,782],"source":" For more information, see \"Parameter Merging\" in <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> and [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md)."},{"content":"The DeleteParameters property retrieves the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A&gt; property that is contained by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[789,1088],"source":"       The DeleteParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt;.","pos":[1095,1251],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>."}]},{"pos":[104775,104956],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the parameters used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*&gt; method.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains the parameters used by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> method."},{"pos":[105433,105517],"content":"Occurs before a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete*&gt; operation.","pos":[0,84],"source":"Occurs before a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation."}]},{"pos":[105530,106459],"content":"Handle the Deleting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the delete operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.       You can cancel the delete operation by setting the <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Deleting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control performs the delete operation.","pos":[0,272],"source":"Handle the Deleting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the delete operation."},{"content":"The parameters are available as an &lt;xref:System.Collections.IDictionary&gt; collection that is accessed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A&gt; property, which is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs&gt; object.","pos":[273,571],"source":" The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object."},{"content":"You can cancel the delete operation by setting the &lt;xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs&gt; to <ph id=\"ph1\">`true`</ph>.","pos":[578,776],"source":"       You can cancel the delete operation by setting the <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> to `true`."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[783,925],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[109184,109196],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[109628,109769],"content":"Gets or sets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control has data caching enabled.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control has data caching enabled."},{"pos":[109782,110718],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than the <xref:System.Web.UI.WebControls.ObjectDataSource> creating an instance of the business object and calling its data method. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports data caching.","pos":[0,84],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching."},{"content":"While data is cached, calls to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieve data from the cache rather than the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; creating an instance of the business object and calling its data method.","pos":[85,354],"source":" While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than the <xref:System.Web.UI.WebControls.ObjectDataSource> creating an instance of the business object and calling its data method."},{"content":"When the cache expires, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method retrieves data from the business object, and then caches the data again.","pos":[355,522],"source":" When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically caches data when the EnableCaching property is set to <ph id=\"ph1\">`true`</ph> and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded.","pos":[529,885],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded."},{"content":"A value of 0 indicates an infinitely long cache.","pos":[886,934]}]},{"pos":[113986,114256],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data caching is enabled for the data source control; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data caching is enabled for the data source control; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,191],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data caching is enabled for the data source control; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[192,270],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[114443,114710],"content":"The EnableCaching property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property returns a <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The EnableCaching property is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property returns a <xref href=\"System.Data.Common.DbDataReader\"></xref>."},{"pos":[115120,115246],"content":"Gets or sets a value that indicates whether the data source control supports paging through the set of data that it retrieves.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the data source control supports paging through the set of data that it retrieves.","pos":[0,126]}]},{"pos":[115259,117367],"content":"Paging by the <xref:System.Web.UI.WebControls.ObjectDataSource> control is handled by setting the EnablePaging, <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> properties of the <xref:System.Web.UI.WebControls.ObjectDataSource> and defining a select method in the business object with the proper parameters. When the EnablePaging property is set to `true`, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection includes two additional parameters for the first row that is requested and the number of rows that are requested. These two parameters are named as defined by the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> properties. The `Select` method should return the requested number of rows, starting at the specified index. Because the data might not divide evenly by the page size, the last page might contain fewer rows. Thus, the number of rows that are requested is actually the maximum number of rows that are returned.       When paging is enabled on the associated data-bound control, the data-bound control calls the `Select` method with the start index and number of rows that are required. Additionally, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set, the data-bound control calls the method before rendering the pager controls. For example, if a <xref:System.Web.UI.WebControls.GridView> control has paging enabled with a page size of 5, and the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property returns 20, only 4 pages are displayed in the pager.       The EnablePaging property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Paging by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is handled by setting the EnablePaging, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A&gt; properties of the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; and defining a select method in the business object with the proper parameters.","pos":[0,494],"source":"Paging by the <xref:System.Web.UI.WebControls.ObjectDataSource> control is handled by setting the EnablePaging, <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> properties of the <xref:System.Web.UI.WebControls.ObjectDataSource> and defining a select method in the business object with the proper parameters."},{"content":"When the EnablePaging property is set to <ph id=\"ph1\">`true`</ph>, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; collection includes two additional parameters for the first row that is requested and the number of rows that are requested.","pos":[495,742],"source":" When the EnablePaging property is set to `true`, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection includes two additional parameters for the first row that is requested and the number of rows that are requested."},{"content":"These two parameters are named as defined by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A&gt; properties.","pos":[743,965],"source":" These two parameters are named as defined by the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> properties."},{"content":"The <ph id=\"ph1\">`Select`</ph> method should return the requested number of rows, starting at the specified index.","pos":[966,1062],"source":" The `Select` method should return the requested number of rows, starting at the specified index."},{"content":"Because the data might not divide evenly by the page size, the last page might contain fewer rows.","pos":[1063,1161]},{"content":"Thus, the number of rows that are requested is actually the maximum number of rows that are returned.","pos":[1162,1263]},{"content":"When paging is enabled on the associated data-bound control, the data-bound control calls the <ph id=\"ph1\">`Select`</ph> method with the start index and number of rows that are required.","pos":[1270,1438],"source":"       When paging is enabled on the associated data-bound control, the data-bound control calls the `Select` method with the start index and number of rows that are required."},{"content":"Additionally, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A&gt; property is set, the data-bound control calls the method before rendering the pager controls.","pos":[1439,1624],"source":" Additionally, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set, the data-bound control calls the method before rendering the pager controls."},{"content":"For example, if a &lt;xref:System.Web.UI.WebControls.GridView&gt; control has paging enabled with a page size of 5, and the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A&gt; property returns 20, only 4 pages are displayed in the pager.","pos":[1625,1907],"source":" For example, if a <xref:System.Web.UI.WebControls.GridView> control has paging enabled with a page size of 5, and the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property returns 20, only 4 pages are displayed in the pager."},{"content":"The EnablePaging property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object.","pos":[1914,2104],"source":"       The EnablePaging property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object."}]},{"pos":[120276,120485],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the data source control supports paging through the data it retrieves; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the data source control supports paging through the data it retrieves; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[121001,121177],"content":"Gets or sets a filtering expression that is applied when the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property is called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a filtering expression that is applied when the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property is called.","pos":[0,176],"source":"Gets or sets a filtering expression that is applied when the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property is called."}]},{"pos":[121190,123357],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object.       The syntax that is used for the FilterExpression property is a format string–style expression. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataColumn.Expression%2A> property. If you add parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection, you can also include format string placeholders. For example, include `\"{0}\"` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.       You can include parameters in the FilterExpression property. If the type of the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required if the parameter is a numeric type.       The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders that are found in the FilterExpression property.       The FilterExpression property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.      > [!NOTE] >  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the FilterExpression property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports filtering data only when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method returns a &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt; object.","pos":[0,243],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object."},{"content":"The syntax that is used for the FilterExpression property is a format string–style expression.","pos":[250,344]},{"content":"The filter expression syntax is the same syntax that is accepted by the &lt;xref:System.Data.DataColumn.Expression%2A&gt; property.","pos":[345,470],"source":" The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataColumn.Expression%2A> property."},{"content":"If you add parameters to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A&gt; collection, you can also include format string placeholders.","pos":[471,630],"source":" If you add parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection, you can also include format string placeholders."},{"content":"For example, include <ph id=\"ph1\">`\"{0}\"`</ph> in the expression to substitute for parameter values.","pos":[631,713],"source":" For example, include `\"{0}\"` in the expression to substitute for parameter values."},{"content":"The placeholders are replaced according to the index of the parameter in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A&gt; collection.","pos":[714,872],"source":" The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection."},{"content":"You can include parameters in the FilterExpression property.","pos":[879,939]},{"content":"If the type of the parameter is a string or character type, enclose the parameter in single quotation marks.","pos":[940,1048]},{"content":"Quotation marks are not required if the parameter is a numeric type.","pos":[1049,1117]},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A&gt; collection contains the parameters that are evaluated for the placeholders that are found in the FilterExpression property.","pos":[1124,1321],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders that are found in the FilterExpression property."},{"content":"The FilterExpression property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1328,1612],"source":"       The FilterExpression property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You should validate any filter parameter value that you receive from the client.","pos":[1618,1711],"source":"      > [!NOTE] >  You should validate any filter parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the filter expression and applies it to the &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt; object that is returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[1712,1969],"source":" The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."},{"content":"If you are using the FilterExpression property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.","pos":[1970,2154]}]},{"pos":[127162,127372],"content":"A string that represents a filtering expression that is applied when data is retrieved by using the method or function identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents a filtering expression that is applied when data is retrieved by using the method or function identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property.","pos":[0,210],"source":"A string that represents a filtering expression that is applied when data is retrieved by using the method or function identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property."}]},{"pos":[127562,127778],"content":"The FilterExpression property was set and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select*&gt; method does not return a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The FilterExpression property was set and the <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> method does not return a <xref href=\"System.Data.DataSet\"></xref> or <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[128170,128203],"content":"Occurs before a filter operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before a filter operation.","pos":[0,33]}]},{"pos":[128216,129764],"content":"Handle the Filtering event to perform validation operations on filter parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs a filter operation. You can cancel the selected operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> to `true`. The event is raised only if the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property is set.       The Filtering event delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.      > [!IMPORTANT] >  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Filtering event to perform validation operations on filter parameter values before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control performs a filter operation.","pos":[0,184],"source":"Handle the Filtering event to perform validation operations on filter parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs a filter operation."},{"content":"You can cancel the selected operation by setting the &lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs&gt; to <ph id=\"ph1\">`true`</ph>.","pos":[185,387],"source":" You can cancel the selected operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> to `true`."},{"content":"The event is raised only if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; property is set.","pos":[388,506],"source":" The event is raised only if the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property is set."},{"content":"The Filtering event delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName&gt; event of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[513,792],"source":"       The Filtering event delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should validate any filter parameter value that you receive from the client.","pos":[798,896],"source":"      > [!IMPORTANT] >  You should validate any filter parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the filter expression and applies it to the &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt; object that is returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.","pos":[897,1154],"source":" The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method."},{"content":"If you are using the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.","pos":[1155,1392],"source":" If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[1399,1541],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[129984,129996],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[130443,130609],"content":"Gets a collection of parameters that are associated with any parameter placeholders in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of parameters that are associated with any parameter placeholders in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*&gt; string.","pos":[0,166],"source":"Gets a collection of parameters that are associated with any parameter placeholders in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> string."}]},{"pos":[130622,132032],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object.       The syntax that is used for the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> is a format string–style expression. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataColumn.Expression%2A> property. If you add parameters to the FilterParameters collection, you can also include format string placeholders. For example, include `\"{0}\"` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the FilterParameters collection.       You can include parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property. If the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required if the parameter is a numeric type.       The FilterParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports filtering data only when the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method returns a &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt; object.","pos":[0,243],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object."},{"content":"The syntax that is used for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; is a format string–style expression.","pos":[250,388],"source":"       The syntax that is used for the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> is a format string–style expression."},{"content":"The filter expression syntax is the same syntax that is accepted by the &lt;xref:System.Data.DataColumn.Expression%2A&gt; property.","pos":[389,514],"source":" The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataColumn.Expression%2A> property."},{"content":"If you add parameters to the FilterParameters collection, you can also include format string placeholders.","pos":[515,621]},{"content":"For example, include <ph id=\"ph1\">`\"{0}\"`</ph> in the expression to substitute for parameter values.","pos":[622,704],"source":" For example, include `\"{0}\"` in the expression to substitute for parameter values."},{"content":"The placeholders are replaced according to the index of the parameter in the FilterParameters collection.","pos":[705,810]},{"content":"You can include parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; property.","pos":[817,930],"source":"       You can include parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property."},{"content":"If the parameter is a string or character type, enclose the parameter in single quotation marks.","pos":[931,1027]},{"content":"Quotation marks are not required if the parameter is a numeric type.","pos":[1028,1096]},{"content":"The FilterParameters property retrieves the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A&gt; property that is contained by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1103,1402],"source":"       The FilterParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]},{"pos":[136749,136985],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains a set of parameters associated with any parameter placeholders found in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*&gt; property.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains a set of parameters associated with any parameter placeholders found in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> property."},{"pos":[137175,137442],"content":"You set the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression<bpt id=\"p1\">*</bpt>&gt; property and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select<ept id=\"p1\">*</ept>&gt; method does not return a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"You set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> method does not return a <xref href=\"System.Data.DataSet\"></xref> or <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[137879,137964],"content":"Retrieves the named data source view that is associated with the data source control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the named data source view that is associated with the data source control.","pos":[0,85]}]},{"pos":[137977,138505],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one data source view. As with all data source view objects, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the data source control defines its capabilities, performs all the work that is necessary to retrieve data from the underlying data storage, and performs operations such as sorting, inserting, deleting, and updating.       The GetView method is intended to be called by data-bound controls, not by page code.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one data source view. As with all data source view objects, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the data source control defines its capabilities, performs all the work that is necessary to retrieve data from the underlying data storage, and performs operations such as sorting, inserting, deleting, and updating.       The GetView method is intended to be called by data-bound controls, not by page code.","pos":[0,526],"nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports only one data source view.","pos":[0,97],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one data source view."},{"content":"As with all data source view objects, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the data source control defines its capabilities, performs all the work that is necessary to retrieve data from the underlying data storage, and performs operations such as sorting, inserting, deleting, and updating.","pos":[98,434],"source":" As with all data source view objects, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the data source control defines its capabilities, performs all the work that is necessary to retrieve data from the underlying data storage, and performs operations such as sorting, inserting, deleting, and updating."},{"content":"The GetView method is intended to be called by data-bound controls, not by page code.","pos":[441,526]}]}]},{"pos":[138685,138841],"content":"The name of the view to retrieve. Because the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> supports only one view, `viewName` is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the view to retrieve.","pos":[0,33]},{"content":"Because the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> supports only one view, <ph id=\"ph1\">`viewName`</ph> is ignored.","pos":[34,156],"source":" Because the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> supports only one view, `viewName` is ignored."}]},{"pos":[138914,139159],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSourceView\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> named <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_DefaultView\" name=\"DefaultView\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> that is associated with the <bpt id=\"p3\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.WebControls.ObjectDataSourceView\"></xref> named <xref uid=\"langword_csharp_DefaultView\" name=\"DefaultView\" href=\"\"></xref> that is associated with the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref>."},{"pos":[139332,139531],"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">viewName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or something other than <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_DefaultView\" name=\"DefaultView\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified <code>viewName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or something other than <xref uid=\"langword_csharp_DefaultView\" name=\"DefaultView\" href=\"\"></xref>."},{"pos":[139945,140115],"content":"Retrieves a collection of names representing the list of view objects that are associated with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Retrieves a collection of names representing the list of view objects that are associated with the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> object."},{"pos":[140128,140440],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one view, named `DefaultView`, on its underlying data. The GetViewNames method returns a single-element collection of this one view name.       The GetViewNames method is intended to be called by data-bound controls, not by page code.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports only one view, named <ph id=\"ph1\">`DefaultView`</ph>, on its underlying data.","pos":[0,130],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one view, named `DefaultView`, on its underlying data."},{"content":"The GetViewNames method returns a single-element collection of this one view name.","pos":[131,213]},{"content":"The GetViewNames method is intended to be called by data-bound controls, not by page code.","pos":[220,310]}]},{"pos":[140625,140787],"content":"An &lt;xref:System.Collections.ICollection&gt; that contains the names of the views associated with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.ICollection> that contains the names of the views associated with the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref>."},{"pos":[141257,141512],"content":"Performs an insert operation by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod<bpt id=\"p1\">*</bpt>&gt; property and any parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Performs an insert operation by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property and any parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters*> collection."},{"pos":[141525,143556],"content":"Before the Insert operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event to examine the values of the parameters and to perform any preprocessing before an Insert operation. To perform an insert operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> properties. After the Insert operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.       The Insert method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> object is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Insert method from page code. The Insert method is invoked directly by the data-bound control instead.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before the Insert operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event to examine the values of the parameters and to perform any preprocessing before an Insert operation. To perform an insert operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> properties. After the Insert operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.       The Insert method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> object is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Insert method from page code. The Insert method is invoked directly by the data-bound control instead.","pos":[0,2024],"nodes":[{"content":"Before the Insert operation is performed, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Inserting&gt; event.","pos":[0,211],"source":"Before the Insert operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Inserting&gt; event to examine the values of the parameters and to perform any preprocessing before an Insert operation.","pos":[212,397],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event to examine the values of the parameters and to perform any preprocessing before an Insert operation."},{"content":"To perform an insert operation, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object uses reflection to create an instance of the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property.","pos":[398,644],"source":" To perform an insert operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property."},{"content":"It then calls the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt; property, using any associated &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A&gt; properties.","pos":[645,874],"source":" It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> properties."},{"content":"After the Insert operation completes, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Inserted&gt; event.","pos":[875,1080],"source":" After the Insert operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Inserted&gt; event to examine any return values, output parameters, and exceptions, and to perform any post-processing.","pos":[1081,1265],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing."},{"content":"The Insert method delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A&gt; method of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1272,1525],"source":"       The Insert method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt;.","pos":[1532,1688],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>."},{"content":"Data-Bound Controls    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; object is associated with a data-bound control, such as the &lt;xref:System.Web.UI.WebControls.GridView&gt; control, it is not necessary to call the Insert method from page code.","pos":[1697,1951],"source":"      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> object is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Insert method from page code."},{"content":"The Insert method is invoked directly by the data-bound control instead.","pos":[1952,2024]}]}]},{"pos":[143678,143763],"content":"A value that represents the number of rows inserted into the underlying data storage.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that represents the number of rows inserted into the underlying data storage.","pos":[0,85]}]},{"pos":[144230,144327],"content":"Occurs when an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*> operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert*&gt; operation has completed.","pos":[0,97],"source":"Occurs when an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*> operation has completed."}]},{"pos":[144340,144921],"content":"Handle the Inserted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Inserted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt; operation has completed.","pos":[0,229],"source":"Handle the Inserted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation has completed."},{"content":"The return value, output parameters, and exception handling properties are available from the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&gt; object that is associated with the event.","pos":[230,430],"source":" The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[437,579],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[145134,145146],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[145555,145640],"content":"Occurs before an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*> operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert*&gt; operation.","pos":[0,85],"source":"Occurs before an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*> operation."}]},{"pos":[145653,146376],"content":"Handle the Inserting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the insert operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Inserting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control performs the insert operation.","pos":[0,273],"source":"Handle the Inserting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the insert operation."},{"content":"The parameters are available as an &lt;xref:System.Collections.IDictionary&gt; collection that is accessed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A&gt; property, which is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs&gt; object.","pos":[274,572],"source":" The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[579,721],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[150602,150614],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[151041,151193],"content":"Gets or sets the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control invokes to insert data.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to insert data."},{"pos":[151206,156496],"content":"The business object is assumed to insert data one record at a time, rather than in a batch.       The InsertMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> object.      ## Object Lifetime    The method that is identified by the InsertMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method specified by the InsertMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the InsertMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection from three sources:      -   From the data-bound control, at run time.      -   From the `InsertParameters` element, declaratively.      -   From the `Inserting` method, programmatically.       First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection. For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, the parameters for `Name` and `Number` are added to the collection. The data type of these parameters is `string`. Next, the parameters that are listed in the `InsertParameters` element are added. If a parameter in the `InsertParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `InsertParameters` element. Typically, this is used to modify the type of the data in the parameter. Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the InsertMethod property.      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `InsertParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> object then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the InsertMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `InsertARecord`. One `InsertARecord` has one parameter, `ID`, and the other `InsertARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection has only one parameter named `ID`, the `InsertARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the InsertMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The business object is assumed to insert data one record at a time, rather than in a batch.","pos":[0,91]},{"content":"The InsertMethod property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; object.","pos":[98,373],"source":"       The InsertMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> object."},{"content":"Object Lifetime    The method that is identified by the InsertMethod property can be an instance method or a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method.","pos":[382,534],"source":"      ## Object Lifetime    The method that is identified by the InsertMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method."},{"content":"If it is an instance method, the business object is created and destroyed each time the method specified by the InsertMethod property is called.","pos":[535,679]},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt; events to work with the business object before the InsertMethod property is called.","pos":[680,915],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the InsertMethod property is called."},{"content":"You can also handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; event that is raised after the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A&gt; property is called.","pos":[916,1154],"source":" You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property is called."},{"content":"If the business object implements the &lt;xref:System.IDisposable&gt; interface, the &lt;xref:System.IDisposable.Dispose%2A&gt; method is called before the object is destroyed.","pos":[1155,1319],"source":" If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed."},{"content":"If the method is <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), the business object is never created and you cannot handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; events.","pos":[1320,1645],"source":" If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events."},{"content":"Parameter Merging    Parameters are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A&gt; collection from three sources:      -   From the data-bound control, at run time.","pos":[1654,1854],"source":"      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection from three sources:      -   From the data-bound control, at run time."},{"content":"-   From the <ph id=\"ph1\">`InsertParameters`</ph> element, declaratively.","pos":[1860,1915],"source":"      -   From the `InsertParameters` element, declaratively."},{"content":"-   From the <ph id=\"ph1\">`Inserting`</ph> method, programmatically.","pos":[1921,1971],"source":"      -   From the `Inserting` method, programmatically."},{"content":"First, any parameters that are generated from data-bound controls are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A&gt; collection.","pos":[1978,2142],"source":"       First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection."},{"content":"For example, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is bound to a &lt;xref:System.Web.UI.WebControls.GridView&gt; control that has the columns <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`Number`</ph>, the parameters for <ph id=\"ph3\">`Name`</ph> and <ph id=\"ph4\">`Number`</ph> are added to the collection.","pos":[2143,2394],"source":" For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, the parameters for `Name` and `Number` are added to the collection."},{"content":"The data type of these parameters is <ph id=\"ph1\">`string`</ph>.","pos":[2395,2441],"source":" The data type of these parameters is `string`."},{"content":"Next, the parameters that are listed in the <ph id=\"ph1\">`InsertParameters`</ph> element are added.","pos":[2442,2523],"source":" Next, the parameters that are listed in the `InsertParameters` element are added."},{"content":"If a parameter in the <ph id=\"ph1\">`InsertParameters`</ph> element is found with the same name as a parameter that is already in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A&gt; collection, the existing parameter is modified to match the parameter that is specified in the <ph id=\"ph2\">`InsertParameters`</ph> element.","pos":[2524,2831],"source":" If a parameter in the `InsertParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `InsertParameters` element."},{"content":"Typically, this is used to modify the type of the data in the parameter.","pos":[2832,2904]},{"content":"Finally, you can programmatically add and remove parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Inserting&gt; event, which occurs before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt; method is run.","pos":[2905,3137],"source":" Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method is run."},{"content":"The method is resolved after the parameters are merged.","pos":[3138,3193]},{"content":"Method resolution is discussed in the next section.","pos":[3194,3245]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should validate any parameter value that you receive from the client.","pos":[3251,3342],"source":"      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the InsertMethod property.","pos":[3343,3425]},{"content":"Method Resolution    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt; method is called, the data fields from the data-bound control, the parameters that were created declaratively in the <ph id=\"ph1\">`InsertParameters`</ph> element, and the parameters that were added in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Inserting&gt; event handler are all merged.","pos":[3434,3800],"source":"      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `InsertParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event handler are all merged."},{"content":"(For more information, see the preceding section.) The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; object then attempts to find a method to call.","pos":[3801,3952],"source":" (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> object then attempts to find a method to call."},{"content":"First, it looks for one or more methods with the name that is specified in the InsertMethod property.","pos":[3953,4054]},{"content":"If no match is found, an &lt;xref:System.InvalidOperationException&gt; exception is thrown.","pos":[4055,4140],"source":" If no match is found, an <xref:System.InvalidOperationException> exception is thrown."},{"content":"If a match is found, it then looks for matching parameter names.","pos":[4141,4205]},{"content":"For example, suppose a type that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property has two methods named <ph id=\"ph1\">`InsertARecord`</ph>.","pos":[4206,4368],"source":" For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `InsertARecord`."},{"content":"One <ph id=\"ph1\">`InsertARecord`</ph> has one parameter, <ph id=\"ph2\">`ID`</ph>, and the other <ph id=\"ph3\">`InsertARecord`</ph> has two parameters, <ph id=\"ph4\">`Name`</ph> and <ph id=\"ph5\">`Number`</ph>.","pos":[4369,4484],"source":" One `InsertARecord` has one parameter, `ID`, and the other `InsertARecord` has two parameters, `Name` and `Number`."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A&gt; collection has only one parameter named <ph id=\"ph1\">`ID`</ph>, the <ph id=\"ph2\">`InsertARecord`</ph> method with just the <ph id=\"ph3\">`ID`</ph> parameter is called.","pos":[4485,4674],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection has only one parameter named `ID`, the `InsertARecord` method with just the `ID` parameter is called."},{"content":"The type of the parameter is not checked in resolving the methods.","pos":[4675,4741]},{"content":"The order of the parameters does not matter.","pos":[4742,4786]},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property is set, the method is resolved in a different way.","pos":[4793,4931],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; looks for a method with the name that is specified in the InsertMethod property that takes one parameter of the type that is specified in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property.","pos":[4932,5209],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the InsertMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property."},{"content":"In this case, the name of the parameter does not matter.","pos":[5210,5266]}]},{"pos":[160579,160769],"content":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to insert data. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses to insert data.","pos":[0,153],"source":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to insert data."},{"content":"The default is an empty string (\"\").","pos":[154,190]}]},{"pos":[161285,161439],"content":"Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters collection that contains the parameters that are used by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*&gt; property.","pos":[0,154],"source":"Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property."}]},{"pos":[161452,163151],"content":"The names and types of the parameters that are contained in the InsertParameters collection must match the names and types of the parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property signature. The parameter names are case sensitive. When working with data-bound controls that supply parameters, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with the parameters that are provided by the data-bound control. This is important because data-bound controls always supply their parameters as <xref:System.String> types, and if the method signature includes numeric or date types, you must explicitly include a parameter in the InsertParameters collection with the correct type. Otherwise, the <xref:System.Web.UI.WebControls.ObjectDataSource> control attempts to cast the parameters according to the type that is defined by the parameters in the collection. For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).       The InsertParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The names and types of the parameters that are contained in the InsertParameters collection must match the names and types of the parameters that are in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt; property signature.","pos":[0,242],"source":"The names and types of the parameters that are contained in the InsertParameters collection must match the names and types of the parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property signature."},{"content":"The parameter names are case sensitive.","pos":[243,282]},{"content":"When working with data-bound controls that supply parameters, such as the &lt;xref:System.Web.UI.WebControls.GridView&gt; and &lt;xref:System.Web.UI.WebControls.DetailsView&gt; controls, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically merges any parameters that are explicitly specified in the collection with the parameters that are provided by the data-bound control.","pos":[283,668],"source":" When working with data-bound controls that supply parameters, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with the parameters that are provided by the data-bound control."},{"content":"This is important because data-bound controls always supply their parameters as &lt;xref:System.String&gt; types, and if the method signature includes numeric or date types, you must explicitly include a parameter in the InsertParameters collection with the correct type.","pos":[669,934],"source":" This is important because data-bound controls always supply their parameters as <xref:System.String> types, and if the method signature includes numeric or date types, you must explicitly include a parameter in the InsertParameters collection with the correct type."},{"content":"Otherwise, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control attempts to cast the parameters according to the type that is defined by the parameters in the collection.","pos":[935,1114],"source":" Otherwise, the <xref:System.Web.UI.WebControls.ObjectDataSource> control attempts to cast the parameters according to the type that is defined by the parameters in the collection."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Parameters with the ObjectDataSource Control<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1115,1233],"source":" For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md)."},{"content":"The InsertParameters property retrieves the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A&gt; property that is contained by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1240,1532],"source":"       The InsertParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A&gt;.","pos":[1539,1695],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>."}]},{"pos":[167757,167965],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the parameters used by the method identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*&gt; property.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains the parameters used by the method identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property."},{"pos":[168522,168639],"content":"Loads the previously saved view state of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Loads the previously saved view state of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control."},{"pos":[168652,169140],"content":"This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).       The LoadViewState method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code.","pos":[0,122]},{"content":"However, control developers can override this method to specify how a custom server control restores its view state.","pos":[123,239]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ASP.NET State Management Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[240,341],"source":" For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"The LoadViewState method is used to load the previously saved view state of the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[348,486],"source":"       The LoadViewState method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]},{"pos":[169306,169374],"content":"An object that contains the saved view state values for the control.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the saved view state values for the control.","pos":[0,68]}]},{"pos":[169931,170098],"content":"Gets or sets the name of the business object data retrieval method parameter that is used to indicate the number of records to retrieve for data source paging support.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the business object data retrieval method parameter that is used to indicate the number of records to retrieve for data source paging support.","pos":[0,167]}]},{"pos":[170111,170679],"content":"The MaximumRowsParameterName property is used to support data source paging. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.       The MaximumRowsParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The MaximumRowsParameterName property is used to support data source paging. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.       The MaximumRowsParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","pos":[0,566],"nodes":[{"content":"The MaximumRowsParameterName property is used to support data source paging.","pos":[0,76]},{"content":"For information about how paging is supported by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A&gt;.","pos":[77,259],"source":" For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>."},{"content":"The MaximumRowsParameterName property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[266,566],"source":"       The MaximumRowsParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]}]},{"pos":[173601,173782],"content":"The name of the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> parameter that is used to indicate the number of records to retrieve. The default is `\"maximumRows\"`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; parameter that is used to indicate the number of records to retrieve.","pos":[0,149],"source":"The name of the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> parameter that is used to indicate the number of records to retrieve."},{"content":"The default is <ph id=\"ph1\">`\"maximumRows\"`</ph>.","pos":[150,181],"source":" The default is `\"maximumRows\"`."}]},{"pos":[174292,174422],"content":"Occurs after the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs after the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*&gt; property is created.","pos":[0,130],"source":"Occurs after the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is created."}]},{"pos":[174435,175331],"content":"Handle the ObjectCreated event to call other methods on the business object, set properties, or perform other initialization that is specific to the business object before the <xref:System.Web.UI.WebControls.ObjectDataSource> object calls the business object data method to perform a data operation. A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.       If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> and ObjectCreated events are never raised.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the ObjectCreated event to call other methods on the business object, set properties, or perform other initialization that is specific to the business object before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; object calls the business object data method to perform a data operation.","pos":[0,299],"source":"Handle the ObjectCreated event to call other methods on the business object, set properties, or perform other initialization that is specific to the business object before the <xref:System.Web.UI.WebControls.ObjectDataSource> object calls the business object data method to perform a data operation."},{"content":"A reference to the object is accessed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A&gt; property, which is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs&gt; object.","pos":[300,522],"source":" A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object."},{"content":"If the method that is identified to perform the data operation is <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt; and ObjectCreated events are never raised.","pos":[529,743],"source":"       If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> and ObjectCreated events are never raised."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[750,892],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[175549,175561],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[175995,176126],"content":"Occurs before the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*&gt; property is created.","pos":[0,131],"source":"Occurs before the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is created."}]},{"pos":[176139,176983],"content":"If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the ObjectCreating and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> events are never raised.       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically calls the default constructor of a business object to create an instance of it using reflection. Handle the ObjectCreating event to explicitly call another constructor, and set the instance of the object that results to the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property of the associated <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the method that is identified to perform the data operation is <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), the ObjectCreating and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt; events are never raised.","pos":[0,214],"source":"If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the ObjectCreating and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> events are never raised."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically calls the default constructor of a business object to create an instance of it using reflection.","pos":[221,393],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically calls the default constructor of a business object to create an instance of it using reflection."},{"content":"Handle the ObjectCreating event to explicitly call another constructor, and set the instance of the object that results to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A&gt; property of the associated &lt;xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs&gt; object.","pos":[394,691],"source":" Handle the ObjectCreating event to explicitly call another constructor, and set the instance of the object that results to the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property of the associated <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[698,840],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[179959,179971],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[180410,180543],"content":"Occurs before the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is discarded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*&gt; property is discarded.","pos":[0,133],"source":"Occurs before the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is discarded."}]},{"pos":[180556,181784],"content":"The ObjectDisposing event is always raised before the instance of the business object is discarded. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called after this event is raised.       Handle the ObjectDisposing event to call other methods on the object, set properties, or perform clean-up that is specific to the object before the object is destroyed. A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.       When you use a <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class, you must cancel the disposing of the data-context class in an handler for the ObjectDisposing event. This step is necessary because LINQ to SQL supports deferred execution, whereas the <xref:System.Web.UI.WebControls.ObjectDataSource> control tries to dispose the data context after the Select operation.       For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ObjectDisposing event is always raised before the instance of the business object is discarded.","pos":[0,99]},{"content":"If the business object implements the &lt;xref:System.IDisposable&gt; interface, the &lt;xref:System.IDisposable.Dispose%2A&gt; method is called after this event is raised.","pos":[100,260],"source":" If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called after this event is raised."},{"content":"Handle the ObjectDisposing event to call other methods on the object, set properties, or perform clean-up that is specific to the object before the object is destroyed.","pos":[267,435]},{"content":"A reference to the object is accessed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A&gt; property, which is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs&gt; object.","pos":[436,658],"source":" A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object."},{"content":"When you use a &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control with a LINQ to SQL class, you must cancel the disposing of the data-context class in an handler for the ObjectDisposing event.","pos":[665,864],"source":"       When you use a <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class, you must cancel the disposing of the data-context class in an handler for the ObjectDisposing event."},{"content":"This step is necessary because LINQ to SQL supports deferred execution, whereas the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control tries to dispose the data context after the Select operation.","pos":[865,1068],"source":" This step is necessary because LINQ to SQL supports deferred execution, whereas the <xref:System.Web.UI.WebControls.ObjectDataSource> control tries to dispose the data context after the Select operation."},{"content":"For more information about how to handle events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[1075,1222],"source":"       For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[185066,185078],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[185595,185848],"content":"Gets or sets a format string to apply to the names of the parameters for original values that are passed to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> methods.","needQuote":true,"needEscape":true,"source":"Gets or sets a format string to apply to the names of the parameters for original values that are passed to the <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref> or <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> methods."},{"pos":[185861,187611],"content":"The value of the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property is applied to primary keys only, such as those that are identified with the `DataKeyNames` property of a data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, and the set of original values are passed to the corresponding data method.       The following are two common scenarios where you might change the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property:      -   You might want to change the property to differentiate between old and new values in updates. When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters for both the original and new values are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Without the formatting string, two parameters with the same name would be created for each data field. By changing the name of the original value parameter, you can compare the data to the original data source to detect conflicts and compare key values.      -   Some visual designers implement a particular naming scheme for original values and keys.       The OldValuesParameterFormatString property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A&gt; property is applied to primary keys only, such as those that are identified with the <ph id=\"ph1\">`DataKeyNames`</ph> property of a data-bound control, or in delete and update scenarios where the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property is set to the &lt;xref:System.Web.UI.ConflictOptions&gt; value, and the set of original values are passed to the corresponding data method.","pos":[0,500],"source":"The value of the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property is applied to primary keys only, such as those that are identified with the `DataKeyNames` property of a data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, and the set of original values are passed to the corresponding data method."},{"content":"The following are two common scenarios where you might change the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A&gt; property:      -   You might want to change the property to differentiate between old and new values in updates.","pos":[507,773],"source":"       The following are two common scenarios where you might change the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property:      -   You might want to change the property to differentiate between old and new values in updates."},{"content":"When the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A&gt; property is set to the &lt;xref:System.Web.UI.ConflictOptions&gt; value, parameters for both the original and new values are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection.","pos":[774,1071],"source":" When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters for both the original and new values are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection."},{"content":"Without the formatting string, two parameters with the same name would be created for each data field.","pos":[1072,1174]},{"content":"By changing the name of the original value parameter, you can compare the data to the original data source to detect conflicts and compare key values.","pos":[1175,1325]},{"content":"-   Some visual designers implement a particular naming scheme for original values and keys.","pos":[1331,1423]},{"content":"The OldValuesParameterFormatString property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1430,1742],"source":"       The OldValuesParameterFormatString property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]},{"pos":[187752,188077],"content":"A string that represents a format string applied to the names of any <code>oldValues</code> or key parameters passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> or <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> methods. The default is `\"{0}\"`, which means the parameter name is the field name.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents a format string applied to the names of any <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValues</ph><ept id=\"p1\">&lt;/code&gt;</ept> or key parameters passed to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete<bpt id=\"p2\">*</bpt>&gt; or &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update<ept id=\"p2\">*</ept>&gt; methods.","pos":[0,251],"source":"A string that represents a format string applied to the names of any <code>oldValues</code> or key parameters passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> or <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> methods."},{"content":"The default is <ph id=\"ph1\">`\"{0}\"`</ph>, which means the parameter name is the field name.","pos":[252,325],"source":" The default is `\"{0}\"`, which means the parameter name is the field name."}]},{"pos":[188628,188804],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page.LoadComplete\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event handler to the page that contains the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Web.UI.Page.LoadComplete\"></xref> event handler to the page that contains the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control."},{"pos":[188817,189179],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       The OnInit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."},{"content":"The OnInit method also allows derived classes to handle the event without attaching a delegate.","pos":[190,285]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[286,360]}]},{"pos":[189326,189378],"content":"An <xref:System.EventArgs> that contains event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains event data.","pos":[0,52],"source":"An <xref:System.EventArgs> that contains event data."}]},{"pos":[189878,190131],"content":"Gets a or sets a value that indicates what culture information is used when converting string values to actual property types in order to construct an object of the type indicated by <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a or sets a value that indicates what culture information is used when converting string values to actual property types in order to construct an object of the type indicated by &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*&gt;.","pos":[0,253],"source":"Gets a or sets a value that indicates what culture information is used when converting string values to actual property types in order to construct an object of the type indicated by <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>."}]},{"pos":[190316,190424],"content":"The culture information. The default value is <xref href=\"System.Web.UI.WebControls.ParsingCulture\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The culture information.","pos":[0,24]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ParsingCulture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[25,108],"source":" The default value is <xref href=\"System.Web.UI.WebControls.ParsingCulture\"></xref>."}]},{"pos":[190931,191026],"content":"Saves the state of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control.","needQuote":true,"needEscape":true,"source":"Saves the state of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control."},{"pos":[191170,191354],"content":"Returns the server control's current view state; otherwise, returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, if there is no view state associated with the control.","needQuote":true,"needEscape":true,"source":"Returns the server control's current view state; otherwise, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if there is no view state associated with the control."},{"pos":[191825,192100],"content":"Retrieves data from the underlying data storage by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod<bpt id=\"p1\">*</bpt>&gt; property with the parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Retrieves data from the underlying data storage by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property with the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters*> collection."},{"pos":[192113,197451],"content":"The specified method might have any method signature, but it must return or be derived from one of the types listed in the following table for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully.      |Return type|Action|   |-----------------|------------|   |<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the Select method.|   |<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created by using the <xref:System.Data.DataTable> and returned by the Select method.|   |<xref:System.Data.DataView>|The <xref:System.Data.DataView> is returned by the Select method.|   |<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted and a <xref:System.Data.DataView> is created and returned by the Select method.|   |<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> collection and returned by the Select method.|       The method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property is called, except that the same instance is used to call the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property and the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property. The Select method returns an <xref:System.Collections.IEnumerable> interface. However, to enable caching and filtering scenarios, the return value must be a <xref:System.Data.DataSet> object. While the <xref:System.Data.DataSet> class does not implement the <xref:System.Collections.IEnumerable> interface, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically extracts the default <xref:System.Data.DataView> control, which implements the <xref:System.Collections.IEnumerable>.       Before the Select operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event to examine the values of the parameters and to perform any preprocessing before a Select operation. To perform a data retrieval operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> properties. After the Select operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.       If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, or <xref:System.Data.DataView> object and caching is enabled, the <xref:System.Web.UI.WebControls.ObjectDataSource> retrieves data from and saves data to the cache during the Select operation. The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties.       If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object, and a <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property has been specified, it is evaluated with any supplied <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> properties and the resulting filter is applied to the list of data during the Select operation.       The Select method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Select method from page code. The Select method is invoked directly by the data-bound control instead.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The specified method might have any method signature, but it must return or be derived from one of the types listed in the following table for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control to call it successfully.","pos":[0,229],"source":"The specified method might have any method signature, but it must return or be derived from one of the types listed in the following table for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully."},{"content":"|Return type|Action|   |-----------------|------------|   |&lt;xref:System.Collections.IEnumerable&gt;|The &lt;xref:System.Collections.IEnumerable&gt; is returned by the Select method.|   |&lt;xref:System.Data.DataTable&gt;|A &lt;xref:System.Data.DataView&gt; is created by using the &lt;xref:System.Data.DataTable&gt; and returned by the Select method.|   |&lt;xref:System.Data.DataView&gt;|The &lt;xref:System.Data.DataView&gt; is returned by the Select method.|   |&lt;xref:System.Data.DataSet&gt;|The first &lt;xref:System.Data.DataTable&gt; of the &lt;xref:System.Data.DataSet&gt; is extracted and a &lt;xref:System.Data.DataView&gt; is created and returned by the Select method.|   |&lt;xref:System.Object&gt;|The object is wrapped in a one-element &lt;xref:System.Collections.IEnumerable&gt; collection and returned by the Select method.|       The method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property can be an instance method or a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method.","pos":[235,1195],"source":"      |Return type|Action|   |-----------------|------------|   |<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the Select method.|   |<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created by using the <xref:System.Data.DataTable> and returned by the Select method.|   |<xref:System.Data.DataView>|The <xref:System.Data.DataView> is returned by the Select method.|   |<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted and a <xref:System.Data.DataView> is created and returned by the Select method.|   |<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> collection and returned by the Select method.|       The method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property can be an instance method or a `static` (`Shared` in Visual Basic) method."},{"content":"If it is an instance method, the business object is created and destroyed each time the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property is called, except that the same instance is used to call the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property and the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A&gt; property.","pos":[1196,1679],"source":" If it is an instance method, the business object is created and destroyed each time the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property is called, except that the same instance is used to call the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property and the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property."},{"content":"The Select method returns an &lt;xref:System.Collections.IEnumerable&gt; interface.","pos":[1680,1757],"source":" The Select method returns an <xref:System.Collections.IEnumerable> interface."},{"content":"However, to enable caching and filtering scenarios, the return value must be a &lt;xref:System.Data.DataSet&gt; object.","pos":[1758,1871],"source":" However, to enable caching and filtering scenarios, the return value must be a <xref:System.Data.DataSet> object."},{"content":"While the &lt;xref:System.Data.DataSet&gt; class does not implement the &lt;xref:System.Collections.IEnumerable&gt; interface, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control automatically extracts the default &lt;xref:System.Data.DataView&gt; control, which implements the &lt;xref:System.Collections.IEnumerable&gt;.","pos":[1872,2180],"source":" While the <xref:System.Data.DataSet> class does not implement the <xref:System.Collections.IEnumerable> interface, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically extracts the default <xref:System.Data.DataView> control, which implements the <xref:System.Collections.IEnumerable>."},{"content":"Before the Select operation is performed, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event.","pos":[2187,2398],"source":"       Before the Select operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event to examine the values of the parameters and to perform any preprocessing before a Select operation.","pos":[2399,2583],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event to examine the values of the parameters and to perform any preprocessing before a Select operation."},{"content":"To perform a data retrieval operation, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object uses reflection to create an instance of the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property.","pos":[2584,2837],"source":" To perform a data retrieval operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property."},{"content":"It then calls the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property, using any associated &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; properties.","pos":[2838,3067],"source":" It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> properties."},{"content":"After the Select operation completes, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selected&gt; event.","pos":[3068,3273],"source":" After the Select operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selected&gt; event to examine any return values, output parameters, and exceptions, and to perform any post-processing.","pos":[3274,3458],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event to examine any return values, output parameters, and exceptions, and to perform any post-processing."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property returns a &lt;xref:System.Data.DataSet&gt;, &lt;xref:System.Data.DataTable&gt;, or &lt;xref:System.Data.DataView&gt; object and caching is enabled, the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; retrieves data from and saves data to the cache during the Select operation.","pos":[3465,3807],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, or <xref:System.Data.DataView> object and caching is enabled, the <xref:System.Web.UI.WebControls.ObjectDataSource> retrieves data from and saves data to the cache during the Select operation."},{"content":"The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A&gt; properties.","pos":[3808,4085],"source":" The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property returns a &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt; object, and a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A&gt; property has been specified, it is evaluated with any supplied &lt;xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A&gt; properties and the resulting filter is applied to the list of data during the Select operation.","pos":[4092,4555],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object, and a <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property has been specified, it is evaluated with any supplied <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> properties and the resulting filter is applied to the list of data during the Select operation."},{"content":"The Select method delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A&gt; method of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[4562,4815],"source":"       The Select method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt;.","pos":[4822,4978],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>."},{"content":"Data-Bound Controls    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is associated with a data-bound control, such as the &lt;xref:System.Web.UI.WebControls.GridView&gt; control, it is not necessary to call the Select method from page code.","pos":[4987,5242],"source":"      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Select method from page code."},{"content":"The Select method is invoked directly by the data-bound control instead.","pos":[5243,5315]}]},{"pos":[197708,197767],"content":"An <xref:System.Collections.IEnumerable> list of data rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerable&gt; list of data rows.","pos":[0,59],"source":"An <xref:System.Collections.IEnumerable> list of data rows."}]},{"pos":[198282,198443],"content":"Gets or sets the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control invokes to retrieve a row count.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to retrieve a row count."},{"pos":[198456,199224],"content":"The SelectCountMethod property identifies a business object method that is used to retrieve a total row count, to support data source paging. The SelectCountMethod property is evaluated only if the <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`.       The SelectCountMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SelectCountMethod property identifies a business object method that is used to retrieve a total row count, to support data source paging.","pos":[0,141]},{"content":"The SelectCountMethod property is evaluated only if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A&gt; property is set to <ph id=\"ph1\">`true`</ph>.","pos":[142,290],"source":" The SelectCountMethod property is evaluated only if the <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`."},{"content":"The SelectCountMethod property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[297,583],"source":"       The SelectCountMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For information about how paging is supported by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A&gt;.","pos":[584,766],"source":" For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>."}]},{"pos":[202086,202342],"content":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to retrieve a row count. The method must return an integer (<xref:System.Int32>). The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses to retrieve a row count.","pos":[0,162],"source":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to retrieve a row count."},{"content":"The method must return an integer (&lt;xref:System.Int32&gt;).","pos":[163,219],"source":" The method must return an integer (<xref:System.Int32>)."},{"content":"The default is an empty string (\"\").","pos":[220,256]}]},{"pos":[202820,202916],"content":"Occurs when a <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select*&gt; operation has completed.","pos":[0,96],"source":"Occurs when a <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> operation has completed."}]},{"pos":[202929,203509],"content":"Handle the Selected event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Selected event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; operation has completed.","pos":[0,228],"source":"Handle the Selected event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> operation has completed."},{"content":"The return value, output parameters, and exception handling properties are available from the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&gt; object that is associated with the event.","pos":[229,429],"source":" The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[436,578],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[206485,206497],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[206906,206990],"content":"Occurs before a <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before a &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select*&gt; operation.","pos":[0,84],"source":"Occurs before a <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> operation."}]},{"pos":[207003,208229],"content":"Handle the Selecting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the data retrieval operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.       This event can be fired twice for a single call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set. The <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> object is used to determine if select was called to retrieve data or retrieve the count.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Selecting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control performs the data retrieval operation.","pos":[0,281],"source":"Handle the Selecting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the data retrieval operation."},{"content":"The parameters are available as an &lt;xref:System.Collections.IDictionary&gt; collection that is accessed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A&gt; property, which is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs&gt; object.","pos":[282,580],"source":" The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object."},{"content":"This event can be fired twice for a single call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A&gt; property is set.","pos":[587,804],"source":"       This event can be fired twice for a single call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs&gt; object is used to determine if select was called to retrieve data or retrieve the count.","pos":[805,1073],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> object is used to determine if select was called to retrieve data or retrieve the count."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[1080,1222],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[208449,208461],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[208888,209042],"content":"Gets or sets the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control invokes to retrieve data.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to retrieve data."},{"pos":[209055,215036],"content":"The specified method can have any method signature, but it must return one of the types shown in the following table for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully.      |Return type|Action|   |-----------------|------------|   |<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created using the <xref:System.Data.DataTable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Data.DataView>|A <xref:System.Data.DataView> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted, and a <xref:System.Data.DataView> is created and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> collection and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|       The SelectMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       When you use the <xref:System.Web.UI.WebControls.ObjectDataSource> class to delete or update data, make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection or <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection match the column names that are returned by the select method.      ## Object Lifetime    The method that is identified by the SelectMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method that is specified by the SelectMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the method that is specified by the SelectMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the SelectMethod property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection from these sources:      -   Declaratively from the `SelectParameters` element.      -   Programmatically from the `Selecting` method.       First, the parameters listed in the `SelectParameters` element are added. Second, parameters are programmatically added and removed in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the SelectMethod property.      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `SelectParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> control then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the SelectMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `SelectARecord`. One `SelectARecord` has one parameter, `ID`, and the other `SelectARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection has only one parameter named `ID`, the `SelectARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the SelectMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The specified method can have any method signature, but it must return one of the types shown in the following table for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control to call it successfully.","pos":[0,207],"source":"The specified method can have any method signature, but it must return one of the types shown in the following table for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully."},{"content":"|Return type|Action|   |-----------------|------------|   |&lt;xref:System.Collections.IEnumerable&gt;|The &lt;xref:System.Collections.IEnumerable&gt; is returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.|   |&lt;xref:System.Data.DataTable&gt;|A &lt;xref:System.Data.DataView&gt; is created using the &lt;xref:System.Data.DataTable&gt; and returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.|   |&lt;xref:System.Data.DataView&gt;|A &lt;xref:System.Data.DataView&gt; is returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.|   |&lt;xref:System.Data.DataSet&gt;|The first &lt;xref:System.Data.DataTable&gt; of the &lt;xref:System.Data.DataSet&gt; is extracted, and a &lt;xref:System.Data.DataView&gt; is created and returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.|   |&lt;xref:System.Object&gt;|The object is wrapped in a one-element &lt;xref:System.Collections.IEnumerable&gt; collection and returned by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method.|       The SelectMethod property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[213,1524],"source":"      |Return type|Action|   |-----------------|------------|   |<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created using the <xref:System.Data.DataTable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Data.DataView>|A <xref:System.Data.DataView> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted, and a <xref:System.Data.DataView> is created and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|   |<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> collection and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|       The SelectMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"When you use the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; class to delete or update data, make sure that the parameter names configured for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A&gt; collection or &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection match the column names that are returned by the select method.","pos":[1531,1976],"source":"       When you use the <xref:System.Web.UI.WebControls.ObjectDataSource> class to delete or update data, make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection or <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection match the column names that are returned by the select method."},{"content":"Object Lifetime    The method that is identified by the SelectMethod property can be an instance method or a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method.","pos":[1985,2137],"source":"      ## Object Lifetime    The method that is identified by the SelectMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method."},{"content":"If it is an instance method, the business object is created and destroyed each time the method that is specified by the SelectMethod property is called.","pos":[2138,2290]},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt; events to work with the business object before the method that is specified by the SelectMethod property is called.","pos":[2291,2558],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the method that is specified by the SelectMethod property is called."},{"content":"You can also handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; event that is raised after the method that is specified by the SelectMethod property is called.","pos":[2559,2744],"source":" You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the SelectMethod property is called."},{"content":"If the business object implements the &lt;xref:System.IDisposable&gt; interface, the &lt;xref:System.IDisposable.Dispose%2A&gt; method is called before the object is destroyed.","pos":[2745,2909],"source":" If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed."},{"content":"If the method is <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), the business object is never created and you cannot handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; events.","pos":[2910,3235],"source":" If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events."},{"content":"Parameter Merging    Parameters are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; collection from these sources:      -   Declaratively from the <ph id=\"ph1\">`SelectParameters`</ph> element.","pos":[3244,3453],"source":"      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection from these sources:      -   Declaratively from the `SelectParameters` element."},{"content":"-   Programmatically from the <ph id=\"ph1\">`Selecting`</ph> method.","pos":[3459,3508],"source":"      -   Programmatically from the `Selecting` method."},{"content":"First, the parameters listed in the <ph id=\"ph1\">`SelectParameters`</ph> element are added.","pos":[3515,3588],"source":"       First, the parameters listed in the `SelectParameters` element are added."},{"content":"Second, parameters are programmatically added and removed in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event, which occurs before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is run.","pos":[3589,3819],"source":" Second, parameters are programmatically added and removed in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run."},{"content":"The method is resolved after the parameters are merged.","pos":[3820,3875]},{"content":"Method resolution is discussed in the next section.","pos":[3876,3927]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should validate any parameter value that you receive from the client.","pos":[3933,4024],"source":"      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the SelectMethod property.","pos":[4025,4107]},{"content":"Method Resolution    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is called, the data fields from the data-bound control, the parameters that were created declaratively in the <ph id=\"ph1\">`SelectParameters`</ph> element, and the parameters that were added in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event handler are all merged.","pos":[4116,4482],"source":"      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `SelectParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler are all merged."},{"content":"(For more information, see the preceding section.) The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control then attempts to find a method to call.","pos":[4483,4635],"source":" (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> control then attempts to find a method to call."},{"content":"First, it looks for one or more methods with the name that is specified in the SelectMethod property.","pos":[4636,4737]},{"content":"If no match is found, an &lt;xref:System.InvalidOperationException&gt; exception is thrown.","pos":[4738,4823],"source":" If no match is found, an <xref:System.InvalidOperationException> exception is thrown."},{"content":"If a match is found, it then looks for matching parameter names.","pos":[4824,4888]},{"content":"For example, suppose a type that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property has two methods named <ph id=\"ph1\">`SelectARecord`</ph>.","pos":[4889,5051],"source":" For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `SelectARecord`."},{"content":"One <ph id=\"ph1\">`SelectARecord`</ph> has one parameter, <ph id=\"ph2\">`ID`</ph>, and the other <ph id=\"ph3\">`SelectARecord`</ph> has two parameters, <ph id=\"ph4\">`Name`</ph> and <ph id=\"ph5\">`Number`</ph>.","pos":[5052,5167],"source":" One `SelectARecord` has one parameter, `ID`, and the other `SelectARecord` has two parameters, `Name` and `Number`."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A&gt; collection has only one parameter named <ph id=\"ph1\">`ID`</ph>, the <ph id=\"ph2\">`SelectARecord`</ph> method with just the <ph id=\"ph3\">`ID`</ph> parameter is called.","pos":[5168,5357],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection has only one parameter named `ID`, the `SelectARecord` method with just the `ID` parameter is called."},{"content":"The type of the parameter is not checked in resolving the methods.","pos":[5358,5424]},{"content":"The order of the parameters does not matter.","pos":[5425,5469]},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property is set, the method is resolved in a different way.","pos":[5476,5614],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; looks for a method with the name that is specified in the SelectMethod property that takes one parameter of the type that is specified in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property.","pos":[5615,5892],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the SelectMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property."},{"content":"In this case, the name of the parameter does not matter.","pos":[5893,5949]}]},{"pos":[216204,216396],"content":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to retrieve data. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses to retrieve data.","pos":[0,155],"source":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to retrieve data."},{"content":"The default is an empty string (\"\").","pos":[156,192]}]},{"pos":[216912,217062],"content":"Gets a collection of parameters that are used by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of parameters that are used by the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property.","pos":[0,150],"source":"Gets a collection of parameters that are used by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property."}]},{"pos":[217075,219402],"content":"The SelectParameters property gets the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       You add parameters to the SelectParameters collection declaratively by using the `SelectParameters` element or programmatically in the handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event. At run time, parameters listed in the `SelectParameters` element are added to the collection first. Parameters in the collection are then added or removed by the handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event is raised before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run.       Before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run, the names and types of the parameters that are contained in the SelectParameters collection must match the signature of the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. For example, if a select method named `GetEmployeesByStateAndAge` takes a `string` and an integer as parameters, the SelectParameters collection must contain two parameters. The first parameter must resolve to a string and the second parameter must resolve to an integer. Both parameters can be specified in markup in the `SelectParameters` element. Alternatively, they can be can be added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler, or one parameter can be added in markup and the other one can be added programmatically.       For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md) and the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> property.      > [!IMPORTANT] >  In the code for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler or in the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, make sure that you validate any parameter value that is received from the client.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SelectParameters property gets the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[0,276],"source":"The SelectParameters property gets the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"You add parameters to the SelectParameters collection declaratively by using the <ph id=\"ph1\">`SelectParameters`</ph> element or programmatically in the handler for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event.","pos":[283,500],"source":"       You add parameters to the SelectParameters collection declaratively by using the `SelectParameters` element or programmatically in the handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event."},{"content":"At run time, parameters listed in the <ph id=\"ph1\">`SelectParameters`</ph> element are added to the collection first.","pos":[501,600],"source":" At run time, parameters listed in the `SelectParameters` element are added to the collection first."},{"content":"Parameters in the collection are then added or removed by the handler for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event.","pos":[601,745],"source":" Parameters in the collection are then added or removed by the handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event is raised before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is run.","pos":[746,911],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event is raised before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run."},{"content":"Before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is run, the names and types of the parameters that are contained in the SelectParameters collection must match the signature of the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property.","pos":[918,1235],"source":"       Before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run, the names and types of the parameters that are contained in the SelectParameters collection must match the signature of the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property."},{"content":"For example, if a select method named <ph id=\"ph1\">`GetEmployeesByStateAndAge`</ph> takes a <ph id=\"ph2\">`string`</ph> and an integer as parameters, the SelectParameters collection must contain two parameters.","pos":[1236,1409],"source":" For example, if a select method named `GetEmployeesByStateAndAge` takes a `string` and an integer as parameters, the SelectParameters collection must contain two parameters."},{"content":"The first parameter must resolve to a string and the second parameter must resolve to an integer.","pos":[1410,1507]},{"content":"Both parameters can be specified in markup in the <ph id=\"ph1\">`SelectParameters`</ph> element.","pos":[1508,1585],"source":" Both parameters can be specified in markup in the `SelectParameters` element."},{"content":"Alternatively, they can be can be added in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event handler, or one parameter can be added in markup and the other one can be added programmatically.","pos":[1586,1796],"source":" Alternatively, they can be can be added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler, or one parameter can be added in markup and the other one can be added programmatically."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Parameters with the ObjectDataSource Control<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod&gt; property.","pos":[1803,2001],"source":"       For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md) and the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> property."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  In the code for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Selecting&gt; event handler or in the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property, make sure that you validate any parameter value that is received from the client.","pos":[2007,2318],"source":"      > [!IMPORTANT] >  In the code for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler or in the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, make sure that you validate any parameter value that is received from the client."}]},{"pos":[221865,222010],"content":"A collection of parameters that are used by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of parameters that are used by the method specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; property.","pos":[0,145],"source":"A collection of parameters that are used by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property."}]},{"pos":[222535,222729],"content":"Gets or sets the name of the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> parameter used to specify a sort expression for data source sorting support.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the business object that the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*&gt; parameter used to specify a sort expression for data source sorting support.","pos":[0,194],"source":"Gets or sets the name of the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> parameter used to specify a sort expression for data source sorting support."}]},{"pos":[222742,223849],"content":"The SortParameterName property is used to support data source sorting. When a <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> property is set on the <xref:System.Web.UI.DataSourceSelectArguments> object and passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, the SortParameterName value identifies the parameter name of the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> business object method according to which the data is sorted.       If the <xref:System.Web.UI.WebControls.ObjectDataSource> is associated with a data-bound control, the values that are passed to this parameter take the form of comma-separated field values followed by `\"ASC\"` or `\"DESC\"`. For example, the value for an ascending sort on `Name` would be `\"Name ASC\"`.       The SortParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SortParameterName property is used to support data source sorting.","pos":[0,70]},{"content":"When a &lt;xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A&gt; property is set on the &lt;xref:System.Web.UI.DataSourceSelectArguments&gt; object and passed to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method, the SortParameterName value identifies the parameter name of the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; business object method according to which the data is sorted.","pos":[71,498],"source":" When a <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> property is set on the <xref:System.Web.UI.DataSourceSelectArguments> object and passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, the SortParameterName value identifies the parameter name of the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> business object method according to which the data is sorted."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; is associated with a data-bound control, the values that are passed to this parameter take the form of comma-separated field values followed by <ph id=\"ph1\">`\"ASC\"`</ph> or <ph id=\"ph2\">`\"DESC\"`</ph>.","pos":[505,726],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource> is associated with a data-bound control, the values that are passed to this parameter take the form of comma-separated field values followed by `\"ASC\"` or `\"DESC\"`."},{"content":"For example, the value for an ascending sort on <ph id=\"ph1\">`Name`</ph> would be <ph id=\"ph2\">`\"Name ASC\"`</ph>.","pos":[727,804],"source":" For example, the value for an ascending sort on `Name` would be `\"Name ASC\"`."},{"content":"The SortParameterName property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[811,1097],"source":"       The SortParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]},{"pos":[225610,225737],"content":"The name of the method parameter used to indicate the parameter which is used to sort the data. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the method parameter used to indicate the parameter which is used to sort the data. The default is an empty string.","pos":[0,127],"nodes":[{"content":"The name of the method parameter used to indicate the parameter which is used to sort the data.","pos":[0,95]},{"content":"The default is an empty string.","pos":[96,127]}]}]},{"pos":[226268,226405],"content":"Gets or sets a semicolon-delimited string that indicates which databases and tables to use for the Microsoft SQL Server cache dependency.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a semicolon-delimited string that indicates which databases and tables to use for the Microsoft SQL Server cache dependency.","pos":[0,137]}]},{"pos":[226418,228050],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports an optional expiration policy that is based on the <xref:System.Web.Caching.SqlCacheDependency> object for the data cache (the service must be configured for the database server).       SQL Server supports two mechanisms for cache invalidation: polling and notification. Each mechanism has a different syntax for the <xref:System.Web.Caching.SqlCacheDependency> object.       The <xref:System.Web.UI.WebControls.ObjectDataSource> supports only polling. The <xref:System.Web.Caching.SqlCacheDependency> string is used to create a <xref:System.Data.SqlClient.SqlDependency> object that is passed to the <xref:System.Data.Common.DbCommand> constructor before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is executed. The SqlCacheDependency string identifies databases and tables according to the same format that is used by the `@ Page` directive, where the first part of the string is a connection string to a SQL Server database, followed by a colon delimiter, and finally the name of the database table (for example, `\"connectionstring1:table1\"`). If the SqlCacheDependency property depends on more than one table, the connection string and table name pairs are separated by semicolons (for example, `\"connectionstring1:table1\";connectionstring2:table2\"`).       To support notification, you must write the cache logic in the implementation of your <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property and handle the construction of the <xref:System.Web.Caching.SqlCacheDependency> object in your code.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control supports an optional expiration policy that is based on the &lt;xref:System.Web.Caching.SqlCacheDependency&gt; object for the data cache (the service must be configured for the database server).","pos":[0,250],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports an optional expiration policy that is based on the <xref:System.Web.Caching.SqlCacheDependency> object for the data cache (the service must be configured for the database server)."},{"content":"SQL Server supports two mechanisms for cache invalidation: polling and notification.","pos":[257,341]},{"content":"Each mechanism has a different syntax for the &lt;xref:System.Web.Caching.SqlCacheDependency&gt; object.","pos":[342,440],"source":" Each mechanism has a different syntax for the <xref:System.Web.Caching.SqlCacheDependency> object."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; supports only polling.","pos":[447,523],"source":"       The <xref:System.Web.UI.WebControls.ObjectDataSource> supports only polling."},{"content":"The &lt;xref:System.Web.Caching.SqlCacheDependency&gt; string is used to create a &lt;xref:System.Data.SqlClient.SqlDependency&gt; object that is passed to the &lt;xref:System.Data.Common.DbCommand&gt; constructor before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt; method is executed.","pos":[524,810],"source":" The <xref:System.Web.Caching.SqlCacheDependency> string is used to create a <xref:System.Data.SqlClient.SqlDependency> object that is passed to the <xref:System.Data.Common.DbCommand> constructor before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is executed."},{"content":"The SqlCacheDependency string identifies databases and tables according to the same format that is used by the <ph id=\"ph1\">`@ Page`</ph> directive, where the first part of the string is a connection string to a SQL Server database, followed by a colon delimiter, and finally the name of the database table (for example, <ph id=\"ph2\">`\"connectionstring1:table1\"`</ph>).","pos":[811,1144],"source":" The SqlCacheDependency string identifies databases and tables according to the same format that is used by the `@ Page` directive, where the first part of the string is a connection string to a SQL Server database, followed by a colon delimiter, and finally the name of the database table (for example, `\"connectionstring1:table1\"`)."},{"content":"If the SqlCacheDependency property depends on more than one table, the connection string and table name pairs are separated by semicolons (for example, <ph id=\"ph1\">`\"connectionstring1:table1\";connectionstring2:table2\"`</ph>).","pos":[1145,1353],"source":" If the SqlCacheDependency property depends on more than one table, the connection string and table name pairs are separated by semicolons (for example, `\"connectionstring1:table1\";connectionstring2:table2\"`)."},{"content":"To support notification, you must write the cache logic in the implementation of your &lt;xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A&gt; property and handle the construction of the &lt;xref:System.Web.Caching.SqlCacheDependency&gt; object in your code.","pos":[1360,1621],"source":"       To support notification, you must write the cache logic in the implementation of your <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property and handle the construction of the <xref:System.Web.Caching.SqlCacheDependency> object in your code."}]},{"pos":[230373,230467],"content":"A string that indicates which databases and tables to use for the SQL Server cache dependency.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that indicates which databases and tables to use for the SQL Server cache dependency.","pos":[0,94]}]},{"pos":[231039,231216],"content":"Gets or sets the name of the data retrieval method parameter that is used to indicate the value of the identifier of the first record to retrieve for data source paging support.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the data retrieval method parameter that is used to indicate the value of the identifier of the first record to retrieve for data source paging support.","pos":[0,177]}]},{"pos":[231229,231803],"content":"The StartRowIndexParameterName property is used to support data source paging. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.       The StartRowIndexParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The StartRowIndexParameterName property is used to support data source paging. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.       The StartRowIndexParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.","pos":[0,572],"nodes":[{"content":"The StartRowIndexParameterName property is used to support data source paging.","pos":[0,78]},{"content":"For information about how paging is supported by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A&gt;.","pos":[79,261],"source":" For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>."},{"content":"The StartRowIndexParameterName property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[268,572],"source":"       The StartRowIndexParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."}]}]},{"pos":[234733,234906],"content":"The name of the business object method parameter used to indicate the first record to retrieve. The parameter must return an integer value. The default is `\"startRowIndex\"`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the business object method parameter used to indicate the first record to retrieve.","pos":[0,95]},{"content":"The parameter must return an integer value.","pos":[96,139]},{"content":"The default is <ph id=\"ph1\">`\"startRowIndex\"`</ph>.","pos":[140,173],"source":" The default is `\"startRowIndex\"`."}]},{"pos":[235430,235620],"content":"Tracks view-state changes to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control so that they can be stored in the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.StateBag\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Tracks view-state changes to the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control so that they can be stored in the <xref href=\"System.Web.UI.StateBag\"></xref> object."},{"pos":[235632,235792],"content":"The TrackViewState method is overridden to mark the starting point to begin tracking and saving changes to the control as part of the view state for the object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TrackViewState method is overridden to mark the starting point to begin tracking and saving changes to the control as part of the view state for the object.","pos":[0,160]}]},{"pos":[236355,236481],"content":"Gets or sets the name of the class that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object represents.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the class that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> object represents."},{"pos":[236494,237853],"content":"To create an instance of the object that the <xref:System.Web.UI.WebControls.ObjectDataSource> control binds to, the control uses reflection to load the type that is identified by the type name at run time. Therefore, the value of the TypeName property can be a partially qualified type for code that is located in the Bin or App_Code directories or a fully qualified type name for code that is registered in the global assembly cache. If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config file.       The type must have a default constructor, unless you handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to create an instance of it yourself. An instance of the type is created for each call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, if the methods on the type are member methods. An instance is not created if the methods are `static` (`Shared` in Visual Basic). If the type implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To create an instance of the object that the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control binds to, the control uses reflection to load the type that is identified by the type name at run time.","pos":[0,206],"source":"To create an instance of the object that the <xref:System.Web.UI.WebControls.ObjectDataSource> control binds to, the control uses reflection to load the type that is identified by the type name at run time."},{"content":"Therefore, the value of the TypeName property can be a partially qualified type for code that is located in the Bin or App_Code directories or a fully qualified type name for code that is registered in the global assembly cache.","pos":[207,435]},{"content":"If you use the global assembly cache, you must add the appropriate reference to the <ph id=\"ph1\">`assemblies`</ph> section of the Machine.config or Web.config file.","pos":[436,582],"source":" If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config file."},{"content":"The type must have a default constructor, unless you handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt; event to create an instance of it yourself.","pos":[589,761],"source":"       The type must have a default constructor, unless you handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to create an instance of it yourself."},{"content":"An instance of the type is created for each call to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A&gt; methods, if the methods on the type are member methods.","pos":[762,1120],"source":" An instance of the type is created for each call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, if the methods on the type are member methods."},{"content":"An instance is not created if the methods are <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic).","pos":[1121,1203],"source":" An instance is not created if the methods are `static` (`Shared` in Visual Basic)."},{"content":"If the type implements the &lt;xref:System.IDisposable&gt; interface, the &lt;xref:System.IDisposable.Dispose%2A&gt; method is called before the object is destroyed.","pos":[1204,1357],"source":" If the type implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed."}]},{"pos":[239384,239586],"content":"A partially or fully qualified class name that identifies the type of the object that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> represents. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A partially or fully qualified class name that identifies the type of the object that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> represents.","pos":[0,165],"source":"A partially or fully qualified class name that identifies the type of the object that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> represents."},{"content":"The default is an empty string (\"\").","pos":[166,202]}]},{"pos":[240052,240316],"content":"Performs an update operation by calling the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod<bpt id=\"p1\">*</bpt>&gt; property and any parameters that are in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Performs an update operation by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property and any parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*> collection."},{"pos":[240329,242691],"content":"The business object is assumed to update data one record at a time, rather than in a batch.       Before the Update operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event to examine the values of the parameters and to perform any preprocessing before an Update operation. To perform an update operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> properties. After the Update operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.       The Update method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property.      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Update method from page code. The Update method is invoked directly by the data-bound control instead.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The business object is assumed to update data one record at a time, rather than in a batch.","pos":[0,91]},{"content":"Before the Update operation is performed, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updating&gt; event.","pos":[98,307],"source":"       Before the Update operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updating&gt; event to examine the values of the parameters and to perform any preprocessing before an Update operation.","pos":[308,492],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event to examine the values of the parameters and to perform any preprocessing before an Update operation."},{"content":"To perform an update operation, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object uses reflection to create an instance of the object that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property.","pos":[493,739],"source":" To perform an update operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property."},{"content":"It then calls the method that is identified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property, using any associated &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; properties.","pos":[740,969],"source":" It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> properties."},{"content":"After the Update operation completes, the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A&gt; method is called to raise the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updated&gt; event.","pos":[970,1173],"source":" After the Update operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event."},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updated&gt; event to examine any return values, output parameters, and exceptions, and to perform any post-processing.","pos":[1174,1357],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event to examine any return values, output parameters, and exceptions, and to perform any post-processing."},{"content":"The Update method delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A&gt; method of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[1364,1617],"source":"       The Update method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt;.","pos":[1624,1780],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should validate any parameter value that you receive from the client.","pos":[1786,1877],"source":"      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property.","pos":[1878,2013],"source":" The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property."},{"content":"Data-Bound Controls    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is associated with a data-bound control, such as the &lt;xref:System.Web.UI.WebControls.GridView&gt; control, it is not necessary to call the Update method from page code.","pos":[2022,2277],"source":"      ## Data-Bound Controls    When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Update method from page code."},{"content":"The Update method is invoked directly by the data-bound control instead.","pos":[2278,2350]}]},{"pos":[244935,245017],"content":"A value that represents the number of rows updated in the underlying data storage.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that represents the number of rows updated in the underlying data storage.","pos":[0,82]}]},{"pos":[245479,245576],"content":"Occurs when an <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update*&gt; operation has completed.","pos":[0,97],"source":"Occurs when an <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> operation has completed."}]},{"pos":[245589,246169],"content":"Handle the Updated event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Updated event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt; operation has completed.","pos":[0,228],"source":"Handle the Updated event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation has completed."},{"content":"The return value, output parameters, and exception handling properties are available from the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&gt; object that is associated with the event.","pos":[229,429],"source":" The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[436,578],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[246381,246393],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[246820,246972],"content":"Gets or sets the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> control invokes to update data.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to update data."},{"pos":[246985,252826],"content":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control assumes that the method that is identified by the UpdateMethod property performs updates one at a time, rather than in a batch.       The UpdateMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       Make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection match the column names that are returned by the select method.      ## Object Lifetime    The method that is identified by the UpdateMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method that is specified by the UpdateMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the method that is specified by the UpdateMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the UpdateMethod property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection from three sources:      -   From the data-bound control, at run time.      -   From the `UpdateParameters` element, declaratively.      -   From the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler, programmatically.       First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, the parameters for `Name` and `Number` are added to the collection. The exact name of the parameter depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. The data type of these parameters is `string`. Next, the parameters that are listed in the `UpdateParameters` element are added. If a parameter in the `UpdateParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `UpdateParameters` element. Typically, this is used to modify the type of the data in the parameter. Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the UpdateMethod property.      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `UpdateParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> control then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the UpdateMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `UpdateARecord`. One `UpdateARecord` has one parameter, `ID`, and the other `UpdateARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection has only one parameter named `ID`, the `UpdateARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the UpdateMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control assumes that the method that is identified by the UpdateMethod property performs updates one at a time, rather than in a batch.","pos":[0,189],"source":"The <xref:System.Web.UI.WebControls.ObjectDataSource> control assumes that the method that is identified by the UpdateMethod property performs updates one at a time, rather than in a batch."},{"content":"The UpdateMethod property delegates to the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[196,472],"source":"       The UpdateMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"Make sure that the parameter names configured for the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection match the column names that are returned by the select method.","pos":[479,741],"source":"       Make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection match the column names that are returned by the select method."},{"content":"Object Lifetime    The method that is identified by the UpdateMethod property can be an instance method or a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method.","pos":[750,902],"source":"      ## Object Lifetime    The method that is identified by the UpdateMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method."},{"content":"If it is an instance method, the business object is created and destroyed each time the method that is specified by the UpdateMethod property is called.","pos":[903,1055]},{"content":"You can handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt; and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt; events to work with the business object before the method that is specified by the UpdateMethod property is called.","pos":[1056,1323],"source":" You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the method that is specified by the UpdateMethod property is called."},{"content":"You can also handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; event that is raised after the method that is specified by the UpdateMethod property is called.","pos":[1324,1509],"source":" You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the UpdateMethod property is called."},{"content":"If the business object implements the &lt;xref:System.IDisposable&gt; interface, the &lt;xref:System.IDisposable.Dispose%2A&gt; method is called before the object is destroyed.","pos":[1510,1674],"source":" If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed."},{"content":"If the method is <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), the business object is never created and you cannot handle the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated&gt;, &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating&gt;, and &lt;xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing&gt; events.","pos":[1675,2000],"source":" If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events."},{"content":"Parameter Merging    Parameters are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection from three sources:      -   From the data-bound control, at run time.","pos":[2009,2209],"source":"      ## Parameter Merging    Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection from three sources:      -   From the data-bound control, at run time."},{"content":"-   From the <ph id=\"ph1\">`UpdateParameters`</ph> element, declaratively.","pos":[2215,2270],"source":"      -   From the `UpdateParameters` element, declaratively."},{"content":"-   From the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updating&gt; event handler, programmatically.","pos":[2276,2380],"source":"      -   From the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler, programmatically."},{"content":"First, any parameters that are generated from data-bound controls are added to the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection.","pos":[2387,2551],"source":"       First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection."},{"content":"For example, if the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control is bound to a &lt;xref:System.Web.UI.WebControls.GridView&gt; control that has the columns <ph id=\"ph1\">`Name`</ph> and <ph id=\"ph2\">`Number`</ph>, the parameters for <ph id=\"ph3\">`Name`</ph> and <ph id=\"ph4\">`Number`</ph> are added to the collection.","pos":[2552,2803],"source":" For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, the parameters for `Name` and `Number` are added to the collection."},{"content":"The exact name of the parameter depends on the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A&gt; property.","pos":[2804,2944],"source":" The exact name of the parameter depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property."},{"content":"The data type of these parameters is <ph id=\"ph1\">`string`</ph>.","pos":[2945,2991],"source":" The data type of these parameters is `string`."},{"content":"Next, the parameters that are listed in the <ph id=\"ph1\">`UpdateParameters`</ph> element are added.","pos":[2992,3073],"source":" Next, the parameters that are listed in the `UpdateParameters` element are added."},{"content":"If a parameter in the <ph id=\"ph1\">`UpdateParameters`</ph> element is found with the same name as a parameter that is already in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection, the existing parameter is modified to match the parameter that is specified in the <ph id=\"ph2\">`UpdateParameters`</ph> element.","pos":[3074,3381],"source":" If a parameter in the `UpdateParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `UpdateParameters` element."},{"content":"Typically, this is used to modify the type of the data in the parameter.","pos":[3382,3454]},{"content":"Finally, you can programmatically add and remove parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updating&gt; event, which occurs before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt; method is run.","pos":[3455,3686],"source":" Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is run."},{"content":"The method is resolved after the parameters are merged.","pos":[3687,3742]},{"content":"Method resolution is discussed in the next section.","pos":[3743,3794]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should validate any parameter value that you receive from the client.","pos":[3800,3891],"source":"      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the UpdateMethod property.","pos":[3892,3974]},{"content":"Method Resolution    When the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt; method is called, the data fields from the data-bound control, the parameters that were created declaratively in the <ph id=\"ph1\">`UpdateParameters`</ph> element, and the parameters that were added in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Updating&gt; event handler are all merged.","pos":[3983,4348],"source":"      ## Method Resolution    When the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `UpdateParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler are all merged."},{"content":"(For more information, see the preceding section.) The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control then attempts to find a method to call.","pos":[4349,4501],"source":" (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> control then attempts to find a method to call."},{"content":"First, it looks for one or more methods with the name that is specified in the UpdateMethod property.","pos":[4502,4603]},{"content":"If no match is found, an &lt;xref:System.InvalidOperationException&gt; exception is thrown.","pos":[4604,4689],"source":" If no match is found, an <xref:System.InvalidOperationException> exception is thrown."},{"content":"If a match is found, it then looks for matching parameter names.","pos":[4690,4754]},{"content":"For example, suppose a type that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A&gt; property has two methods named <ph id=\"ph1\">`UpdateARecord`</ph>.","pos":[4755,4917],"source":" For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `UpdateARecord`."},{"content":"One <ph id=\"ph1\">`UpdateARecord`</ph> has one parameter, <ph id=\"ph2\">`ID`</ph>, and the other <ph id=\"ph3\">`UpdateARecord`</ph> has two parameters, <ph id=\"ph4\">`Name`</ph> and <ph id=\"ph5\">`Number`</ph>.","pos":[4918,5033],"source":" One `UpdateARecord` has one parameter, `ID`, and the other `UpdateARecord` has two parameters, `Name` and `Number`."},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A&gt; collection has only one parameter named <ph id=\"ph1\">`ID`</ph>, the <ph id=\"ph2\">`UpdateARecord`</ph> method with just the <ph id=\"ph3\">`ID`</ph> parameter is called.","pos":[5034,5223],"source":" If the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection has only one parameter named `ID`, the `UpdateARecord` method with just the `ID` parameter is called."},{"content":"The type of the parameter is not checked in resolving the methods.","pos":[5224,5290]},{"content":"The order of the parameters does not matter.","pos":[5291,5335]},{"content":"If the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property is set, the method is resolved in a different way.","pos":[5342,5480],"source":"       If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way."},{"content":"The &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; looks for a method with the name that is specified in the UpdateMethod property that takes one parameter of the type that is specified in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A&gt; property.","pos":[5481,5758],"source":" The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the UpdateMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property."},{"content":"In this case, the name of the parameter does not matter.","pos":[5759,5815]}]},{"pos":[255818,256003],"content":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to update data. The default is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the name of the method or function that the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ObjectDataSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses to update data.","pos":[0,153],"source":"A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to update data."},{"content":"The default is an empty string.","pos":[154,185]}]},{"pos":[256519,256705],"content":"Gets the parameters collection that contains the parameters that are used by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters collection that contains the parameters that are used by the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*&gt; property.","pos":[0,186],"source":"Gets the parameters collection that contains the parameters that are used by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property."}]},{"pos":[256718,258215],"content":"The names and types of the parameters that are contained in the UpdateParameters collection must match the names and types of the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> method signature. The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property and are case-sensitive. The parameters in the collection depend on the data in the data-bound control, the parameters that are specified declaratively, and the parameters that are added programmatically. For more information, see the \"Parameter Merging\" section in <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> and [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).       The UpdateParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The names and types of the parameters that are contained in the UpdateParameters collection must match the names and types of the parameters in the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; method signature.","pos":[0,231],"source":"The names and types of the parameters that are contained in the UpdateParameters collection must match the names and types of the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> method signature."},{"content":"The parameter names are affected by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A&gt; property and are case-sensitive.","pos":[232,388],"source":" The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property and are case-sensitive."},{"content":"The parameters in the collection depend on the data in the data-bound control, the parameters that are specified declaratively, and the parameters that are added programmatically.","pos":[389,568]},{"content":"For more information, see the \"Parameter Merging\" section in &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A&gt; and <bpt id=\"p1\">[</bpt>Using Parameters with the ObjectDataSource Control<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[569,786],"source":" For more information, see the \"Parameter Merging\" section in <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> and [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md)."},{"content":"The UpdateParameters property retrieves the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A&gt; property that is contained by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceView&gt; object that is associated with the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control.","pos":[793,1092],"source":"       The UpdateParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control."},{"content":"For more information about parameter merging, object lifetime, and method resolution, see &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt;.","pos":[1099,1255],"source":"       For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  You should validate any parameter value that you receive from the client.","pos":[1261,1352],"source":"      > [!IMPORTANT] >  You should validate any parameter value that you receive from the client."},{"content":"The runtime simply substitutes the parameter value into the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A&gt; property.","pos":[1353,1488],"source":" The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property."}]},{"pos":[260527,260742],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.ParameterCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the parameters used by the method that is specified by the &lt;xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*&gt; property.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains the parameters used by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property."},{"pos":[261219,261304],"content":"Occurs before an <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs before an &lt;xref:System.Web.UI.WebControls.ObjectDataSource.Update*&gt; operation.","pos":[0,85],"source":"Occurs before an <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> operation."}]},{"pos":[261317,262039],"content":"Handle the Updating event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the update operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Handle the Updating event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the &lt;xref:System.Web.UI.WebControls.ObjectDataSource&gt; control performs the update operation.","pos":[0,272],"source":"Handle the Updating event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the update operation."},{"content":"The parameters are available as an &lt;xref:System.Collections.IDictionary&gt; collection that is accessed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A&gt; property, which is exposed by the &lt;xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs&gt; object.","pos":[273,571],"source":" The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","pos":[578,720],"source":"       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}]},{"pos":[265015,265027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.ObjectDataSource\n  id: ObjectDataSource\n  children:\n  - System.Web.UI.WebControls.ObjectDataSource.#ctor\n  - System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)\n  - System.Web.UI.WebControls.ObjectDataSource.CacheDuration\n  - System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy\n  - System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency\n  - System.Web.UI.WebControls.ObjectDataSource.ConflictDetection\n  - System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull\n  - System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName\n  - System.Web.UI.WebControls.ObjectDataSource.Delete\n  - System.Web.UI.WebControls.ObjectDataSource.Deleted\n  - System.Web.UI.WebControls.ObjectDataSource.DeleteMethod\n  - System.Web.UI.WebControls.ObjectDataSource.DeleteParameters\n  - System.Web.UI.WebControls.ObjectDataSource.Deleting\n  - System.Web.UI.WebControls.ObjectDataSource.EnableCaching\n  - System.Web.UI.WebControls.ObjectDataSource.EnablePaging\n  - System.Web.UI.WebControls.ObjectDataSource.FilterExpression\n  - System.Web.UI.WebControls.ObjectDataSource.Filtering\n  - System.Web.UI.WebControls.ObjectDataSource.FilterParameters\n  - System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)\n  - System.Web.UI.WebControls.ObjectDataSource.GetViewNames\n  - System.Web.UI.WebControls.ObjectDataSource.Insert\n  - System.Web.UI.WebControls.ObjectDataSource.Inserted\n  - System.Web.UI.WebControls.ObjectDataSource.Inserting\n  - System.Web.UI.WebControls.ObjectDataSource.InsertMethod\n  - System.Web.UI.WebControls.ObjectDataSource.InsertParameters\n  - System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName\n  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreated\n  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreating\n  - System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing\n  - System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString\n  - System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)\n  - System.Web.UI.WebControls.ObjectDataSource.ParsingCulture\n  - System.Web.UI.WebControls.ObjectDataSource.SaveViewState\n  - System.Web.UI.WebControls.ObjectDataSource.Select\n  - System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod\n  - System.Web.UI.WebControls.ObjectDataSource.Selected\n  - System.Web.UI.WebControls.ObjectDataSource.Selecting\n  - System.Web.UI.WebControls.ObjectDataSource.SelectMethod\n  - System.Web.UI.WebControls.ObjectDataSource.SelectParameters\n  - System.Web.UI.WebControls.ObjectDataSource.SortParameterName\n  - System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency\n  - System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName\n  - System.Web.UI.WebControls.ObjectDataSource.TrackViewState\n  - System.Web.UI.WebControls.ObjectDataSource.TypeName\n  - System.Web.UI.WebControls.ObjectDataSource.Update\n  - System.Web.UI.WebControls.ObjectDataSource.Updated\n  - System.Web.UI.WebControls.ObjectDataSource.UpdateMethod\n  - System.Web.UI.WebControls.ObjectDataSource.UpdateParameters\n  - System.Web.UI.WebControls.ObjectDataSource.Updating\n  langs:\n  - csharp\n  name: ObjectDataSource\n  nameWithType: ObjectDataSource\n  fullName: System.Web.UI.WebControls.ObjectDataSource\n  type: Class\n  summary: Represents a business object that provides data to data-bound controls in multitier Web application architectures.\n  remarks: \"In this topic:  \\n  \\n-   [Introduction](#introduction)  \\n  \\n-   [Purpose](#purpose)  \\n  \\n-   [Retrieving Data](#retrieving_data)  \\n  \\n-   [Performing Data Operations](#performing_data_operations)  \\n  \\n-   [Filtering Data](#filtering_data)  \\n  \\n-   [Caching](#caching)  \\n  \\n-   [Features](#features)  \\n  \\n-   [Data View](#data_view)  \\n  \\n-   [Using LINQ to SQL](#using_linq_to_sql)  \\n  \\n-   [Declarative Syntax](#declarative_syntax)  \\n  \\n<a name=\\\"introduction\\\"></a>   \\n## Introduction  \\n An ObjectDataSource control works with a class that you create. You create methods that retrieve and update data, and you provide the names of those methods to the ObjectDataSource control in markup. During rendering or postback processing, the ObjectDataSource calls the methods that you have specified.  \\n  \\n There is no visual rendering of the ObjectDataSource control. As a result, the ObjectDataSource does not support visual features such as the <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> or <xref:System.Web.UI.DataSourceControl.SkinID%2A> property.  \\n  \\n<a name=\\\"purpose\\\"></a>   \\n## Purpose  \\n A very common application design practice is to separate the presentation layer from business logic and to encapsulate the business logic in business objects. These business objects form a distinct layer between the presentation layer and the data tier, resulting in a three-tier application architecture. The ObjectDataSource control enables developers to use an ASP.NET data source control while retaining their three-tier application architecture.  \\n  \\n The ObjectDataSource control uses reflection to create instances of business objects and to call methods on them to retrieve, update, insert, and delete data. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property identifies the name of the class that the ObjectDataSource works with. The ObjectDataSource control creates and destroys an instance of the class for each method call; it does not hold the object in memory for the lifetime of the Web request. This is a serious consideration if the business object that you use requires many resources or is otherwise expensive to create and destroy. Using an expensive object might not be an optimal design choice, but you can control the life cycle of the object by using the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.  \\n  \\n> [!NOTE]\\n>  The methods that are identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties can be instance methods or `static` (`Shared` in Visual Basic) methods. If the methods are `static` (`Shared` in Visual Basic), an instance of the business object is not created, and the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events are not raised.  \\n  \\n<a name=\\\"retrieving_data\\\"></a>   \\n## Retrieving Data  \\n To retrieve data from a business object, set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to the name of the method that retrieves data. If the method does not return an <xref:System.Collections.IEnumerable> or <xref:System.Data.DataSet> object, the object is wrapped by the runtime in an <xref:System.Collections.IEnumerable> collection. If the method signature has parameters, you can add <xref:System.Web.UI.WebControls.Parameter> objects to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection, and then bind them to the values that you want to pass to the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. In order for the ObjectDataSource control to use the parameters, the parameters must match the names and types of the parameters in the method signature. For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The ObjectDataSource control retrieves data whenever the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called. This method provides programmatic access to the method that is specified by <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. The method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property is called automatically by controls that are bound to the ObjectDataSource when their `DataBind` method is called. If you set the `DataSourceID` property of a data-bound control, the control automatically binds to data from the data source, as needed. Setting the `DataSourceID` property is the recommended method for binding an ObjectDataSource control to a data-bound control. Alternatively, you can set the `DataSource` property, but then you must explicitly call the `DataBind` method of the data-bound control. You can call the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method programmatically at any time to retrieve data.  \\n  \\n For more information about binding data-bound controls to data source controls, see [Binding to Data Using a Data Source Control](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7).  \\n  \\n<a name=\\\"performing_data_operations\\\"></a>   \\n## Performing Data Operations  \\n Depending on the capabilities of the business object that the ObjectDataSource control works with, you can perform data operations, such as updates, insertions, and deletions. To perform these data operations, set the appropriate method name and any associated parameters for the operation that you want to perform. For example, for an update operation, set the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property to the name of the business object method that performs updates and add any required parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. If the ObjectDataSource control is associated with a data-bound control, the parameters are added by the data-bound control. In this case, you need to ensure that the parameter names of the method match the field names in the data-bound control. The update is performed when the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is called, either explicitly by your code or automatically by a data-bound control. The same general pattern is followed for <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operations. Business objects are assumed to perform these types of data operations one record at a time, rather than batched.  \\n  \\n<a name=\\\"filtering_data\\\"></a>   \\n## Filtering Data  \\n The ObjectDataSource control can filter data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, if the data is returned as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. You can set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property to a filtering expression by using a format string syntax and bind values in the expression to parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.  \\n  \\n<a name=\\\"caching\\\"></a>   \\n## Caching  \\n Although the ObjectDataSource does not retain the instance of the business object across multiple requests, it can cache the result of calling the method identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. While the data is cached, subsequent calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method return the cached data instead of creating the business object and calling its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> using reflection. Caching lets you avoid creating the object and calling its data method at the expense of memory on the Web server. The ObjectDataSource automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to the number of seconds that the cache stores data before the cache is discarded. You can also specify a <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property and an optional <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> property. The ObjectDataSource control allows you to cache all types of data, but you should not cache objects that retain resources or state that cannot be shared to service multiple requests (for example, an open <xref:System.Data.SqlClient.SqlDataReader> object), because the same instance of the object will be used to service multiple requests.  \\n  \\n<a name=\\\"features\\\"></a>   \\n## Features  \\n The following table describes the features of the ObjectDataSource control.  \\n  \\n|Capability|Requirements|  \\n|----------------|------------------|  \\n|Selecting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to the name of the business object method that selects data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection either programmatically or by using a data-bound control.|  \\n|Sorting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> property to the name of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> method that carries the sort criteria.|  \\n|Filtering|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property to a filtering expression and optionally add any parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection to filter the data when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called. The method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property must return a <xref:System.Data.DataSet> or <xref:System.Data.DataTable>.|  \\n|Paging|Data source paging is supported, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> method contains parameters for the maximum number of records to retrieve and the index of the first record to retrieve. The names of those parameters must be set in the  <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> properties, respectively. A data-bound control might be able to perform paging itself, even if the ObjectDataSource control does not support paging directly in the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. The requirement for the data-bound control to be able to do this is that the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property return an object that implements the <xref:System.Collections.ICollection> interface.|  \\n|Updating|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property to the name of the business object method that updates data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection.|  \\n|Deleting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property to the name of the business object method or function that deletes data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection.|  \\n|Inserting|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property to the name of the business object method or function that inserts data, and include any necessary parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection.|  \\n|Caching|Set the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties according to the caching behavior you want for your cached data.|  \\n  \\n> [!NOTE]\\n>  When you use the ObjectDataSource class to update or insert data, strings that are entered at the client are not automatically converted from the client culture format to the server culture format. For example, the client culture might specify DD/MM/YYYY as the date format, and the date format on the server might be MM/DD/YYYY. In that case, October 5, 2009 would be entered in a <xref:System.Web.UI.WebControls.TextBox> control as 5/10/2009 but would be interpreted as May 10, 2009. October 15, 2009 would be entered as 15/10/2009, and would be rejected as an invalid date.  \\n  \\n<a name=\\\"data_view\\\"></a>   \\n## Data View  \\n As with all data source controls, the ObjectDataSource control is associated with a data source view class. While the ObjectDataSource control is the interface that the page developer uses to work with data, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> class is the interface that data-bound controls work with. Additionally, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> class describes the capabilities of the data source control, and performs the actual work. The ObjectDataSource control has only one associated <xref:System.Web.UI.WebControls.ObjectDataSourceView>, and it is always named `DefaultView`. While the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> method, many of its properties and methods are wrapped and exposed directly by the ObjectDataSource control. Behind the scenes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object performs all data operations, including retrieving, inserting, updating, deleting, filtering, and sorting the data. For more information, see <xref:System.Web.UI.WebControls.ObjectDataSourceView>.  \\n  \\n<a name=\\\"using_linq_to_sql\\\"></a>   \\n## Using LINQ to SQL  \\n You can use the ObjectDataSource control with a LINQ to SQL class. To do so, you set the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property to the name of the data-context class. You also set the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> methods to the methods in the data-context class that perform the corresponding operations. You must create an event handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event in order to cancel disposing of the data-context class. This step is necessary because LINQ to SQL supports deferred execution, whereas the ObjectDataSource control tries to dispose the data context after the Select operation. For more information about how to create LINQ to SQL classes, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081). For an example of how to cancel the disposing of a data context class, see the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event.  \\n  \\n## Using the Entity Framework  \\n You can also use the ObjectDataSource control with the Entity Framework. For more information, see [Using the Entity Framework and the ObjectDataSource Control](http://go.microsoft.com/fwlink/?LinkId=209117).  \\n  \\n<a name=\\\"declarative_syntax\\\"></a>   \\n## Declarative Syntax  \\n  \\n```  \\n<asp:ObjectDataSource  \\n    CacheDuration=\\\"string|Infinite\\\"  \\n    CacheExpirationPolicy=\\\"Absolute|Sliding\\\"  \\n    CacheKeyDependency=\\\"string\\\"  \\n    ConflictDetection=\\\"OverwriteChanges|CompareAllValues\\\"  \\n    ConvertNullToDBNull=\\\"True|False\\\"  \\n    DataObjectTypeName=\\\"string\\\"  \\n    DeleteMethod=\\\"string\\\"  \\n    EnableCaching=\\\"True|False\\\"  \\n    EnablePaging=\\\"True|False\\\"  \\n    EnableTheming=\\\"True|False\\\"  \\n    EnableViewState=\\\"True|False\\\"  \\n    FilterExpression=\\\"string\\\"  \\n    ID=\\\"string\\\"  \\n    InsertMethod=\\\"string\\\"  \\n    MaximumRowsParameterName=\\\"string\\\"  \\n    OldValuesParameterFormatString=\\\"string\\\"  \\n    OnDataBinding=\\\"DataBinding event handler\\\"  \\n    OnDeleted=\\\"Deleted event handler\\\"  \\n    OnDeleting=\\\"Deleting event handler\\\"  \\n    OnDisposed=\\\"Disposed event handler\\\"  \\n    OnFiltering=\\\"Filtering event handler\\\"  \\n    OnInit=\\\"Init event handler\\\"  \\n    OnInserted=\\\"Inserted event handler\\\"  \\n    OnInserting=\\\"Inserting event handler\\\"  \\n    OnLoad=\\\"Load event handler\\\"  \\n    OnObjectCreated=\\\"ObjectCreated event handler\\\"  \\n    OnObjectCreating=\\\"ObjectCreating event handler\\\"  \\n    OnObjectDisposing=\\\"ObjectDisposing event handler\\\"  \\n    OnPreRender=\\\"PreRender event handler\\\"  \\n    OnSelected=\\\"Selected event handler\\\"  \\n    OnSelecting=\\\"Selecting event handler\\\"  \\n    OnUnload=\\\"Unload event handler\\\"  \\n    OnUpdated=\\\"Updated event handler\\\"  \\n    OnUpdating=\\\"Updating event handler\\\"  \\n    runat=\\\"server\\\"  \\n    SelectCountMethod=\\\"string\\\"  \\n    SelectMethod=\\\"string\\\"  \\n    SkinID=\\\"string\\\"  \\n    SortParameterName=\\\"string\\\"  \\n    SqlCacheDependency=\\\"string\\\"  \\n    StartRowIndexParameterName=\\\"string\\\"  \\n    TypeName=\\\"string\\\"  \\n    UpdateMethod=\\\"string\\\"  \\n    Visible=\\\"True|False\\\"  \\n>  \\n        <DeleteParameters>  \\n                <asp:ControlParameter  \\n                    ControlID=\\\"string\\\"  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:CookieParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    CookieName=\\\"string\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:FormParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    FormField=\\\"string\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:Parameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:ProfileParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:QueryStringParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    QueryStringField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:SessionParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    SessionField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n        </DeleteParameters>  \\n        <FilterParameters>  \\n                <asp:ControlParameter  \\n                    ControlID=\\\"string\\\"  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:CookieParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    CookieName=\\\"string\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:FormParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    FormField=\\\"string\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:Parameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:ProfileParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:QueryStringParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    QueryStringField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:SessionParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    SessionField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n        </FilterParameters>  \\n        <InsertParameters>  \\n                <asp:ControlParameter  \\n                    ControlID=\\\"string\\\"  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:CookieParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    CookieName=\\\"string\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:FormParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    FormField=\\\"string\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:Parameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:ProfileParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:QueryStringParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    QueryStringField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:SessionParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    SessionField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n        </InsertParameters>  \\n        <SelectParameters>  \\n                <asp:ControlParameter  \\n                    ControlID=\\\"string\\\"  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:CookieParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    CookieName=\\\"string\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:FormParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    FormField=\\\"string\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:Parameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:ProfileParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:QueryStringParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    QueryStringField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:SessionParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    SessionField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n        </SelectParameters>  \\n        <UpdateParameters>  \\n                <asp:ControlParameter  \\n                    ControlID=\\\"string\\\"  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:CookieParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    CookieName=\\\"string\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:FormParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    FormField=\\\"string\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:Parameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:ProfileParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    PropertyName=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:QueryStringParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    QueryStringField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n                <asp:SessionParameter  \\n                    ConvertEmptyStringToNull=\\\"True|False\\\"  \\n                    DefaultValue=\\\"string\\\"  \\n                    Direction=\\\"Input|Output|InputOutput|ReturnValue\\\"  \\n                    Name=\\\"string\\\"  \\n                    SessionField=\\\"string\\\"  \\n                    Size=\\\"integer\\\"  \\n                    Type=\\\"Empty|Object|DBNull|Boolean|Char|SByte|  \\n                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  \\n                        Single|Double|Decimal|DateTime|String\\\"  \\n                />  \\n        </UpdateParameters>  \\n</asp:ObjectDataSource>  \\n```\"\n  example:\n  - \"A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  \\n  \\n This section shows an ObjectDataSource in markup in an .aspx page and it shows the business objects that it works with. The example is the .aspx page. It contains a <xref:System.Web.UI.WebControls.GridView> control that is bound to an ObjectDataSource control. The ObjectDataSource control markup specifies the name of the business object and the name of the business object method to call in order to retrieve data.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_1.aspx)]  \\n  \\n The following example shows the business object that the ObjectDataSource control in the .aspx page uses. (Many other ObjectDataSource code examples use this business object also.) The example consists of the following two basic classes:  \\n  \\n-   The `EmployeeLogic` class is the business logic class that the ObjectDataSource uses.  \\n  \\n-   The `NorthwindEmployee` class defines the data object that is returned by the `GetAllEmployees` method of the `EmployeeLogic` class.  \\n  \\n An additional `NorthwindDataException` class is provided as a convenience.  \\n  \\n This set of example classes works with the Northwind Traders database, which is available with Microsoft SQL Server and Microsoft Access. For a complete working example, you must compile and use these classes with the .aspx page example that is provided. For information about how to install the Northwind Traders database, see [How to: Install Sample Databases](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_2.vb)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"Selecting\")]\n\n      [System.ComponentModel.DefaultProperty(\"TypeName\")]\n\n      [System.ComponentModel.Designer(\"System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))]\n\n      [System.Web.UI.ParseChildren(true)]\n\n      [System.Web.UI.PersistChildren(false)]\n\n      public class ObjectDataSource : System.Web.UI.DataSourceControl\n  inheritance:\n  - System.Object\n  - System.Web.UI.Control\n  - System.Web.UI.DataSourceControl\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.Control.Adapter\n  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)\n  - System.Web.UI.Control.AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory\n  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.BindingContainer\n  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)\n  - System.Web.UI.Control.ChildControlsCreated\n  - System.Web.UI.Control.ClearCachedClientID\n  - System.Web.UI.Control.ClearChildControlState\n  - System.Web.UI.Control.ClearChildState\n  - System.Web.UI.Control.ClearChildViewState\n  - System.Web.UI.Control.ClearEffectiveClientIDMode\n  - System.Web.UI.Control.ClientIDSeparator\n  - System.Web.UI.Control.Context\n  - System.Web.UI.Control.CreateChildControls\n  - System.Web.UI.Control.DataBind\n  - System.Web.UI.Control.DataBind(System.Boolean)\n  - System.Web.UI.Control.DataBindChildren\n  - System.Web.UI.Control.DataBinding\n  - System.Web.UI.Control.DataItemContainer\n  - System.Web.UI.Control.DataKeysContainer\n  - System.Web.UI.Control.DesignMode\n  - System.Web.UI.Control.Dispose\n  - System.Web.UI.Control.Disposed\n  - System.Web.UI.Control.EnableViewState\n  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)\n  - System.Web.UI.Control.EnsureChildControls\n  - System.Web.UI.Control.EnsureID\n  - System.Web.UI.Control.Events\n  - System.Web.UI.Control.FindControl(System.String,System.Int32)\n  - System.Web.UI.Control.GetDesignModeState\n  - System.Web.UI.Control.GetRouteUrl(System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)\n  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)\n  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)\n  - System.Web.UI.Control.HasChildViewState\n  - System.Web.UI.Control.HasEvents\n  - System.Web.UI.Control.ID\n  - System.Web.UI.Control.IdSeparator\n  - System.Web.UI.Control.Init\n  - System.Web.UI.Control.IsChildControlStateCleared\n  - System.Web.UI.Control.IsLiteralContent\n  - System.Web.UI.Control.IsTrackingViewState\n  - System.Web.UI.Control.IsViewStateEnabled\n  - System.Web.UI.Control.Load\n  - System.Web.UI.Control.LoadControlState(System.Object)\n  - System.Web.UI.Control.LoadViewStateByID\n  - System.Web.UI.Control.MapPathSecure(System.String)\n  - System.Web.UI.Control.NamingContainer\n  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.OnDataBinding(System.EventArgs)\n  - System.Web.UI.Control.OnLoad(System.EventArgs)\n  - System.Web.UI.Control.OnPreRender(System.EventArgs)\n  - System.Web.UI.Control.OnUnload(System.EventArgs)\n  - System.Web.UI.Control.OpenFile(System.String)\n  - System.Web.UI.Control.Page\n  - System.Web.UI.Control.Parent\n  - System.Web.UI.Control.PreRender\n  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)\n  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)\n  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)\n  - System.Web.UI.Control.RenderingCompatibility\n  - System.Web.UI.Control.ResolveAdapter\n  - System.Web.UI.Control.ResolveClientUrl(System.String)\n  - System.Web.UI.Control.ResolveUrl(System.String)\n  - System.Web.UI.Control.SaveControlState\n  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)\n  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)\n  - System.Web.UI.Control.Site\n  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)\n  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings\n  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions\n  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions\n  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)\n  - System.Web.UI.Control.TemplateControl\n  - System.Web.UI.Control.TemplateSourceDirectory\n  - System.Web.UI.Control.UniqueID\n  - System.Web.UI.Control.Unload\n  - System.Web.UI.Control.ValidateRequestMode\n  - System.Web.UI.Control.ViewState\n  - System.Web.UI.Control.ViewStateIgnoresCase\n  - System.Web.UI.Control.ViewStateMode\n  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)\n  - System.Web.UI.DataSourceControl.ClientID\n  - System.Web.UI.DataSourceControl.ClientIDMode\n  - System.Web.UI.DataSourceControl.Controls\n  - System.Web.UI.DataSourceControl.CreateControlCollection\n  - System.Web.UI.DataSourceControl.EnableTheming\n  - System.Web.UI.DataSourceControl.FindControl(System.String)\n  - System.Web.UI.DataSourceControl.Focus\n  - System.Web.UI.DataSourceControl.HasControls\n  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)\n  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)\n  - System.Web.UI.DataSourceControl.SkinID\n  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection\n  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList\n  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)\n  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames\n  - System.Web.UI.DataSourceControl.Visible\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ObjectDataSource()\n  nameWithType: ObjectDataSource.ObjectDataSource()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> class.\n  syntax:\n    content: public ObjectDataSource ();\n    parameters: []\n  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ObjectDataSource(String,String)\n  nameWithType: ObjectDataSource.ObjectDataSource(String,String)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> class with the specified type name and data retrieval method name.\n  remarks: The value of the `typeName` parameter can be a partially qualified type for code that is located in the Bin or App_Code directory or a fully qualified type name for code that is registered in the global assembly cache. If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config configuration file.\n  syntax:\n    content: public ObjectDataSource (string typeName, string selectMethod);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The name of the class that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> works with.\n    - id: selectMethod\n      type: System.String\n      description: The name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> invokes to retrieve data.\n  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration\n  id: CacheDuration\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: CacheDuration\n  nameWithType: ObjectDataSource.CacheDuration\n  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the length of time, in seconds, that the data source control caches data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.  \\n  \\n The cache is regulated by a combination of the duration and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> setting. If the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.ObjectDataSource> caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method and holds it in memory for, at most, the amount of time that is specified by the CacheDuration property. The data might be released before the duration time, if the memory is needed. The cache is then refreshed during the next call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> property is set to <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, but resets the time window for which it holds the cache on each subsequent call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. The cache expires if there is no activity for a time that is equal to the CacheDuration property since the last call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \\n  \\n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports caching. To enable caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the CacheDuration and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_1.aspx)]  \\n  \\n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_2.cs)]\"\n  syntax:\n    content: public virtual int CacheDuration { get; set; }\n    return:\n      type: System.Int32\n      description: The number of seconds that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> caches the results of a <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property invocation. The default is 0. The value cannot be negative.\n  overload: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy\n  id: CacheExpirationPolicy\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: CacheExpirationPolicy\n  nameWithType: ObjectDataSource.CacheExpirationPolicy\n  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the cache expiration behavior that, when combined with the duration, describes the behavior of the cache that the data source control uses.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache period.  \\n  \\n The cache is regulated by a combination of the duration and the CacheExpirationPolicy setting. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.ObjectDataSource> caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method and holds it in memory for, at most, the amount of time that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property. The data might be released before the duration time, if the memory is needed. The cache is then refreshed during the next call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, but resets the time window for which it holds the cache for each subsequent call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. The cache expires if there is no activity for a time that is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property since the last call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports filtering and caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \\n  \\n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering and caching. To enable filtering and caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, caching is enabled because the `EmployeeLogic` object returns data as a <xref:System.Data.DataSet>, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and CacheExpirationPolicy properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_1.aspx)]  \\n  \\n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList>. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_2.cs)]\"\n  syntax:\n    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }\n    return:\n      type: System.Web.UI.DataSourceCacheExpiry\n      description: One of the <xref href=\"System.Web.UI.DataSourceCacheExpiry\"></xref> values. The default is <xref href=\"System.Web.UI.DataSourceCacheExpiry\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency\n  id: CacheKeyDependency\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: CacheKeyDependency\n  nameWithType: ObjectDataSource.CacheKeyDependency\n  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a user-defined key dependency that is linked to all data cache objects that are created by the data source control.\n  remarks: \"The CacheKeyDependency property can be set to any arbitrary string value.  \\n  \\n All cache objects are explicitly expired when the key is expired. This allows you to invalidate cache entries that are created by the <xref:System.Web.UI.WebControls.ObjectDataSource> from your own page code programmatically.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than from the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource> works with. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.  \\n  \\n You can set the CacheKeyDependency property to create a dependency between all cache entries that are created by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and the key. You can expire all the cache entries programmatically at any time by expiring the key. Expire the key by using the <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName> method with the current CacheKeyDependency value as the parameter.  \\n  \\n A unique cache entry is created for every combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> properties. Multiple <xref:System.Web.UI.WebControls.ObjectDataSource> controls can use the same cache entries in scenarios where they load data using the same type, method, and parameters.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \\n  \\n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \\n  \\n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The CacheKeyDependency property is set to \\\"EmployeeDetails\\\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_1.aspx)]  \\n  \\n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the CacheKeyDependency value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the CacheKeyDependency value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_2.vb)]  \\n  \\n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_3.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_3.cs)]\"\n  syntax:\n    content: public virtual string CacheKeyDependency { get; set; }\n    return:\n      type: System.String\n      description: A key that identifies all cache objects created by the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection\n  id: ConflictDetection\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ConflictDetection\n  nameWithType: ObjectDataSource.ConflictDetection\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value that determines whether or not just the new values are passed to the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> method or both the old and new values are passed to the <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> method.\n  remarks: \"This property determines whether parameters for old and new values are applied to the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property. For example, if the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataTable> control with the columns `Name` and `Number`, and the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> field, parameters are created for `Name` and `Number` for the `Update` method. If the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name`, `Number`, `original_Name`, and `original_Number`. (The exact name of the parameters for the original values depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property.) The <xref:System.Web.UI.WebControls.ObjectDataSource> then determines whether the method that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property has parameters that match.  \\n  \\n Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data and presents it to a different user. If both users update the data and submit it to the data storage, an unexpected result might occur, because both clients might provide different values for the same data. This is considered a conflict. By setting the ConflictDetection property to the <xref:System.Web.UI.ConflictOptions> value, the `Update` method can then compare the old and new values to the original data source to detect conflicts and handle them as necessary.  \\n  \\n The ConflictDetection property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  syntax:\n    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }\n    return:\n      type: System.Web.UI.ConflictOptions\n      description: One of the <xref href=\"System.Web.UI.ConflictOptions\"></xref> values. The default is <xref href=\"System.Web.UI.ConflictOptions\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull\n  id: ConvertNullToDBNull\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ConvertNullToDBNull\n  nameWithType: ObjectDataSource.ConvertNullToDBNull\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.Parameter\"></xref> values that are passed to an update, insert, or delete operation are automatically converted from <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to the <xref href=\"System.DBNull.Value\"></xref> value by the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control.\n  remarks: Not converting `null` to the <xref:System.DBNull.Value> value can result in errors at run time. Use the ConvertNullToDBNull property to indicate whether <xref:System.Web.UI.WebControls.Parameter> values that are passed to an update, insert, or delete operation are automatically converted from `null` to the <xref:System.DBNull.Value> value by the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\n  syntax:\n    content: public bool ConvertNullToDBNull { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, if any <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> values in <xref href=\"System.Web.UI.WebControls.Parameter\"></xref> objects passed to the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control are automatically converted to <xref href=\"System.DBNull.Value\"></xref> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName\n  id: DataObjectTypeName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: DataObjectTypeName\n  nameWithType: ObjectDataSource.DataObjectTypeName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of a class that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control uses for a parameter in an update, insert, or delete data operation, instead of passing individual values from the data-bound control.\n  remarks: \"Instead of specifying several parameters that are passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, you can create one object that aggregates several data field values. This one object is passed to the methods, instead of several parameters.  \\n  \\n The default behavior of an <xref:System.Web.UI.WebControls.ObjectDataSource> control that is bound to a data-bound control is that the data-bound control creates a <xref:System.Web.UI.WebControls.Parameter> object for each parameter in the data source. If the business object has many fields, the resulting method also has many fields. The DataObjectTypeName property allows you to specify a type that has a property for each data field. Then, instead of passing several parameters to the method, the runtime creates one object and sets all of its properties. This one object is added to the parameters collection for the method call.  \\n  \\n The type that is specified by the DataObjectTypeName property must have a default constructor that has no parameters, so the <xref:System.Web.UI.WebControls.ObjectDataSource> control can create an instance of the type. The type must also have settable properties that allow the <xref:System.Web.UI.WebControls.ObjectDataSource> control to populate the object with values that are passed from the data-bound control. The property names on the <xref:System.Web.UI.WebControls.ObjectDataSource> control are expected to exactly match the parameter names of values that are passed by the data-bound control.  \\n  \\n When the DataObjectTypeName property is set and the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, the methods that are specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> properties must each have one parameter of the type that is specified in the DataObjectTypeName property. If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have one parameter of the type that is specified in the DataObjectTypeName property. If the <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property must have two parameters of the type that is specified in the DataObjectTypeName property. The first parameter contains the original values; the second parameter contains the new values.  \\n  \\n The DataObjectTypeName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  example:\n  - \"The section contains two code examples. The first code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The second code example shows the Web page that uses the two classes that are used in the first code example.  \\n  \\n The following code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The select method of the `AggregateData` class returns a <xref:System.Data.DataTable> object with two columns named `Name` and `Number`. Similarly, the `NewData` class defines two read/write properties, `Name` and `Number`. The `Insert` method of the `AggregateData` class takes one parameter of type `NewData`. The `TypeName` property of the <xref:System.Web.UI.WebControls.ObjectDataSource> is set to `AggregateData` and the DataObjectTypeName property is set to `NewData`.  \\n  \\n [!code-cs[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_1.cs)]\\n [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_1.vb)]  \\n  \\n The following code example shows the Web page that uses the two classes that are used in the preceding code example.  \\n  \\n [!code-cs[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_2.aspx)]\\n [!code-vb[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_2.aspx)]\"\n  syntax:\n    content: public string DataObjectTypeName { get; set; }\n    return:\n      type: System.String\n      description: A partially or fully qualified class name that identifies the type of the object that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> can use as a parameter for an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>, or a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation. The default is an empty string (\"\").\n  overload: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Delete\n  id: Delete\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Delete()\n  nameWithType: ObjectDataSource.Delete()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Performs a delete operation by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> property with any parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*> collection.\n  remarks: \"Before the Delete operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event to examine the values of the parameters and to perform any preprocessing before a Delete operation. To perform a delete operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> properties. If the deletion parameters come from an associated data-bound control, the name of the parameters is created according to the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. After the Delete operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.  \\n  \\n The Delete method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n## Data-Bound Controls  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Delete method from page code. The Delete method is invoked directly by the data-bound control instead.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.\"\n  syntax:\n    content: public int Delete ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A value that represents the number of rows deleted from the underlying data storage, if the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*> property of the <xref href=\"System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs\"></xref> is set in the <xref href=\"System.Web.UI.WebControls.ObjectDataSource.Deleted\"></xref> event; otherwise, -1.\n  overload: System.Web.UI.WebControls.ObjectDataSource.Delete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted\n  id: Deleted\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Deleted\n  nameWithType: ObjectDataSource.Deleted\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs when a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation has completed.\n  remarks: \"Handle the Deleted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  \\n  \\n You can use the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object to return the number of rows that were deleted from the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method. To do this, set the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> property. If you return the number of deleted rows from the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property, the value is available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \\n  \\n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_1.aspx)]  \\n  \\n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_2.cs)]\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod\n  id: DeleteMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: DeleteMethod\n  nameWithType: ObjectDataSource.DeleteMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to delete data.\n  remarks: \"The business object is assumed to delete data one record at a time, rather than in a batch.  \\n  \\n The DeleteMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n Make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection match the column names that are returned by the select method.  \\n  \\n## Object Lifetime  \\n The method that is identified by the DeleteMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the DeleteMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the DeleteMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the DeleteMethod property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is a `static` (`Shared` in Visual Basic) method, the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.  \\n  \\n## Parameter Merging  \\n Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection from three sources:  \\n  \\n-   From the data-bound control, at run time.  \\n  \\n-   From the `DeleteParameters` element, declaratively.  \\n  \\n-   From the `Deleting` method, declaratively.  \\n  \\n First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, parameters for `Name` and `Number` are added to the collection. The exact name of the parameter depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. The data type of these parameters is `string`. Next, the parameters that are listed in the `DeleteParameters` element are added. If a parameter in the `DeleteParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `DeleteParameters` element. Typically, this is used to modify the type of the data in the parameter. Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.  \\n  \\n## Method Resolution  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `DeleteParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> object then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the DeleteMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose the type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `DeleteARecord`. One `DeleteARecord` has one parameter, `ID`, and the other `DeleteARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection has only one parameter named `ID`, the `DeleteARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the DeleteMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \\n  \\n If you click the **Delete** button, the delete operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindDataException` delegate.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_1.aspx)]  \\n  \\n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_2.cs)]\"\n  syntax:\n    content: public string DeleteMethod { get; set; }\n    return:\n      type: System.String\n      description: A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to delete data. The default is an empty string (\"\").\n  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters\n  id: DeleteParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: DeleteParameters\n  nameWithType: ObjectDataSource.DeleteParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> method.\n  remarks: \"The names and types of the parameters that are contained in the DeleteParameters collection must match the names and types of the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> method signature. The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property and are case-sensitive. The parameters in the collection depend on the data that is in the data-bound control, the parameters that are specified declaratively, and the parameters that are added programmatically. For more information, see \\\"Parameter Merging\\\" in <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> and [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The DeleteParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \\n  \\n The following code example demonstrates how to use the DeleteParameters property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \\n  \\n If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event is called with two parameters. One parameter, `EmpID`, comes from the <xref:System.Web.UI.WebControls.DataGrid> control, and is based on the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The other parameter comes from the declarative DeleteParameters property. The `EmployeeLogic` class overloads the `DeleteEmployee` method. One overload takes a `NorthwindEmployee` parameter, and the other takes an <xref:System.Int32> parameter named `anID`. In the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, the entries in the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property are adjusted to include only one parameter named `anID` with the value from `original_EmpID`. When the event handler exists, the matching `DeleteEmployee` method is called.  \\n  \\n The following code example shows the Web page that displays the <xref:System.Web.UI.WebControls.DataGrid> control and handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_1.aspx)]  \\n  \\n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_2.cs)]\"\n  syntax:\n    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }\n    return:\n      type: System.Web.UI.WebControls.ParameterCollection\n      description: A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains the parameters used by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*> method.\n  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting\n  id: Deleting\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Deleting\n  nameWithType: ObjectDataSource.Deleting\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before a <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> operation.\n  remarks: \"Handle the Deleting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the delete operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  \\n  \\n You can cancel the delete operation by setting the <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> to `true`.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \\n  \\n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_1.aspx)]  \\n  \\n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_2.cs)]\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching\n  id: EnableCaching\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: EnableCaching\n  nameWithType: ObjectDataSource.EnableCaching\n  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value indicating whether the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control has data caching enabled.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports data caching. While data is cached, calls to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieve data from the cache rather than the <xref:System.Web.UI.WebControls.ObjectDataSource> creating an instance of the business object and calling its data method. When the cache expires, the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method retrieves data from the business object, and then caches the data again.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically caches data when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \\n  \\n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \\n  \\n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> property is set to \\\"EmployeeDetails\\\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_1.aspx)]  \\n  \\n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_2.vb)]  \\n  \\n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_3.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_3.cs)]\"\n  syntax:\n    content: public virtual bool EnableCaching { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data caching is enabled for the data source control; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The EnableCaching property is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property returns a <xref href=\"System.Data.Common.DbDataReader\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging\n  id: EnablePaging\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: EnablePaging\n  nameWithType: ObjectDataSource.EnablePaging\n  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a value that indicates whether the data source control supports paging through the set of data that it retrieves.\n  remarks: \"Paging by the <xref:System.Web.UI.WebControls.ObjectDataSource> control is handled by setting the EnablePaging, <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> properties of the <xref:System.Web.UI.WebControls.ObjectDataSource> and defining a select method in the business object with the proper parameters. When the EnablePaging property is set to `true`, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection includes two additional parameters for the first row that is requested and the number of rows that are requested. These two parameters are named as defined by the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> properties. The `Select` method should return the requested number of rows, starting at the specified index. Because the data might not divide evenly by the page size, the last page might contain fewer rows. Thus, the number of rows that are requested is actually the maximum number of rows that are returned.  \\n  \\n When paging is enabled on the associated data-bound control, the data-bound control calls the `Select` method with the start index and number of rows that are required. Additionally, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set, the data-bound control calls the method before rendering the pager controls. For example, if a <xref:System.Web.UI.WebControls.GridView> control has paging enabled with a page size of 5, and the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property returns 20, only 4 pages are displayed in the pager.  \\n  \\n The EnablePaging property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \\n  \\n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose EnablePaging property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_1.aspx)]  \\n  \\n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_2.vb)]  \\n  \\n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_3.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_3.vb)]\"\n  syntax:\n    content: public bool EnablePaging { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the data source control supports paging through the data it retrieves; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression\n  id: FilterExpression\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: FilterExpression\n  nameWithType: ObjectDataSource.FilterExpression\n  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a filtering expression that is applied when the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property is called.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object.  \\n  \\n The syntax that is used for the FilterExpression property is a format string–style expression. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataColumn.Expression%2A> property. If you add parameters to the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection, you can also include format string placeholders. For example, include `\\\"{0}\\\"` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection.  \\n  \\n You can include parameters in the FilterExpression property. If the type of the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required if the parameter is a numeric type.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders that are found in the FilterExpression property.  \\n  \\n The FilterExpression property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n> [!NOTE]\\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the FilterExpression property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.\"\n  example:\n  - \"The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \\n  \\n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, enter the full name of the employee in the <xref:System.Web.UI.WebControls.TextBox>, and then click the **Submit** button.  \\n  \\n The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_1.aspx)]  \\n  \\n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \\n  \\n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \\n  \\n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \\n  \\n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_2.vb)]\"\n  syntax:\n    content: public string FilterExpression { get; set; }\n    return:\n      type: System.String\n      description: A string that represents a filtering expression that is applied when data is retrieved by using the method or function identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.\n  overload: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The FilterExpression property was set and the <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> method does not return a <xref href=\"System.Data.DataSet\"></xref> or <xref href=\"System.Data.DataTable\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering\n  id: Filtering\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Filtering\n  nameWithType: ObjectDataSource.Filtering\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before a filter operation.\n  remarks: \"Handle the Filtering event to perform validation operations on filter parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs a filter operation. You can cancel the selected operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> to `true`. The event is raised only if the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property is set.  \\n  \\n The Filtering event delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters\n  id: FilterParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: FilterParameters\n  nameWithType: ObjectDataSource.FilterParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a collection of parameters that are associated with any parameter placeholders in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> string.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering data only when the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object.  \\n  \\n The syntax that is used for the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> is a format string–style expression. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataColumn.Expression%2A> property. If you add parameters to the FilterParameters collection, you can also include format string placeholders. For example, include `\\\"{0}\\\"` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the FilterParameters collection.  \\n  \\n You can include parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property. If the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required if the parameter is a numeric type.  \\n  \\n The FilterParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> object to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of a middle-tier business object that is used in the first code example.  \\n  \\n The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \\n  \\n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> object that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_1.aspx)]  \\n  \\n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \\n  \\n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \\n  \\n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \\n  \\n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_2.vb)]\"\n  syntax:\n    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }\n    return:\n      type: System.Web.UI.WebControls.ParameterCollection\n      description: A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains a set of parameters associated with any parameter placeholders found in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> property.\n  overload: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: You set the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> method does not return a <xref href=\"System.Data.DataSet\"></xref> or <xref href=\"System.Data.DataTable\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)\n  id: GetView(System.String)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: GetView(String)\n  nameWithType: ObjectDataSource.GetView(String)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Retrieves the named data source view that is associated with the data source control.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one data source view. As with all data source view objects, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the data source control defines its capabilities, performs all the work that is necessary to retrieve data from the underlying data storage, and performs operations such as sorting, inserting, deleting, and updating.  \\n  \\n The GetView method is intended to be called by data-bound controls, not by page code.\"\n  syntax:\n    content: protected override System.Web.UI.DataSourceView GetView (string viewName);\n    parameters:\n    - id: viewName\n      type: System.String\n      description: The name of the view to retrieve. Because the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> supports only one view, `viewName` is ignored.\n    return:\n      type: System.Web.UI.DataSourceView\n      description: The <xref href=\"System.Web.UI.WebControls.ObjectDataSourceView\"></xref> named <xref uid=\"langword_csharp_DefaultView\" name=\"DefaultView\" href=\"\"></xref> that is associated with the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.GetView*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The specified <code>viewName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or something other than <xref uid=\"langword_csharp_DefaultView\" name=\"DefaultView\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames\n  id: GetViewNames\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: GetViewNames()\n  nameWithType: ObjectDataSource.GetViewNames()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Retrieves a collection of names representing the list of view objects that are associated with the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> object.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports only one view, named `DefaultView`, on its underlying data. The GetViewNames method returns a single-element collection of this one view name.  \\n  \\n The GetViewNames method is intended to be called by data-bound controls, not by page code.\"\n  syntax:\n    content: protected override System.Collections.ICollection GetViewNames ();\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> that contains the names of the views associated with the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Insert\n  id: Insert\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Insert()\n  nameWithType: ObjectDataSource.Insert()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Performs an insert operation by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property and any parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters*> collection.\n  remarks: \"Before the Insert operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event to examine the values of the parameters and to perform any preprocessing before an Insert operation. To perform an insert operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> properties. After the Insert operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.  \\n  \\n The Insert method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.  \\n  \\n## Data-Bound Controls  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource> object is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Insert method from page code. The Insert method is invoked directly by the data-bound control instead.\"\n  syntax:\n    content: public int Insert ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A value that represents the number of rows inserted into the underlying data storage.\n  overload: System.Web.UI.WebControls.ObjectDataSource.Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted\n  id: Inserted\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Inserted\n  nameWithType: ObjectDataSource.Inserted\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs when an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*> operation has completed.\n  remarks: \"Handle the Inserted event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting\n  id: Inserting\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Inserting\n  nameWithType: ObjectDataSource.Inserting\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before an <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*> operation.\n  remarks: \"Handle the Inserting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the insert operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \\n  \\n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_1.aspx)]  \\n  \\n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \\n  \\n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \\n  \\n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \\n  \\n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_2.cs)]\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod\n  id: InsertMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: InsertMethod\n  nameWithType: ObjectDataSource.InsertMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to insert data.\n  remarks: \"The business object is assumed to insert data one record at a time, rather than in a batch.  \\n  \\n The InsertMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \\n  \\n## Object Lifetime  \\n The method that is identified by the InsertMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method specified by the InsertMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the InsertMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.  \\n  \\n## Parameter Merging  \\n Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection from three sources:  \\n  \\n-   From the data-bound control, at run time.  \\n  \\n-   From the `InsertParameters` element, declaratively.  \\n  \\n-   From the `Inserting` method, programmatically.  \\n  \\n First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection. For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, the parameters for `Name` and `Number` are added to the collection. The data type of these parameters is `string`. Next, the parameters that are listed in the `InsertParameters` element are added. If a parameter in the `InsertParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `InsertParameters` element. Typically, this is used to modify the type of the data in the parameter. Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the InsertMethod property.  \\n  \\n## Method Resolution  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `InsertParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> object then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the InsertMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `InsertARecord`. One `InsertARecord` has one parameter, `ID`, and the other `InsertARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection has only one parameter named `ID`, the `InsertARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the InsertMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the insert operation.  \\n  \\n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_1.aspx)]  \\n  \\n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \\n  \\n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \\n  \\n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \\n  \\n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_2.cs)]\"\n  syntax:\n    content: public string InsertMethod { get; set; }\n    return:\n      type: System.String\n      description: A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to insert data. The default is an empty string (\"\").\n  overload: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters\n  id: InsertParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: InsertParameters\n  nameWithType: ObjectDataSource.InsertParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property.\n  remarks: \"The names and types of the parameters that are contained in the InsertParameters collection must match the names and types of the parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property signature. The parameter names are case sensitive. When working with data-bound controls that supply parameters, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically merges any parameters that are explicitly specified in the collection with the parameters that are provided by the data-bound control. This is important because data-bound controls always supply their parameters as <xref:System.String> types, and if the method signature includes numeric or date types, you must explicitly include a parameter in the InsertParameters collection with the correct type. Otherwise, the <xref:System.Web.UI.WebControls.ObjectDataSource> control attempts to cast the parameters according to the type that is defined by the parameters in the collection. For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The InsertParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays text boxes in which you can enter data for a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \\n  \\n If you click the **Insert** button, the operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it is passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an <xref:System.Int32>, not as a string.  \\n  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method of the object has a method signature that includes parameters, the InsertParameters collection must contain parameters that have names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_1.aspx)]  \\n  \\n The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  \\n  \\n To run the example, you must have the `NorthwindEmployee` class that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. This example illustrates only how to connect the <xref:System.Web.UI.WebControls.ObjectDataSource> to a business object method that gets data for a new database record by using parameters. The example does not add records to the database, because the `Save` method of the `NorthwindEmployee` class does not include code to update the database.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_2.cs)]\"\n  syntax:\n    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }\n    return:\n      type: System.Web.UI.WebControls.ParameterCollection\n      description: A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains the parameters used by the method identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*> property.\n  overload: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)\n  id: LoadViewState(System.Object)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: LoadViewState(Object)\n  nameWithType: ObjectDataSource.LoadViewState(Object)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Loads the previously saved view state of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control.\n  remarks: \"This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The LoadViewState method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  syntax:\n    content: protected override void LoadViewState (object savedState);\n    parameters:\n    - id: savedState\n      type: System.Object\n      description: An object that contains the saved view state values for the control.\n  overload: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName\n  id: MaximumRowsParameterName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: MaximumRowsParameterName\n  nameWithType: ObjectDataSource.MaximumRowsParameterName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the business object data retrieval method parameter that is used to indicate the number of records to retrieve for data source paging support.\n  remarks: \"The MaximumRowsParameterName property is used to support data source paging. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  \\n  \\n The MaximumRowsParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \\n  \\n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The MaximumRowsParameterName property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_1.aspx)]  \\n  \\n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_2.vb)]  \\n  \\n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_3.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_3.vb)]\"\n  syntax:\n    content: public string MaximumRowsParameterName { get; set; }\n    return:\n      type: System.String\n      description: The name of the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> parameter that is used to indicate the number of records to retrieve. The default is `\"maximumRows\"`.\n  overload: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated\n  id: ObjectCreated\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ObjectCreated\n  nameWithType: ObjectDataSource.ObjectCreated\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs after the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is created.\n  remarks: \"Handle the ObjectCreated event to call other methods on the business object, set properties, or perform other initialization that is specific to the business object before the <xref:System.Web.UI.WebControls.ObjectDataSource> object calls the business object data method to perform a data operation. A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.  \\n  \\n If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> and ObjectCreated events are never raised.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating\n  id: ObjectCreating\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ObjectCreating\n  nameWithType: ObjectDataSource.ObjectCreating\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is created.\n  remarks: \"If the method that is identified to perform the data operation is `static` (`Shared` in Visual Basic), the ObjectCreating and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> events are never raised.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically calls the default constructor of a business object to create an instance of it using reflection. Handle the ObjectCreating event to explicitly call another constructor, and set the instance of the object that results to the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property of the associated <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation.  \\n  \\n> [!NOTE]\\n>  In a production application, multiple requests might end up simultaneously using the same instance. Therefore, the object needs to be implemented in a thread-safe manner.  \\n  \\n This code example demonstrates this pattern. You can handle the ObjectCreating event to check the cache for an object first, and only create an instance of the object, if one is not already cached. Then, handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> method on the object.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_1.aspx)]  \\n  \\n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_2.vb)]\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing\n  id: ObjectDisposing\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ObjectDisposing\n  nameWithType: ObjectDataSource.ObjectDisposing\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*> property is discarded.\n  remarks: \"The ObjectDisposing event is always raised before the instance of the business object is discarded. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called after this event is raised.  \\n  \\n Handle the ObjectDisposing event to call other methods on the object, set properties, or perform clean-up that is specific to the object before the object is destroyed. A reference to the object is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> object.  \\n  \\n When you use a <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class, you must cancel the disposing of the data-context class in an handler for the ObjectDisposing event. This step is necessary because LINQ to SQL supports deferred execution, whereas the <xref:System.Web.UI.WebControls.ObjectDataSource> control tries to dispose the data context after the Select operation.  \\n  \\n For more information about how to handle events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \\n  \\n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache for an object first, and only create an instance of it, if one is not already cached. Then, handle the ObjectDisposing event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call the <xref:System.IDisposable.Dispose%2A> method on the object.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_1.aspx)]  \\n  \\n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_2.vb)]  \\n  \\n The following example shows how to handle the ObjectDisposing event when using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class.  \\n  \\n```vb#  \\nPublic Sub ExampleObjectDisposing(ByVal sender As Object, _   \\n        ByVal e As ObjectDataSourceDisposingEventArgs)  \\n    e.Cancel = True  \\nEnd Sub  \\n```  \\n  \\n```c#  \\npublic void ExampleObjectDisposing(object sender,   \\n        ObjectDataSourceDisposingEventArgs e)  \\n{  \\n    e.Cancel = true;  \\n}  \\n```\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString\n  id: OldValuesParameterFormatString\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: OldValuesParameterFormatString\n  nameWithType: ObjectDataSource.OldValuesParameterFormatString\n  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a format string to apply to the names of the parameters for original values that are passed to the <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref> or <xref uid=\"langword_csharp_Update\" name=\"Update\" href=\"\"></xref> methods.\n  remarks: \"The value of the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property is applied to primary keys only, such as those that are identified with the `DataKeyNames` property of a data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, and the set of original values are passed to the corresponding data method.  \\n  \\n The following are two common scenarios where you might change the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property:  \\n  \\n-   You might want to change the property to differentiate between old and new values in updates. When the <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters for both the original and new values are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Without the formatting string, two parameters with the same name would be created for each data field. By changing the name of the original value parameter, you can compare the data to the original data source to detect conflicts and compare key values.  \\n  \\n-   Some visual designers implement a particular naming scheme for original values and keys.  \\n  \\n The OldValuesParameterFormatString property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  syntax:\n    content: public string OldValuesParameterFormatString { get; set; }\n    return:\n      type: System.String\n      description: A string that represents a format string applied to the names of any <code>oldValues</code> or key parameters passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> or <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> methods. The default is `\"{0}\"`, which means the parameter name is the field name.\n  overload: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)\n  id: OnInit(System.EventArgs)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: OnInit(EventArgs)\n  nameWithType: ObjectDataSource.OnInit(EventArgs)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Adds a <xref href=\"System.Web.UI.Page.LoadComplete\"></xref> event handler to the page that contains the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \\n  \\n The OnInit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected override void OnInit (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains event data.\n  overload: System.Web.UI.WebControls.ObjectDataSource.OnInit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture\n  id: ParsingCulture\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: ParsingCulture\n  nameWithType: ObjectDataSource.ParsingCulture\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a or sets a value that indicates what culture information is used when converting string values to actual property types in order to construct an object of the type indicated by <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>.\n  syntax:\n    content: public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }\n    return:\n      type: System.Web.UI.WebControls.ParsingCulture\n      description: The culture information. The default value is <xref href=\"System.Web.UI.WebControls.ParsingCulture\"></xref>.\n  overload: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState\n  id: SaveViewState\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: SaveViewState()\n  nameWithType: ObjectDataSource.SaveViewState()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Saves the state of the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control.\n  syntax:\n    content: protected override object SaveViewState ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Returns the server control's current view state; otherwise, returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, if there is no view state associated with the control.\n  overload: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Select\n  id: Select\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Select()\n  nameWithType: ObjectDataSource.Select()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Retrieves data from the underlying data storage by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property with the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters*> collection.\n  remarks: \"The specified method might have any method signature, but it must return or be derived from one of the types listed in the following table for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully.  \\n  \\n|Return type|Action|  \\n|-----------------|------------|  \\n|<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the Select method.|  \\n|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created by using the <xref:System.Data.DataTable> and returned by the Select method.|  \\n|<xref:System.Data.DataView>|The <xref:System.Data.DataView> is returned by the Select method.|  \\n|<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted and a <xref:System.Data.DataView> is created and returned by the Select method.|  \\n|<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> collection and returned by the Select method.|  \\n  \\n The method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property is called, except that the same instance is used to call the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property and the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property. The Select method returns an <xref:System.Collections.IEnumerable> interface. However, to enable caching and filtering scenarios, the return value must be a <xref:System.Data.DataSet> object. While the <xref:System.Data.DataSet> class does not implement the <xref:System.Collections.IEnumerable> interface, the <xref:System.Web.UI.WebControls.ObjectDataSource> control automatically extracts the default <xref:System.Data.DataView> control, which implements the <xref:System.Collections.IEnumerable>.  \\n  \\n Before the Select operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event to examine the values of the parameters and to perform any preprocessing before a Select operation. To perform a data retrieval operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> properties. After the Select operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, or <xref:System.Data.DataView> object and caching is enabled, the <xref:System.Web.UI.WebControls.ObjectDataSource> retrieves data from and saves data to the cache during the Select operation. The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property returns a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object, and a <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property has been specified, it is evaluated with any supplied <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> properties and the resulting filter is applied to the list of data during the Select operation.  \\n  \\n The Select method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.  \\n  \\n## Data-Bound Controls  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Select method from page code. The Select method is invoked directly by the data-bound control instead.\"\n  example:\n  - For a code example, see <xref:System.Web.UI.WebControls.ObjectDataSource>.\n  syntax:\n    content: public System.Collections.IEnumerable Select ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerable\n      description: An <xref:System.Collections.IEnumerable> list of data rows.\n  overload: System.Web.UI.WebControls.ObjectDataSource.Select*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod\n  id: SelectCountMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: SelectCountMethod\n  nameWithType: ObjectDataSource.SelectCountMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to retrieve a row count.\n  remarks: \"The SelectCountMethod property identifies a business object method that is used to retrieve a total row count, to support data source paging. The SelectCountMethod property is evaluated only if the <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`.  \\n  \\n The SelectCountMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \\n  \\n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The SelectCountMethod property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_1.aspx)]  \\n  \\n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_2.vb)]  \\n  \\n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the SelectCountMethod property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_3.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_3.vb)]\"\n  syntax:\n    content: public string SelectCountMethod { get; set; }\n    return:\n      type: System.String\n      description: A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to retrieve a row count. The method must return an integer (<xref:System.Int32>). The default is an empty string (\"\").\n  overload: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Selected\n  id: Selected\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Selected\n  nameWithType: ObjectDataSource.Selected\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs when a <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> operation has completed.\n  remarks: \"Handle the Selected event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after a <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \\n  \\n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_1.aspx)]  \\n  \\n The second example shows handlers for the Selected and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The Selected event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_2.cs)]  \\n  \\n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_3.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_3.cs)]\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting\n  id: Selecting\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Selecting\n  nameWithType: ObjectDataSource.Selecting\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before a <xref:System.Web.UI.WebControls.ObjectDataSource.Select*> operation.\n  remarks: \"Handle the Selecting event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the data retrieval operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  \\n  \\n This event can be fired twice for a single call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set. The <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> object is used to determine if select was called to retrieve data or retrieve the count.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod\n  id: SelectMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: SelectMethod\n  nameWithType: ObjectDataSource.SelectMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to retrieve data.\n  remarks: \"The specified method can have any method signature, but it must return one of the types shown in the following table for the <xref:System.Web.UI.WebControls.ObjectDataSource> control to call it successfully.  \\n  \\n|Return type|Action|  \\n|-----------------|------------|  \\n|<xref:System.Collections.IEnumerable>|The <xref:System.Collections.IEnumerable> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|  \\n|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> is created using the <xref:System.Data.DataTable> and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|  \\n|<xref:System.Data.DataView>|A <xref:System.Data.DataView> is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|  \\n|<xref:System.Data.DataSet>|The first <xref:System.Data.DataTable> of the <xref:System.Data.DataSet> is extracted, and a <xref:System.Data.DataView> is created and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|  \\n|<xref:System.Object>|The object is wrapped in a one-element <xref:System.Collections.IEnumerable> collection and returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method.|  \\n  \\n The SelectMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n When you use the <xref:System.Web.UI.WebControls.ObjectDataSource> class to delete or update data, make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection or <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection match the column names that are returned by the select method.  \\n  \\n## Object Lifetime  \\n The method that is identified by the SelectMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method that is specified by the SelectMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the method that is specified by the SelectMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the SelectMethod property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.  \\n  \\n## Parameter Merging  \\n Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection from these sources:  \\n  \\n-   Declaratively from the `SelectParameters` element.  \\n  \\n-   Programmatically from the `Selecting` method.  \\n  \\n First, the parameters listed in the `SelectParameters` element are added. Second, parameters are programmatically added and removed in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the SelectMethod property.  \\n  \\n## Method Resolution  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `SelectParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> control then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the SelectMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `SelectARecord`. One `SelectARecord` has one parameter, `ID`, and the other `SelectARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> collection has only one parameter named `ID`, the `SelectARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the SelectMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.\"\n  example:\n  - \"The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the method that is specified by the SelectMethod property, and displays the data.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_540_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_540_1.aspx)]\"\n  syntax:\n    content: public string SelectMethod { get; set; }\n    return:\n      type: System.String\n      description: A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to retrieve data. The default is an empty string (\"\").\n  overload: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters\n  id: SelectParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: SelectParameters\n  nameWithType: ObjectDataSource.SelectParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets a collection of parameters that are used by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.\n  remarks: \"The SelectParameters property gets the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n You add parameters to the SelectParameters collection declaratively by using the `SelectParameters` element or programmatically in the handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event. At run time, parameters listed in the `SelectParameters` element are added to the collection first. Parameters in the collection are then added or removed by the handler for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event is raised before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run.  \\n  \\n Before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is run, the names and types of the parameters that are contained in the SelectParameters collection must match the signature of the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. For example, if a select method named `GetEmployeesByStateAndAge` takes a `string` and an integer as parameters, the SelectParameters collection must contain two parameters. The first parameter must resolve to a string and the second parameter must resolve to an integer. Both parameters can be specified in markup in the `SelectParameters` element. Alternatively, they can be can be added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler, or one parameter can be added in markup and the other one can be added programmatically.  \\n  \\n For more information, see [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md) and the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> property.  \\n  \\n> [!IMPORTANT]\\n>  In the code for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> event handler or in the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, make sure that you validate any parameter value that is received from the client.\"\n  example:\n  - \"The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control and display it in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> control retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a `QueryStringParameter` element in markup to create a <xref:System.Web.UI.WebControls.QueryStringParameter> object that will retrieve the value of a specified query-string parameter from the URL and pass it to the `GetEmployee` method.  \\n  \\n Other parameter classes can be used to retrieve values from other sources, such as control properties, form fields, cookies, ASP.NET profile data, or session state. You can also use a parameter object that is defined in markup in order to pass a hard-coded value to the select method. For more information about parameter classes that are available, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  \\n  \\n To run this example, you will need the following:  \\n  \\n-   A Web site that has a connection string named `NorthwindConnection` that connects to the Northwind Traders database. For more information, see the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview.  \\n  \\n-   The `EmployeeLogic` class that is shown as one of the code examples for the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. The class file must be located in the App_Code folder.  \\n  \\n-   The sample code can be run as an .aspx page. If you request the page without a query-string parameter, an error message is displayed. If you request the page using a query string such as `?empid=1` after the name of the .aspx file, you will see the details for the requested employee.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1025_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1025_1.aspx)]\"\n  syntax:\n    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }\n    return:\n      type: System.Web.UI.WebControls.ParameterCollection\n      description: A collection of parameters that are used by the method specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> property.\n  overload: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName\n  id: SortParameterName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: SortParameterName\n  nameWithType: ObjectDataSource.SortParameterName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the business object that the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> parameter used to specify a sort expression for data source sorting support.\n  remarks: \"The SortParameterName property is used to support data source sorting. When a <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> property is set on the <xref:System.Web.UI.DataSourceSelectArguments> object and passed to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method, the SortParameterName value identifies the parameter name of the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> business object method according to which the data is sorted.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource> is associated with a data-bound control, the values that are passed to this parameter take the form of comma-separated field values followed by `\\\"ASC\\\"` or `\\\"DESC\\\"`. For example, the value for an ascending sort on `Name` would be `\\\"Name ASC\\\"`.  \\n  \\n The SortParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to implement a type that supports sorting. The second code example demonstrates how to implement a sort expression.  \\n  \\n The following code example demonstrates how to implement a type that supports sorting. The `SelectMethod` of the `SortingData` class takes a parameter, `sortExpression`. The string that is passed to `SelectMethod` is used for the <xref:System.Data.DataView.Sort%2A> property of the <xref:System.Data.DataView> object that is returned by `SelectMethod`.  \\n  \\n [!code-cs[ObjectDataSourceSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_1.cs)]\\n [!code-vb[ObjectDataSourceSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_1.vb)]  \\n  \\n The following code example demonstrates how to implement a sort expression. The code in the Web page creates an instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property is set to `SortingData` and the SortParameterName property is set to `sortExpression`. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true`. When the user clicks the **Sort** button, the field name, `Name` or `Number`, is passed to `SelectMethod` in the sort parameter.  \\n  \\n [!code-cs[ObjectDataSourceSorting#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_2.aspx)]\\n [!code-vb[ObjectDataSourceSorting#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_2.aspx)]\"\n  syntax:\n    content: public string SortParameterName { get; set; }\n    return:\n      type: System.String\n      description: The name of the method parameter used to indicate the parameter which is used to sort the data. The default is an empty string.\n  overload: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency\n  id: SqlCacheDependency\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: SqlCacheDependency\n  nameWithType: ObjectDataSource.SqlCacheDependency\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets a semicolon-delimited string that indicates which databases and tables to use for the Microsoft SQL Server cache dependency.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control supports an optional expiration policy that is based on the <xref:System.Web.Caching.SqlCacheDependency> object for the data cache (the service must be configured for the database server).  \\n  \\n SQL Server supports two mechanisms for cache invalidation: polling and notification. Each mechanism has a different syntax for the <xref:System.Web.Caching.SqlCacheDependency> object.  \\n  \\n The <xref:System.Web.UI.WebControls.ObjectDataSource> supports only polling. The <xref:System.Web.Caching.SqlCacheDependency> string is used to create a <xref:System.Data.SqlClient.SqlDependency> object that is passed to the <xref:System.Data.Common.DbCommand> constructor before the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method is executed. The SqlCacheDependency string identifies databases and tables according to the same format that is used by the `@ Page` directive, where the first part of the string is a connection string to a SQL Server database, followed by a colon delimiter, and finally the name of the database table (for example, `\\\"connectionstring1:table1\\\"`). If the SqlCacheDependency property depends on more than one table, the connection string and table name pairs are separated by semicolons (for example, `\\\"connectionstring1:table1\\\";connectionstring2:table2\\\"`).  \\n  \\n To support notification, you must write the cache logic in the implementation of your <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property and handle the construction of the <xref:System.Web.Caching.SqlCacheDependency> object in your code.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> object. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \\n  \\n The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is expired and a new set of data is retrieved on the next request for the page.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_1.aspx)]  \\n  \\n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_2.cs)]\"\n  syntax:\n    content: public virtual string SqlCacheDependency { get; set; }\n    return:\n      type: System.String\n      description: A string that indicates which databases and tables to use for the SQL Server cache dependency.\n  overload: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName\n  id: StartRowIndexParameterName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: StartRowIndexParameterName\n  nameWithType: ObjectDataSource.StartRowIndexParameterName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the data retrieval method parameter that is used to indicate the value of the identifier of the first record to retrieve for data source paging support.\n  remarks: \"The StartRowIndexParameterName property is used to support data source paging. For information about how paging is supported by the <xref:System.Web.UI.WebControls.ObjectDataSource> control, see <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.  \\n  \\n The StartRowIndexParameterName property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \\n  \\n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the StartRowIndexParameterName property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_1.aspx)]  \\n  \\n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_2.vb)]  \\n  \\n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_3.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_3.vb)]\"\n  syntax:\n    content: public string StartRowIndexParameterName { get; set; }\n    return:\n      type: System.String\n      description: The name of the business object method parameter used to indicate the first record to retrieve. The parameter must return an integer value. The default is `\"startRowIndex\"`.\n  overload: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState\n  id: TrackViewState\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: TrackViewState()\n  nameWithType: ObjectDataSource.TrackViewState()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Tracks view-state changes to the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control so that they can be stored in the <xref href=\"System.Web.UI.StateBag\"></xref> object.\n  remarks: The TrackViewState method is overridden to mark the starting point to begin tracking and saving changes to the control as part of the view state for the object.\n  syntax:\n    content: protected override void TrackViewState ();\n    parameters: []\n  overload: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName\n  id: TypeName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: TypeName\n  nameWithType: ObjectDataSource.TypeName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the class that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> object represents.\n  remarks: \"To create an instance of the object that the <xref:System.Web.UI.WebControls.ObjectDataSource> control binds to, the control uses reflection to load the type that is identified by the type name at run time. Therefore, the value of the TypeName property can be a partially qualified type for code that is located in the Bin or App_Code directories or a fully qualified type name for code that is registered in the global assembly cache. If you use the global assembly cache, you must add the appropriate reference to the `assemblies` section of the Machine.config or Web.config file.  \\n  \\n The type must have a default constructor, unless you handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to create an instance of it yourself. An instance of the type is created for each call to the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, and <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> methods, if the methods on the type are member methods. An instance is not created if the methods are `static` (`Shared` in Visual Basic). If the type implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed.\"\n  example:\n  - \"The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data by using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, and displays the data.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_1.aspx)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_1.aspx)]  \\n  \\n The following example shows the class that the TypeName property value refers to.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_2.vb)]\"\n  syntax:\n    content: public string TypeName { get; set; }\n    return:\n      type: System.String\n      description: A partially or fully qualified class name that identifies the type of the object that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> represents. The default is an empty string (\"\").\n  overload: System.Web.UI.WebControls.ObjectDataSource.TypeName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Update\n  id: Update\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Update()\n  nameWithType: ObjectDataSource.Update()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Performs an update operation by calling the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property and any parameters that are in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*> collection.\n  remarks: \"The business object is assumed to update data one record at a time, rather than in a batch.  \\n  \\n Before the Update operation is performed, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event to examine the values of the parameters and to perform any preprocessing before an Update operation. To perform an update operation, the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object uses reflection to create an instance of the object that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property. It then calls the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property, using any associated <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> properties. After the Update operation completes, the <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> method is called to raise the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> event to examine any return values, output parameters, and exceptions, and to perform any post-processing.  \\n  \\n The Update method delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> method of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property.  \\n  \\n## Data-Bound Controls  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource> control is associated with a data-bound control, such as the <xref:System.Web.UI.WebControls.GridView> control, it is not necessary to call the Update method from page code. The Update method is invoked directly by the data-bound control instead.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \\n  \\n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the Update operation is enabled only after an employee is selected.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_1.aspx)]  \\n  \\n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_2.vb)]\"\n  syntax:\n    content: public int Update ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A value that represents the number of rows updated in the underlying data storage.\n  overload: System.Web.UI.WebControls.ObjectDataSource.Update*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Updated\n  id: Updated\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Updated\n  nameWithType: ObjectDataSource.Updated\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs when an <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> operation has completed.\n  remarks: \"Handle the Updated event to examine the values of a return value or output parameters, or to determine whether an exception was thrown after an <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation has completed. The return value, output parameters, and exception handling properties are available from the <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> object that is associated with the event.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod\n  id: UpdateMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: UpdateMethod\n  nameWithType: ObjectDataSource.UpdateMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets or sets the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> control invokes to update data.\n  remarks: \"The <xref:System.Web.UI.WebControls.ObjectDataSource> control assumes that the method that is identified by the UpdateMethod property performs updates one at a time, rather than in a batch.  \\n  \\n The UpdateMethod property delegates to the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n Make sure that the parameter names configured for the <xref:System.Web.UI.WebControls.ObjectDataSource> control in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection match the column names that are returned by the select method.  \\n  \\n## Object Lifetime  \\n The method that is identified by the UpdateMethod property can be an instance method or a `static` (`Shared` in Visual Basic) method. If it is an instance method, the business object is created and destroyed each time the method that is specified by the UpdateMethod property is called. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> events to work with the business object before the method that is specified by the UpdateMethod property is called. You can also handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event that is raised after the method that is specified by the UpdateMethod property is called. If the business object implements the <xref:System.IDisposable> interface, the <xref:System.IDisposable.Dispose%2A> method is called before the object is destroyed. If the method is `static` (`Shared` in Visual Basic), the business object is never created and you cannot handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, and <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> events.  \\n  \\n## Parameter Merging  \\n Parameters are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection from three sources:  \\n  \\n-   From the data-bound control, at run time.  \\n  \\n-   From the `UpdateParameters` element, declaratively.  \\n  \\n-   From the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler, programmatically.  \\n  \\n First, any parameters that are generated from data-bound controls are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. For example, if the <xref:System.Web.UI.WebControls.ObjectDataSource> control is bound to a <xref:System.Web.UI.WebControls.GridView> control that has the columns `Name` and `Number`, the parameters for `Name` and `Number` are added to the collection. The exact name of the parameter depends on the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property. The data type of these parameters is `string`. Next, the parameters that are listed in the `UpdateParameters` element are added. If a parameter in the `UpdateParameters` element is found with the same name as a parameter that is already in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection, the existing parameter is modified to match the parameter that is specified in the `UpdateParameters` element. Typically, this is used to modify the type of the data in the parameter. Finally, you can programmatically add and remove parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event, which occurs before the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is run. The method is resolved after the parameters are merged. Method resolution is discussed in the next section.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the UpdateMethod property.  \\n  \\n## Method Resolution  \\n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> method is called, the data fields from the data-bound control, the parameters that were created declaratively in the `UpdateParameters` element, and the parameters that were added in the <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler are all merged. (For more information, see the preceding section.) The <xref:System.Web.UI.WebControls.ObjectDataSource> control then attempts to find a method to call. First, it looks for one or more methods with the name that is specified in the UpdateMethod property. If no match is found, an <xref:System.InvalidOperationException> exception is thrown. If a match is found, it then looks for matching parameter names. For example, suppose a type that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property has two methods named `UpdateARecord`. One `UpdateARecord` has one parameter, `ID`, and the other `UpdateARecord` has two parameters, `Name` and `Number`. If the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection has only one parameter named `ID`, the `UpdateARecord` method with just the `ID` parameter is called. The type of the parameter is not checked in resolving the methods. The order of the parameters does not matter.  \\n  \\n If the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property is set, the method is resolved in a different way. The <xref:System.Web.UI.WebControls.ObjectDataSource> looks for a method with the name that is specified in the UpdateMethod property that takes one parameter of the type that is specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> property. In this case, the name of the parameter does not matter.\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \\n  \\n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_1.aspx)]  \\n  \\n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_2.cs)]  \\n  \\n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_3.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_3.cs)]\"\n  syntax:\n    content: public string UpdateMethod { get; set; }\n    return:\n      type: System.String\n      description: A string that represents the name of the method or function that the <xref href=\"System.Web.UI.WebControls.ObjectDataSource\"></xref> uses to update data. The default is an empty string.\n  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters\n  id: UpdateParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: UpdateParameters\n  nameWithType: ObjectDataSource.UpdateParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Gets the parameters collection that contains the parameters that are used by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property.\n  remarks: \"The names and types of the parameters that are contained in the UpdateParameters collection must match the names and types of the parameters in the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> method signature. The parameter names are affected by the <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> property and are case-sensitive. The parameters in the collection depend on the data in the data-bound control, the parameters that are specified declaratively, and the parameters that are added programmatically. For more information, see the \\\"Parameter Merging\\\" section in <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> and [Using Parameters with the ObjectDataSource Control](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The UpdateParameters property retrieves the <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.ObjectDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \\n  \\n For more information about parameter merging, object lifetime, and method resolution, see <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.  \\n  \\n> [!IMPORTANT]\\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> property.\"\n  example:\n  - \"This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \\n  \\n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation is enabled only after an employee is selected.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_1.aspx)]  \\n  \\n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_2.cs)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_2.vb)]\"\n  syntax:\n    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }\n    return:\n      type: System.Web.UI.WebControls.ParameterCollection\n      description: A <xref href=\"System.Web.UI.WebControls.ParameterCollection\"></xref> that contains the parameters used by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*> property.\n  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.ObjectDataSource.Updating\n  id: Updating\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  langs:\n  - csharp\n  name: Updating\n  nameWithType: ObjectDataSource.Updating\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating\n  type: Event\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls\n  summary: Occurs before an <xref:System.Web.UI.WebControls.ObjectDataSource.Update*> operation.\n  remarks: \"Handle the Updating event to perform additional initialization that is specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.ObjectDataSource> control performs the update operation. The parameters are available as an <xref:System.Collections.IDictionary> collection that is accessed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property, which is exposed by the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> object.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \\n  \\n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \\n  \\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_1.aspx)]\\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_1.aspx)]  \\n  \\n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and Updating events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The Updating event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_2.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_2.cs)]  \\n  \\n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \\n  \\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_3.vb)]\\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_3.cs)]\"\n  syntax:\n    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;\n    return:\n      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.DataSourceControl\n  isExternal: false\n  name: System.Web.UI.DataSourceControl\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ObjectDataSource()\n  nameWithType: ObjectDataSource.ObjectDataSource()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()\n- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ObjectDataSource(String,String)\n  nameWithType: ObjectDataSource.ObjectDataSource(String,String)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: CacheDuration\n  nameWithType: ObjectDataSource.CacheDuration\n  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: CacheExpirationPolicy\n  nameWithType: ObjectDataSource.CacheExpirationPolicy\n  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy\n- uid: System.Web.UI.DataSourceCacheExpiry\n  parent: System.Web.UI\n  isExternal: false\n  name: DataSourceCacheExpiry\n  nameWithType: DataSourceCacheExpiry\n  fullName: System.Web.UI.DataSourceCacheExpiry\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: CacheKeyDependency\n  nameWithType: ObjectDataSource.CacheKeyDependency\n  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency\n- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ConflictDetection\n  nameWithType: ObjectDataSource.ConflictDetection\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection\n- uid: System.Web.UI.ConflictOptions\n  parent: System.Web.UI\n  isExternal: false\n  name: ConflictOptions\n  nameWithType: ConflictOptions\n  fullName: System.Web.UI.ConflictOptions\n- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ConvertNullToDBNull\n  nameWithType: ObjectDataSource.ConvertNullToDBNull\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: DataObjectTypeName\n  nameWithType: ObjectDataSource.DataObjectTypeName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName\n- uid: System.Web.UI.WebControls.ObjectDataSource.Delete\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Delete()\n  nameWithType: ObjectDataSource.Delete()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()\n- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Deleted\n  nameWithType: ObjectDataSource.Deleted\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted\n- uid: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ObjectDataSourceStatusEventHandler\n  nameWithType: ObjectDataSourceStatusEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: DeleteMethod\n  nameWithType: ObjectDataSource.DeleteMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: DeleteParameters\n  nameWithType: ObjectDataSource.DeleteParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters\n- uid: System.Web.UI.WebControls.ParameterCollection\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ParameterCollection\n  nameWithType: ParameterCollection\n  fullName: System.Web.UI.WebControls.ParameterCollection\n- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Deleting\n  nameWithType: ObjectDataSource.Deleting\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting\n- uid: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ObjectDataSourceMethodEventHandler\n  nameWithType: ObjectDataSourceMethodEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler\n- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: EnableCaching\n  nameWithType: ObjectDataSource.EnableCaching\n  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching\n- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: EnablePaging\n  nameWithType: ObjectDataSource.EnablePaging\n  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging\n- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: FilterExpression\n  nameWithType: ObjectDataSource.FilterExpression\n  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression\n- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Filtering\n  nameWithType: ObjectDataSource.Filtering\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering\n- uid: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ObjectDataSourceFilteringEventHandler\n  nameWithType: ObjectDataSourceFilteringEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler\n- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: FilterParameters\n  nameWithType: ObjectDataSource.FilterParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: GetView(String)\n  nameWithType: ObjectDataSource.GetView(String)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)\n- uid: System.Web.UI.DataSourceView\n  parent: System.Web.UI\n  isExternal: false\n  name: DataSourceView\n  nameWithType: DataSourceView\n  fullName: System.Web.UI.DataSourceView\n- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: GetViewNames()\n  nameWithType: ObjectDataSource.GetViewNames()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Web.UI.WebControls.ObjectDataSource.Insert\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Insert()\n  nameWithType: ObjectDataSource.Insert()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()\n- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Inserted\n  nameWithType: ObjectDataSource.Inserted\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted\n- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Inserting\n  nameWithType: ObjectDataSource.Inserting\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting\n- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: InsertMethod\n  nameWithType: ObjectDataSource.InsertMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: InsertParameters\n  nameWithType: ObjectDataSource.InsertParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: LoadViewState(Object)\n  nameWithType: ObjectDataSource.LoadViewState(Object)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: MaximumRowsParameterName\n  nameWithType: ObjectDataSource.MaximumRowsParameterName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName\n- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ObjectCreated\n  nameWithType: ObjectDataSource.ObjectCreated\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated\n- uid: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ObjectDataSourceObjectEventHandler\n  nameWithType: ObjectDataSourceObjectEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler\n- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ObjectCreating\n  nameWithType: ObjectDataSource.ObjectCreating\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating\n- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ObjectDisposing\n  nameWithType: ObjectDataSource.ObjectDisposing\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing\n- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ObjectDataSourceDisposingEventHandler\n  nameWithType: ObjectDataSourceDisposingEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\n- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: OldValuesParameterFormatString\n  nameWithType: ObjectDataSource.OldValuesParameterFormatString\n  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString\n- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: OnInit(EventArgs)\n  nameWithType: ObjectDataSource.OnInit(EventArgs)\n  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ParsingCulture\n  nameWithType: ObjectDataSource.ParsingCulture\n  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture\n- uid: System.Web.UI.WebControls.ParsingCulture\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ParsingCulture\n  nameWithType: ParsingCulture\n  fullName: System.Web.UI.WebControls.ParsingCulture\n- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SaveViewState()\n  nameWithType: ObjectDataSource.SaveViewState()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()\n- uid: System.Web.UI.WebControls.ObjectDataSource.Select\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Select()\n  nameWithType: ObjectDataSource.Select()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SelectCountMethod\n  nameWithType: ObjectDataSource.SelectCountMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.Selected\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Selected\n  nameWithType: ObjectDataSource.Selected\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected\n- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Selecting\n  nameWithType: ObjectDataSource.Selecting\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting\n- uid: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler\n  parent: System.Web.UI.WebControls\n  isExternal: false\n  name: ObjectDataSourceSelectingEventHandler\n  nameWithType: ObjectDataSourceSelectingEventHandler\n  fullName: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SelectMethod\n  nameWithType: ObjectDataSource.SelectMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SelectParameters\n  nameWithType: ObjectDataSource.SelectParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SortParameterName\n  nameWithType: ObjectDataSource.SortParameterName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName\n- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SqlCacheDependency\n  nameWithType: ObjectDataSource.SqlCacheDependency\n  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency\n- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: StartRowIndexParameterName\n  nameWithType: ObjectDataSource.StartRowIndexParameterName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName\n- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: TrackViewState()\n  nameWithType: ObjectDataSource.TrackViewState()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()\n- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: TypeName\n  nameWithType: ObjectDataSource.TypeName\n  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName\n- uid: System.Web.UI.WebControls.ObjectDataSource.Update\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Update()\n  nameWithType: ObjectDataSource.Update()\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()\n- uid: System.Web.UI.WebControls.ObjectDataSource.Updated\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Updated\n  nameWithType: ObjectDataSource.Updated\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated\n- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: UpdateMethod\n  nameWithType: ObjectDataSource.UpdateMethod\n  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: UpdateParameters\n  nameWithType: ObjectDataSource.UpdateParameters\n  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.Updating\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Updating\n  nameWithType: ObjectDataSource.Updating\n  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating\n- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ObjectDataSource\n  nameWithType: ObjectDataSource.ObjectDataSource\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: CacheDuration\n  nameWithType: ObjectDataSource.CacheDuration\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: CacheExpirationPolicy\n  nameWithType: ObjectDataSource.CacheExpirationPolicy\n- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: CacheKeyDependency\n  nameWithType: ObjectDataSource.CacheKeyDependency\n- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ConflictDetection\n  nameWithType: ObjectDataSource.ConflictDetection\n- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ConvertNullToDBNull\n  nameWithType: ObjectDataSource.ConvertNullToDBNull\n- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: DataObjectTypeName\n  nameWithType: ObjectDataSource.DataObjectTypeName\n- uid: System.Web.UI.WebControls.ObjectDataSource.Delete*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Delete\n  nameWithType: ObjectDataSource.Delete\n- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: DeleteMethod\n  nameWithType: ObjectDataSource.DeleteMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: DeleteParameters\n  nameWithType: ObjectDataSource.DeleteParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: EnableCaching\n  nameWithType: ObjectDataSource.EnableCaching\n- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: EnablePaging\n  nameWithType: ObjectDataSource.EnablePaging\n- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: FilterExpression\n  nameWithType: ObjectDataSource.FilterExpression\n- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: FilterParameters\n  nameWithType: ObjectDataSource.FilterParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.GetView*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: GetView\n  nameWithType: ObjectDataSource.GetView\n- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: GetViewNames\n  nameWithType: ObjectDataSource.GetViewNames\n- uid: System.Web.UI.WebControls.ObjectDataSource.Insert*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Insert\n  nameWithType: ObjectDataSource.Insert\n- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: InsertMethod\n  nameWithType: ObjectDataSource.InsertMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: InsertParameters\n  nameWithType: ObjectDataSource.InsertParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: LoadViewState\n  nameWithType: ObjectDataSource.LoadViewState\n- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: MaximumRowsParameterName\n  nameWithType: ObjectDataSource.MaximumRowsParameterName\n- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: OldValuesParameterFormatString\n  nameWithType: ObjectDataSource.OldValuesParameterFormatString\n- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: OnInit\n  nameWithType: ObjectDataSource.OnInit\n- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: ParsingCulture\n  nameWithType: ObjectDataSource.ParsingCulture\n- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SaveViewState\n  nameWithType: ObjectDataSource.SaveViewState\n- uid: System.Web.UI.WebControls.ObjectDataSource.Select*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Select\n  nameWithType: ObjectDataSource.Select\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SelectCountMethod\n  nameWithType: ObjectDataSource.SelectCountMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SelectMethod\n  nameWithType: ObjectDataSource.SelectMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SelectParameters\n  nameWithType: ObjectDataSource.SelectParameters\n- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SortParameterName\n  nameWithType: ObjectDataSource.SortParameterName\n- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: SqlCacheDependency\n  nameWithType: ObjectDataSource.SqlCacheDependency\n- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: StartRowIndexParameterName\n  nameWithType: ObjectDataSource.StartRowIndexParameterName\n- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: TrackViewState\n  nameWithType: ObjectDataSource.TrackViewState\n- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: TypeName\n  nameWithType: ObjectDataSource.TypeName\n- uid: System.Web.UI.WebControls.ObjectDataSource.Update*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: Update\n  nameWithType: ObjectDataSource.Update\n- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: UpdateMethod\n  nameWithType: ObjectDataSource.UpdateMethod\n- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*\n  parent: System.Web.UI.WebControls.ObjectDataSource\n  isExternal: false\n  name: UpdateParameters\n  nameWithType: ObjectDataSource.UpdateParameters\n"}