{"nodes":[{"pos":[680,880],"content":"Represents a code group whose policy statement is the union of the current code group's policy statement and the policy statement of all its matching child code groups. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a code group whose policy statement is the union of the current code group's policy statement and the policy statement of all its matching child code groups. This class cannot be inherited.","pos":[0,200],"nodes":[{"content":"Represents a code group whose policy statement is the union of the current code group's policy statement and the policy statement of all its matching child code groups.","pos":[0,168]},{"content":"This class cannot be inherited.","pos":[169,200]}]}]},{"pos":[893,1900],"content":"Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups (and so on), forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it or not, based on the evidence for that assembly. Only code groups whose membership conditions match a given assembly and their child code groups apply policy.       UnionCodeGroup is the most common type of code group; the policy statement of all matching child code groups (and by extension their child code groups) are combined with the permission set of the matching parent code group. Thus, if its membership condition matches, this code group forms the union of its policy statement and those of all its child code groups that also match the evidence.       UnionCodeGroup code groups are the code groups created by the CASPOL utility (see [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md)).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Code groups are the building blocks of code access security policy.","pos":[0,67]},{"content":"Each policy level consists of a root code group that can have child code groups (and so on), forming a tree.","pos":[68,176]},{"content":"Each code group has a membership condition that determines if a given assembly belongs to it or not, based on the evidence for that assembly.","pos":[177,318]},{"content":"Only code groups whose membership conditions match a given assembly and their child code groups apply policy.","pos":[319,428]},{"content":"UnionCodeGroup is the most common type of code group; the policy statement of all matching child code groups (and by extension their child code groups) are combined with the permission set of the matching parent code group.","pos":[435,658]},{"content":"Thus, if its membership condition matches, this code group forms the union of its policy statement and those of all its child code groups that also match the evidence.","pos":[659,826]},{"content":"UnionCodeGroup code groups are the code groups created by the CASPOL utility (see <bpt id=\"p1\">[</bpt>Caspol.exe (Code Access Security Policy Tool)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>).","pos":[833,1003],"source":"       UnionCodeGroup code groups are the code groups created by the CASPOL utility (see [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md))."}]},{"pos":[4280,4379],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.UnionCodeGroup\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Policy.UnionCodeGroup\"></xref> class."},{"pos":[4391,4603],"content":"This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups by using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups by using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.","pos":[0,212],"nodes":[{"content":"This constructor creates a basic code group and should be called from the constructors of custom code groups.","pos":[0,109]},{"content":"You can add child code groups by using the &lt;xref:System.Security.Policy.CodeGroup.AddChild%2A&gt; method.","pos":[110,212],"source":" You can add child code groups by using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method."}]}]},{"pos":[4884,4979],"content":"A membership condition that tests evidence to determine whether this code group applies policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"A membership condition that tests evidence to determine whether this code group applies policy.","pos":[0,95]}]},{"pos":[5067,5206],"content":"The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.","needQuote":true,"needEscape":true,"nodes":[{"content":"The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.","pos":[0,139]}]},{"pos":[5373,5526],"content":"The type of the <code>membershipCondition</code> parameter is not valid.       -or-       The type of the <code>policy</code> parameter is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">membershipCondition</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[0,72],"source":"The type of the <code>membershipCondition</code> parameter is not valid."},{"content":"-or-       The type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[79,149],"source":"       -or-       The type of the <code>policy</code> parameter is not valid."}]},{"pos":[5879,5923],"content":"Makes a deep copy of the current code group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Makes a deep copy of the current code group.","pos":[0,44]}]},{"pos":[5935,6052],"content":"This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.","pos":[0,117]}]},{"pos":[6229,6333],"content":"An equivalent copy of the current code group, including its membership conditions and child code groups.","needQuote":true,"needEscape":true,"nodes":[{"content":"An equivalent copy of the current code group, including its membership conditions and child code groups.","pos":[0,104]}]},{"pos":[6784,6805],"content":"Gets the merge logic.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the merge logic.","pos":[0,21]}]},{"pos":[6929,6955],"content":"Always the string \"Union\".","needQuote":true,"needEscape":true,"nodes":[{"content":"Always the string \"Union\".","pos":[0,26]}]},{"pos":[7491,7568],"content":"Resolves policy for the code group and its descendants for a set of evidence.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves policy for the code group and its descendants for a set of evidence.","pos":[0,77]}]},{"pos":[7581,8964],"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.       For union code groups, all child code groups whose membership condition match the evidence are also resolved, and all resulting policy statements form a union with the policy statement of the parent union code group. Each child code group type determines how its child groups are applied, depending on how their respective Resolve methods work.       The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.       If the membership condition does not match the specified evidence, this method returns `null`; otherwise, it sets the permission set to be returned (P) equal to the code group's policy statement, and then continues. For each child code group, the method resolves the code group with the same evidence; if the result is not `null`, it sets P equal to the union of P and the child code group's policy statement. It then returns P, which is now the union of the current code group's policy statement and all child group policy statements.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence.","pos":[0,156]},{"content":"If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.","pos":[157,279]},{"content":"For union code groups, all child code groups whose membership condition match the evidence are also resolved, and all resulting policy statements form a union with the policy statement of the parent union code group.","pos":[286,502]},{"content":"Each child code group type determines how its child groups are applied, depending on how their respective Resolve methods work.","pos":[503,630]},{"content":"The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.","pos":[637,835]},{"content":"If the membership condition does not match the specified evidence, this method returns <ph id=\"ph1\">`null`</ph>; otherwise, it sets the permission set to be returned (P) equal to the code group's policy statement, and then continues.","pos":[842,1057],"source":"       If the membership condition does not match the specified evidence, this method returns `null`; otherwise, it sets the permission set to be returned (P) equal to the code group's policy statement, and then continues."},{"content":"For each child code group, the method resolves the code group with the same evidence; if the result is not <ph id=\"ph1\">`null`</ph>, it sets P equal to the union of P and the child code group's policy statement.","pos":[1058,1251],"source":" For each child code group, the method resolves the code group with the same evidence; if the result is not `null`, it sets P equal to the union of P and the child code group's policy statement."},{"content":"It then returns P, which is now the union of the current code group's policy statement and all child group policy statements.","pos":[1252,1377]}]},{"pos":[9194,9224],"content":"The evidence for the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The evidence for the assembly.","pos":[0,30]}]},{"pos":[9307,9570],"content":"A policy statement consisting of the permissions granted by the code group with optional attributes, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the code group does not apply (the membership condition does not match the specified evidence).","needQuote":true,"needEscape":true,"source":"A policy statement consisting of the permissions granted by the code group with optional attributes, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the code group does not apply (the membership condition does not match the specified evidence)."},{"pos":[9746,9846],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">evidence</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>evidence</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9969,10133],"content":"More than one code group (including the parent code group and any child code groups) is marked <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.PolicyStatementAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"More than one code group (including the parent code group and any child code groups) is marked <xref href=\"System.Security.Policy.PolicyStatementAttribute\"></xref>."},{"pos":[10680,10710],"content":"Resolves matching code groups.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves matching code groups.","pos":[0,30]}]},{"pos":[10722,11158],"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a root code group. The code group that is returned may contain child code groups, which, in turn, may also contain child code groups, so the return value reflects the complete set of code groups that were matched by the evidence provided.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a root code group. The code group that is returned may contain child code groups, which, in turn, may also contain child code groups, so the return value reflects the complete set of code groups that were matched by the evidence provided.","pos":[0,436],"nodes":[{"content":"Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence.","pos":[0,156]},{"content":"If there is a match, this method returns a root code group.","pos":[157,216]},{"content":"The code group that is returned may contain child code groups, which, in turn, may also contain child code groups, so the return value reflects the complete set of code groups that were matched by the evidence provided.","pos":[217,436]}]}]},{"pos":[11399,11429],"content":"The evidence for the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The evidence for the assembly.","pos":[0,30]}]},{"pos":[11506,11572],"content":"The complete set of code groups that were matched by the evidence.","needQuote":true,"needEscape":true,"nodes":[{"content":"The complete set of code groups that were matched by the evidence.","pos":[0,66]}]},{"pos":[11766,11866],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">evidence</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>evidence</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Policy.UnionCodeGroup\n  id: UnionCodeGroup\n  children:\n  - System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)\n  - System.Security.Policy.UnionCodeGroup.Copy\n  - System.Security.Policy.UnionCodeGroup.MergeLogic\n  - System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)\n  - System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  langs:\n  - csharp\n  name: UnionCodeGroup\n  nameWithType: UnionCodeGroup\n  fullName: System.Security.Policy.UnionCodeGroup\n  type: Class\n  summary: Represents a code group whose policy statement is the union of the current code group's policy statement and the policy statement of all its matching child code groups. This class cannot be inherited.\n  remarks: \"Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups (and so on), forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it or not, based on the evidence for that assembly. Only code groups whose membership conditions match a given assembly and their child code groups apply policy.  \\n  \\n UnionCodeGroup is the most common type of code group; the policy statement of all matching child code groups (and by extension their child code groups) are combined with the permission set of the matching parent code group. Thus, if its membership condition matches, this code group forms the union of its policy statement and those of all its child code groups that also match the evidence.  \\n  \\n UnionCodeGroup code groups are the code groups created by the CASPOL utility (see [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md)).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"This type is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.\")]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class UnionCodeGroup : System.Security.Policy.CodeGroup\n  inheritance:\n  - System.Object\n  - System.Security.Policy.CodeGroup\n  implements: []\n  inheritedMembers:\n  - System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)\n  - System.Security.Policy.CodeGroup.AttributeString\n  - System.Security.Policy.CodeGroup.Children\n  - System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  - System.Security.Policy.CodeGroup.Description\n  - System.Security.Policy.CodeGroup.Equals(System.Object)\n  - System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)\n  - System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)\n  - System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  - System.Security.Policy.CodeGroup.GetHashCode\n  - System.Security.Policy.CodeGroup.MembershipCondition\n  - System.Security.Policy.CodeGroup.Name\n  - System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)\n  - System.Security.Policy.CodeGroup.PermissionSetName\n  - System.Security.Policy.CodeGroup.PolicyStatement\n  - System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)\n  - System.Security.Policy.CodeGroup.ToXml\n  - System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)\n  platform:\n  - net462\n- uid: System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)\n  id: '#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)'\n  parent: System.Security.Policy.UnionCodeGroup\n  langs:\n  - csharp\n  name: UnionCodeGroup(IMembershipCondition,PolicyStatement)\n  nameWithType: UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)\n  fullName: System.Security.Policy.UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new instance of the <xref href=\"System.Security.Policy.UnionCodeGroup\"></xref> class.\n  remarks: This constructor creates a basic code group and should be called from the constructors of custom code groups. You can add child code groups by using the <xref:System.Security.Policy.CodeGroup.AddChild%2A> method.\n  syntax:\n    content: public UnionCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);\n    parameters:\n    - id: membershipCondition\n      type: System.Security.Policy.IMembershipCondition\n      description: A membership condition that tests evidence to determine whether this code group applies policy.\n    - id: policy\n      type: System.Security.Policy.PolicyStatement\n      description: The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.\n  overload: System.Security.Policy.UnionCodeGroup.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The type of the <code>membershipCondition</code> parameter is not valid.  \\n  \\n -or-  \\n  \\n The type of the <code>policy</code> parameter is not valid.\"\n  platform:\n  - net462\n- uid: System.Security.Policy.UnionCodeGroup.Copy\n  id: Copy\n  parent: System.Security.Policy.UnionCodeGroup\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: UnionCodeGroup.Copy()\n  fullName: System.Security.Policy.UnionCodeGroup.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Makes a deep copy of the current code group.\n  remarks: This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.\n  syntax:\n    content: public override System.Security.Policy.CodeGroup Copy ();\n    parameters: []\n    return:\n      type: System.Security.Policy.CodeGroup\n      description: An equivalent copy of the current code group, including its membership conditions and child code groups.\n  overload: System.Security.Policy.UnionCodeGroup.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.UnionCodeGroup.MergeLogic\n  id: MergeLogic\n  parent: System.Security.Policy.UnionCodeGroup\n  langs:\n  - csharp\n  name: MergeLogic\n  nameWithType: UnionCodeGroup.MergeLogic\n  fullName: System.Security.Policy.UnionCodeGroup.MergeLogic\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets the merge logic.\n  syntax:\n    content: public override string MergeLogic { get; }\n    return:\n      type: System.String\n      description: Always the string \"Union\".\n  overload: System.Security.Policy.UnionCodeGroup.MergeLogic*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)\n  id: Resolve(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.UnionCodeGroup\n  langs:\n  - csharp\n  name: Resolve(Evidence)\n  nameWithType: UnionCodeGroup.Resolve(Evidence)\n  fullName: System.Security.Policy.UnionCodeGroup.Resolve(Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Resolves policy for the code group and its descendants for a set of evidence.\n  remarks: \"Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.  \\n  \\n For union code groups, all child code groups whose membership condition match the evidence are also resolved, and all resulting policy statements form a union with the policy statement of the parent union code group. Each child code group type determines how its child groups are applied, depending on how their respective Resolve methods work.  \\n  \\n The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.  \\n  \\n If the membership condition does not match the specified evidence, this method returns `null`; otherwise, it sets the permission set to be returned (P) equal to the code group's policy statement, and then continues. For each child code group, the method resolves the code group with the same evidence; if the result is not `null`, it sets P equal to the union of P and the child code group's policy statement. It then returns P, which is now the union of the current code group's policy statement and all child group policy statements.\"\n  syntax:\n    content: public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);\n    parameters:\n    - id: evidence\n      type: System.Security.Policy.Evidence\n      description: The evidence for the assembly.\n    return:\n      type: System.Security.Policy.PolicyStatement\n      description: A policy statement consisting of the permissions granted by the code group with optional attributes, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the code group does not apply (the membership condition does not match the specified evidence).\n  overload: System.Security.Policy.UnionCodeGroup.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>evidence</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Policy.PolicyException\n    commentId: T:System.Security.Policy.PolicyException\n    description: More than one code group (including the parent code group and any child code groups) is marked <xref href=\"System.Security.Policy.PolicyStatementAttribute\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  id: ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.UnionCodeGroup\n  langs:\n  - csharp\n  name: ResolveMatchingCodeGroups(Evidence)\n  nameWithType: UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)\n  fullName: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Resolves matching code groups.\n  remarks: Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a root code group. The code group that is returned may contain child code groups, which, in turn, may also contain child code groups, so the return value reflects the complete set of code groups that were matched by the evidence provided.\n  syntax:\n    content: public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);\n    parameters:\n    - id: evidence\n      type: System.Security.Policy.Evidence\n      description: The evidence for the assembly.\n    return:\n      type: System.Security.Policy.CodeGroup\n      description: The complete set of code groups that were matched by the evidence.\n  overload: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>evidence</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Policy.CodeGroup\n  isExternal: false\n  name: System.Security.Policy.CodeGroup\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Policy.PolicyException\n  parent: System.Security.Policy\n  isExternal: false\n  name: PolicyException\n  nameWithType: PolicyException\n  fullName: System.Security.Policy.PolicyException\n- uid: System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: UnionCodeGroup(IMembershipCondition,PolicyStatement)\n  nameWithType: UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)\n  fullName: System.Security.Policy.UnionCodeGroup.UnionCodeGroup(IMembershipCondition,PolicyStatement)\n- uid: System.Security.Policy.IMembershipCondition\n  parent: System.Security.Policy\n  isExternal: false\n  name: IMembershipCondition\n  nameWithType: IMembershipCondition\n  fullName: System.Security.Policy.IMembershipCondition\n- uid: System.Security.Policy.PolicyStatement\n  parent: System.Security.Policy\n  isExternal: false\n  name: PolicyStatement\n  nameWithType: PolicyStatement\n  fullName: System.Security.Policy.PolicyStatement\n- uid: System.Security.Policy.UnionCodeGroup.Copy\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: Copy()\n  nameWithType: UnionCodeGroup.Copy()\n  fullName: System.Security.Policy.UnionCodeGroup.Copy()\n- uid: System.Security.Policy.UnionCodeGroup.MergeLogic\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: MergeLogic\n  nameWithType: UnionCodeGroup.MergeLogic\n  fullName: System.Security.Policy.UnionCodeGroup.MergeLogic\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: Resolve(Evidence)\n  nameWithType: UnionCodeGroup.Resolve(Evidence)\n  fullName: System.Security.Policy.UnionCodeGroup.Resolve(Evidence)\n- uid: System.Security.Policy.Evidence\n  parent: System.Security.Policy\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n- uid: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: ResolveMatchingCodeGroups(Evidence)\n  nameWithType: UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)\n  fullName: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(Evidence)\n- uid: System.Security.Policy.UnionCodeGroup.#ctor*\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: UnionCodeGroup\n  nameWithType: UnionCodeGroup.UnionCodeGroup\n- uid: System.Security.Policy.UnionCodeGroup.Copy*\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: Copy\n  nameWithType: UnionCodeGroup.Copy\n- uid: System.Security.Policy.UnionCodeGroup.MergeLogic*\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: MergeLogic\n  nameWithType: UnionCodeGroup.MergeLogic\n- uid: System.Security.Policy.UnionCodeGroup.Resolve*\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: Resolve\n  nameWithType: UnionCodeGroup.Resolve\n- uid: System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups*\n  parent: System.Security.Policy.UnionCodeGroup\n  isExternal: false\n  name: ResolveMatchingCodeGroups\n  nameWithType: UnionCodeGroup.ResolveMatchingCodeGroups\n"}