{"nodes":[{"pos":[2360,2463],"content":"Represents the abstract base class from which all implementations of symmetric algorithms must inherit.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the abstract base class from which all implementations of symmetric algorithms must inherit.","pos":[0,103]}]},{"pos":[2476,4751],"content":"The classes that derive from the SymmetricAlgorithm class use a chaining mode called cipher block chaining (CBC), which requires a key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and an initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the SymmetricAlgorithm classes, you must set the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and the <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property to the same values that were used for encryption.  For a symmetric algorithm to be useful, the secret key must be known only to the sender and the receiver.       <xref:System.Security.Cryptography.RijndaelManaged>, <xref:System.Security.Cryptography.DESCryptoServiceProvider>, <xref:System.Security.Cryptography.RC2CryptoServiceProvider>, and <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> are implementations of symmetric algorithms.       Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the <xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.       All cryptographic classes in the .NET Framework that hold sensitive data implement a `Clear` method. When called, the `Clear` method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the `Dispose` method with the `disposing` parameter set to `True` to dispose of all managed and unmanaged resources associated with the object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The classes that derive from the SymmetricAlgorithm class use a chaining mode called cipher block chaining (CBC), which requires a key (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;) and an initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;) to perform cryptographic transformations on data.","pos":[0,340],"source":"The classes that derive from the SymmetricAlgorithm class use a chaining mode called cipher block chaining (CBC), which requires a key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and an initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to perform cryptographic transformations on data."},{"content":"To decrypt data that was encrypted using one of the SymmetricAlgorithm classes, you must set the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; property and the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt; property to the same values that were used for encryption.","pos":[342,637],"source":"  To decrypt data that was encrypted using one of the SymmetricAlgorithm classes, you must set the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and the <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property to the same values that were used for encryption."},{"content":"For a symmetric algorithm to be useful, the secret key must be known only to the sender and the receiver.","pos":[639,744]},{"content":"&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;, &lt;xref:System.Security.Cryptography.DESCryptoServiceProvider&gt;, &lt;xref:System.Security.Cryptography.RC2CryptoServiceProvider&gt;, and &lt;xref:System.Security.Cryptography.TripleDESCryptoServiceProvider&gt; are implementations of symmetric algorithms.","pos":[751,1043],"source":"       <xref:System.Security.Cryptography.RijndaelManaged>, <xref:System.Security.Cryptography.DESCryptoServiceProvider>, <xref:System.Security.Cryptography.RC2CryptoServiceProvider>, and <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> are implementations of symmetric algorithms."},{"content":"Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object.","pos":[1050,1213]},{"content":"You must explicitly call the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A&gt; method on the object to zero out any sensitive data within the object before it is released.","pos":[1214,1399],"source":" You must explicitly call the <xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> method on the object to zero out any sensitive data within the object before it is released."},{"content":"Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation.","pos":[1400,1539]},{"content":"Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory.","pos":[1540,1660]},{"content":"In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.","pos":[1661,1787]},{"content":"All cryptographic classes in the .NET Framework that hold sensitive data implement a <ph id=\"ph1\">`Clear`</ph> method.","pos":[1794,1894],"source":"       All cryptographic classes in the .NET Framework that hold sensitive data implement a `Clear` method."},{"content":"When called, the <ph id=\"ph1\">`Clear`</ph> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected.","pos":[1895,2058],"source":" When called, the `Clear` method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected."},{"content":"When the object has been zeroed and released, you should then call the <ph id=\"ph1\">`Dispose`</ph> method with the <ph id=\"ph2\">`disposing`</ph> parameter set to <ph id=\"ph3\">`True`</ph> to dispose of all managed and unmanaged resources associated with the object.","pos":[2059,2269],"source":" When the object has been zeroed and released, you should then call the `Dispose` method with the `disposing` parameter set to `True` to dispose of all managed and unmanaged resources associated with the object."}]},{"pos":[6293,6402],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class."},{"pos":[6414,6525],"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","pos":[0,111],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code creates a new instance of a derived class.","pos":[52,111]}]}]},{"pos":[6830,6912],"content":"The implementation of the class derived from the symmetric algorithm is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implementation of the class derived from the symmetric algorithm is not valid.","pos":[0,82]}]},{"pos":[7325,7394],"content":"Gets or sets the block size, in bits, of the cryptographic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the block size, in bits, of the cryptographic operation.","pos":[0,69]}]},{"pos":[7406,7733],"content":"The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.","pos":[0,327],"nodes":[{"content":"The block size is the basic unit of data that can be encrypted or decrypted in one operation.","pos":[0,93]},{"content":"Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block.","pos":[94,261]},{"content":"Valid block sizes are determined by the symmetric algorithm used.","pos":[262,327]}]}]},{"pos":[7856,7880],"content":"The block size, in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The block size, in bits.","pos":[0,24]}]},{"pos":[8114,8140],"content":"The block size is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The block size is invalid.","pos":[0,26]}]},{"pos":[8575,8642],"content":"Represents the block size, in bits, of the cryptographic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the block size, in bits, of the cryptographic operation.","pos":[0,67]}]},{"pos":[8655,9103],"content":"The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property.","pos":[0,446],"nodes":[{"content":"The block size is the basic unit of data that can be encrypted or decrypted in one operation.","pos":[0,93]},{"content":"Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block.","pos":[94,261]},{"content":"Valid block sizes are determined by the symmetric algorithm used.","pos":[262,327]},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A&gt; property.","pos":[334,446],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property."}]}]},{"pos":[9214,9226],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9640,9750],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class."},{"pos":[9763,10926],"content":"Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the Clear method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.       All cryptographic classes in the .NET Framework that hold sensitive data implement a `Clear` method. When called, the `Clear` method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the `Dispose` method with the `disposing` parameter set to `True` to dispose of all managed and unmanaged resources associated with the object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object.","pos":[0,163]},{"content":"You must explicitly call the Clear method on the object to zero out any sensitive data within the object before it is released.","pos":[164,291]},{"content":"Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation.","pos":[292,431]},{"content":"Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory.","pos":[432,552]},{"content":"In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.","pos":[553,679]},{"content":"All cryptographic classes in the .NET Framework that hold sensitive data implement a <ph id=\"ph1\">`Clear`</ph> method.","pos":[686,786],"source":"       All cryptographic classes in the .NET Framework that hold sensitive data implement a `Clear` method."},{"content":"When called, the <ph id=\"ph1\">`Clear`</ph> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected.","pos":[787,950],"source":" When called, the `Clear` method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected."},{"content":"When the object has been zeroed and released, you should then call the <ph id=\"ph1\">`Dispose`</ph> method with the <ph id=\"ph2\">`disposing`</ph> parameter set to <ph id=\"ph3\">`True`</ph> to dispose of all managed and unmanaged resources associated with the object.","pos":[951,1161],"source":" When the object has been zeroed and released, you should then call the `Dispose` method with the `disposing` parameter set to `True` to dispose of all managed and unmanaged resources associated with the object."}]},{"pos":[11477,11556],"content":"Creates a default cryptographic object used to perform the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a default cryptographic object used to perform the symmetric algorithm.","pos":[0,79]}]},{"pos":[12641,12712],"content":"A default cryptographic object used to perform the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A default cryptographic object used to perform the symmetric algorithm.","pos":[0,71]}]},{"pos":[13247,13330],"content":"Creates the specified cryptographic object used to perform the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the specified cryptographic object used to perform the symmetric algorithm.","pos":[0,83]}]},{"pos":[13520,13649],"content":"The name of the specific implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class to use.","needQuote":true,"needEscape":true,"source":"The name of the specific implementation of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class to use."},{"pos":[13741,13804],"content":"A cryptographic object used to perform the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cryptographic object used to perform the symmetric algorithm.","pos":[0,63]}]},{"pos":[14336,14546],"content":"Creates a symmetric decryptor object with the current &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key<bpt id=\"p1\">*</bpt>&gt; property and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV<ept id=\"p1\">*</ept>&gt;).","needQuote":true,"needEscape":true,"source":"Creates a symmetric decryptor object with the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>)."},{"pos":[14558,14725],"content":"This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A> overload with the same signature.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method decrypts an encrypted message created using the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A&gt; overload with the same signature.","pos":[0,167],"source":"This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A> overload with the same signature."}]},{"pos":[14938,14967],"content":"A symmetric decryptor object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A symmetric decryptor object.","pos":[0,29]}]},{"pos":[15605,15853],"content":"When overridden in a derived class, creates a symmetric decryptor object with the specified &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key<bpt id=\"p1\">*</bpt>&gt; property and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV<ept id=\"p1\">*</ept>&gt;).","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, creates a symmetric decryptor object with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>)."},{"pos":[15865,16033],"content":"This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A> overload with the same parameters.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method decrypts an encrypted message created using the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A&gt; overload with the same parameters.","pos":[0,168],"source":"This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A> overload with the same parameters."}]},{"pos":[16244,16294],"content":"The secret key to use for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret key to use for the symmetric algorithm.","pos":[0,50]}]},{"pos":[16356,16417],"content":"The initialization vector to use for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initialization vector to use for the symmetric algorithm.","pos":[0,61]}]},{"pos":[16507,16536],"content":"A symmetric decryptor object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A symmetric decryptor object.","pos":[0,29]}]},{"pos":[17077,17287],"content":"Creates a symmetric encryptor object with the current &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key<bpt id=\"p1\">*</bpt>&gt; property and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV<ept id=\"p1\">*</ept>&gt;).","needQuote":true,"needEscape":true,"source":"Creates a symmetric encryptor object with the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>)."},{"pos":[17300,18005],"content":"If the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property is `null`, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> method is called to create a new random <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>. If the current <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property is `null`, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> method is called to create a new random <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>.       Use the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A> overload with the same signature to decrypt the result of this method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the current &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; property is <ph id=\"ph1\">`null`</ph>, the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A&gt; method is called to create a new random &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;.","pos":[0,273],"source":"If the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property is `null`, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> method is called to create a new random <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>."},{"content":"If the current &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt; property is <ph id=\"ph1\">`null`</ph>, the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A&gt; method is called to create a new random &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;.","pos":[274,544],"source":" If the current <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property is `null`, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> method is called to create a new random <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>."},{"content":"Use the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A&gt; overload with the same signature to decrypt the result of this method.","pos":[551,703],"source":"       Use the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A> overload with the same signature to decrypt the result of this method."}]},{"pos":[18727,18756],"content":"A symmetric encryptor object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A symmetric encryptor object.","pos":[0,29]}]},{"pos":[19394,19642],"content":"When overridden in a derived class, creates a symmetric encryptor object with the specified &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key<bpt id=\"p1\">*</bpt>&gt; property and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV<ept id=\"p1\">*</ept>&gt;).","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, creates a symmetric encryptor object with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>)."},{"pos":[19654,19807],"content":"Use the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A> overload with the same parameters to decrypt the result of this method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A&gt; overload with the same parameters to decrypt the result of this method.","pos":[0,153],"source":"Use the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A> overload with the same parameters to decrypt the result of this method."}]},{"pos":[20018,20068],"content":"The secret key to use for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret key to use for the symmetric algorithm.","pos":[0,50]}]},{"pos":[20130,20191],"content":"The initialization vector to use for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initialization vector to use for the symmetric algorithm.","pos":[0,61]}]},{"pos":[20281,20310],"content":"A symmetric encryptor object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A symmetric encryptor object.","pos":[0,29]}]},{"pos":[20811,20945],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class."},{"pos":[20958,21919],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.SymmetricAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.SymmetricAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.SymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.SymmetricAlgorithm> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.SymmetricAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.SymmetricAlgorithm> object's `Finalize` method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;.","pos":[0,102],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.SymmetricAlgorithm>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; in an unusable state.","pos":[103,211],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.SymmetricAlgorithm> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; was occupying.","pos":[212,457],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.SymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.SymmetricAlgorithm> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[464,638],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;.","pos":[644,780],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.SymmetricAlgorithm>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[781,956],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.SymmetricAlgorithm> object's `Finalize` method."}]},{"pos":[22532,22692],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> and optionally releases the managed resources."},{"pos":[22705,23214],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.SymmetricAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; references.","pos":[256,437],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.SymmetricAlgorithm> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[438,507],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[23370,23579],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[24093,24165],"content":"Gets or sets the feedback size, in bits, of the cryptographic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the feedback size, in bits, of the cryptographic operation.","pos":[0,72]}]},{"pos":[24177,24349],"content":"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.","pos":[0,172],"nodes":[{"content":"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations.","pos":[0,115]},{"content":"The feedback size cannot be greater than the block size.","pos":[116,172]}]}]},{"pos":[24475,24501],"content":"The feedback size in bits.","needQuote":true,"needEscape":true,"nodes":[{"content":"The feedback size in bits.","pos":[0,26]}]},{"pos":[24738,24786],"content":"The feedback size is larger than the block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The feedback size is larger than the block size.","pos":[0,48]}]},{"pos":[25236,25306],"content":"Represents the feedback size, in bits, of the cryptographic operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the feedback size, in bits, of the cryptographic operation.","pos":[0,70]}]},{"pos":[25319,25615],"content":"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A> property.","pos":[0,294],"nodes":[{"content":"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations.","pos":[0,115]},{"content":"The feedback size cannot be greater than the block size.","pos":[116,172]},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A&gt; property.","pos":[179,294],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A> property."}]}]},{"pos":[25729,25741],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26180,26343],"content":"When overridden in a derived class, generates a random initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) to use for the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, generates a random initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV*&gt;) to use for the algorithm.","pos":[0,163],"source":"When overridden in a derived class, generates a random initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) to use for the algorithm."}]},{"pos":[26355,26662],"content":"In general, there is no reason to use this method, because `CreateEncryptor()` or `CreateEncryptor(null, null)` automatically generates both an initialization vector and a key. However, you may want to use the GenerateIV method to reuse a symmetric algorithm instance with a different initialization vector.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In general, there is no reason to use this method, because <ph id=\"ph1\">`CreateEncryptor()`</ph> or <ph id=\"ph2\">`CreateEncryptor(null, null)`</ph> automatically generates both an initialization vector and a key.","pos":[0,176],"source":"In general, there is no reason to use this method, because `CreateEncryptor()` or `CreateEncryptor(null, null)` automatically generates both an initialization vector and a key."},{"content":"However, you may want to use the GenerateIV method to reuse a symmetric algorithm instance with a different initialization vector.","pos":[177,307]}]},{"pos":[27256,27402],"content":"When overridden in a derived class, generates a random key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) to use for the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, generates a random key (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key*&gt;) to use for the algorithm.","pos":[0,146],"source":"When overridden in a derived class, generates a random key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) to use for the algorithm."}]},{"pos":[27414,27704],"content":"In general, there is no reason to use this method, because `CreateEncryptor()` or `CreateEncryptor(null, null)` automatically generates both an initialization vector and a key. However, you may want to use the GenerateKey method to reuse a symmetric algorithm instance with a different key.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In general, there is no reason to use this method, because <ph id=\"ph1\">`CreateEncryptor()`</ph> or <ph id=\"ph2\">`CreateEncryptor(null, null)`</ph> automatically generates both an initialization vector and a key.","pos":[0,176],"source":"In general, there is no reason to use this method, because `CreateEncryptor()` or `CreateEncryptor(null, null)` automatically generates both an initialization vector and a key."},{"content":"However, you may want to use the GenerateKey method to reuse a symmetric algorithm instance with a different key.","pos":[177,290]}]},{"pos":[28251,28323],"content":"Gets or sets the initialization vector (IV) for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the initialization vector (IV) for the symmetric algorithm.","pos":[0,72]}]},{"pos":[28336,30116],"content":"The IV property is automatically set to a new random value whenever you create a new instance of one of the <xref:System.Security.Cryptography.SymmetricAlgorithm> classes or when you manually call the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> method.  The size of the IV property must be the same as the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property divided by 8.       The classes that derive from the <xref:System.Security.Cryptography.SymmetricAlgorithm> class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the <xref:System.Security.Cryptography.SymmetricAlgorithm> classes, you must set the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and IV property to the same values that were used for encryption.       For a given secret key *k*, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text. If you have duplicate blocks within your plain text stream, you will have duplicate blocks within your cipher text stream. If unauthorized users know anything about the structure of a block of your plain text, they can use that information to decipher the known cipher text block and possibly recover your key. To combat this problem, information from the previous block is mixed into the process of encrypting the next block. Thus, the output of two identical plain text blocks is different. Because this technique uses the previous block to encrypt the next block, an initialization vector is needed to encrypt the first block of data.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The IV property is automatically set to a new random value whenever you create a new instance of one of the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; classes or when you manually call the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A&gt; method.","pos":[0,277],"source":"The IV property is automatically set to a new random value whenever you create a new instance of one of the <xref:System.Security.Cryptography.SymmetricAlgorithm> classes or when you manually call the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> method."},{"content":"The size of the IV property must be the same as the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A&gt; property divided by 8.","pos":[279,421],"source":"  The size of the IV property must be the same as the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property divided by 8."},{"content":"The classes that derive from the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data.","pos":[428,677],"source":"       The classes that derive from the <xref:System.Security.Cryptography.SymmetricAlgorithm> class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data."},{"content":"To decrypt data that was encrypted using one of the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt; classes, you must set the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; property and IV property to the same values that were used for encryption.","pos":[679,948],"source":"  To decrypt data that was encrypted using one of the <xref:System.Security.Cryptography.SymmetricAlgorithm> classes, you must set the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and IV property to the same values that were used for encryption."},{"content":"For a given secret key <bpt id=\"p1\">*</bpt>k<ept id=\"p1\">*</ept>, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text.","pos":[955,1138],"source":"       For a given secret key *k*, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text."},{"content":"If you have duplicate blocks within your plain text stream, you will have duplicate blocks within your cipher text stream.","pos":[1139,1261]},{"content":"If unauthorized users know anything about the structure of a block of your plain text, they can use that information to decipher the known cipher text block and possibly recover your key.","pos":[1262,1449]},{"content":"To combat this problem, information from the previous block is mixed into the process of encrypting the next block.","pos":[1450,1565]},{"content":"Thus, the output of two identical plain text blocks is different.","pos":[1566,1631]},{"content":"Because this technique uses the previous block to encrypt the next block, an initialization vector is needed to encrypt the first block of data.","pos":[1632,1776]}]},{"pos":[30237,30263],"content":"The initialization vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initialization vector.","pos":[0,26]}]},{"pos":[30444,30561],"content":"An attempt was made to set the initialization vector to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt was made to set the initialization vector to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[30710,30782],"content":"An attempt was made to set the initialization vector to an invalid size.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to set the initialization vector to an invalid size.","pos":[0,72]}]},{"pos":[31182,31308],"content":"Represents the initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV*&gt;) for the symmetric algorithm.","pos":[0,126],"source":"Represents the initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) for the symmetric algorithm."}]},{"pos":[31320,31425],"content":"This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt; property.","pos":[0,105],"source":"This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property."}]},{"pos":[31532,31544],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31944,32000],"content":"Gets or sets the secret key for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the secret key for the symmetric algorithm.","pos":[0,56]}]},{"pos":[32013,32549],"content":"The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.       If this property is `null` when it is used, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> method is called to create a new random value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The secret key is used both for encryption and for decryption.","pos":[0,62]},{"content":"For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver.","pos":[63,172]},{"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[173,363],"source":" The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property."},{"content":"If this property is <ph id=\"ph1\">`null`</ph> when it is used, the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A&gt; method is called to create a new random value.","pos":[370,534],"source":"       If this property is `null` when it is used, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> method is called to create a new random value."}]},{"pos":[32671,32721],"content":"The secret key to use for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret key to use for the symmetric algorithm.","pos":[0,50]}]},{"pos":[32903,33002],"content":"An attempt was made to set the key to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An attempt was made to set the key to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[33151,33175],"content":"The key size is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key size is invalid.","pos":[0,24]}]},{"pos":[33578,33660],"content":"Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.","pos":[0,82]}]},{"pos":[33672,33862],"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[0,190],"source":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property."}]},{"pos":[33983,34052],"content":"The size, in bits, of the secret key used by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bits, of the secret key used by the symmetric algorithm.","pos":[0,69]}]},{"pos":[34284,34310],"content":"The key size is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key size is not valid.","pos":[0,26]}]},{"pos":[34735,34815],"content":"Represents the size, in bits, of the secret key used by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the size, in bits, of the secret key used by the symmetric algorithm.","pos":[0,80]}]},{"pos":[34828,35137],"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A> property.","pos":[0,307],"nodes":[{"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[0,190],"source":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A&gt; property.","pos":[197,307],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A> property."}]}]},{"pos":[35246,35258],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[35680,35734],"content":"Represents the secret key for the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the secret key for the symmetric algorithm.","pos":[0,54]}]},{"pos":[35747,36225],"content":"The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property.","pos":[0,476],"nodes":[{"content":"The secret key is used both for encryption and for decryption.","pos":[0,62]},{"content":"For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver.","pos":[63,172]},{"content":"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[173,363],"source":" The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; property.","pos":[370,476],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property."}]}]},{"pos":[36334,36346],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[36806,36883],"content":"Gets the block sizes, in bits, that are supported by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the block sizes, in bits, that are supported by the symmetric algorithm.","pos":[0,77]}]},{"pos":[36895,36979],"content":"The symmetric algorithm supports only block sizes that match an entry in this array.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The symmetric algorithm supports only block sizes that match an entry in this array.","pos":[0,84]}]},{"pos":[37547,37613],"content":"An array that contains the block sizes supported by the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the block sizes supported by the algorithm.","pos":[0,66]}]},{"pos":[38172,38254],"content":"Specifies the block sizes, in bits, that are supported by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the block sizes, in bits, that are supported by the symmetric algorithm.","pos":[0,82]}]},{"pos":[38267,38478],"content":"The symmetric algorithm supports only block sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The symmetric algorithm supports only block sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A> property.","pos":[0,209],"nodes":[{"content":"The symmetric algorithm supports only block sizes that match an entry in this array.","pos":[0,84]},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A&gt; property.","pos":[91,209],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A> property."}]}]},{"pos":[38658,38670],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39120,39195],"content":"Gets the key sizes, in bits, that are supported by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key sizes, in bits, that are supported by the symmetric algorithm.","pos":[0,75]}]},{"pos":[39207,39289],"content":"The symmetric algorithm supports only key sizes that match an entry in this array.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The symmetric algorithm supports only key sizes that match an entry in this array.","pos":[0,82]}]},{"pos":[39853,39917],"content":"An array that contains the key sizes supported by the algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the key sizes supported by the algorithm.","pos":[0,64]}]},{"pos":[40464,40544],"content":"Specifies the key sizes, in bits, that are supported by the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the key sizes, in bits, that are supported by the symmetric algorithm.","pos":[0,80]}]},{"pos":[40557,40764],"content":"The symmetric algorithm supports only key sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The symmetric algorithm supports only key sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.","pos":[0,205],"nodes":[{"content":"The symmetric algorithm supports only key sizes that match an entry in this array.","pos":[0,82]},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[89,205],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property."}]}]},{"pos":[40942,40954],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[41359,41422],"content":"Gets or sets the mode for operation of the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the mode for operation of the symmetric algorithm.","pos":[0,63]}]},{"pos":[41434,41533],"content":"See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"See &lt;xref:System.Security.Cryptography.CipherMode&gt; enumeration for a description of specific modes.","pos":[0,99],"source":"See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes."}]},{"pos":[41714,41841],"content":"The mode for operation of the symmetric algorithm. The default is <xref href=\"System.Security.Cryptography.CipherMode\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The mode for operation of the symmetric algorithm.","pos":[0,50]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CipherMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[51,127],"source":" The default is <xref href=\"System.Security.Cryptography.CipherMode\"></xref>."}]},{"pos":[42070,42172],"content":"The cipher mode is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.CipherMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"The cipher mode is not one of the <xref href=\"System.Security.Cryptography.CipherMode\"></xref> values."},{"pos":[42582,42641],"content":"Represents the cipher mode used in the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the cipher mode used in the symmetric algorithm.","pos":[0,59]}]},{"pos":[42654,42869],"content":"See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A> property.","pos":[0,213],"nodes":[{"content":"See &lt;xref:System.Security.Cryptography.CipherMode&gt; enumeration for a description of specific modes.","pos":[0,99],"source":"See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A&gt; property.","pos":[106,213],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A> property."}]}]},{"pos":[43038,43050],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[43470,43532],"content":"Gets or sets the padding mode used in the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the padding mode used in the symmetric algorithm.","pos":[0,62]}]},{"pos":[43544,43970],"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes.","pos":[0,426],"nodes":[{"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks.","pos":[0,89]},{"content":"Often, there are not enough bytes to fill the last block.","pos":[90,147]},{"content":"When this happens, a padding string is added to the text.","pos":[148,205]},{"content":"For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added.","pos":[206,321]},{"content":"See the &lt;xref:System.Security.Cryptography.PaddingMode&gt; enumeration for a description of specific modes.","pos":[322,426],"source":" See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes."}]}]},{"pos":[44156,44283],"content":"The padding mode used in the symmetric algorithm. The default is <xref href=\"System.Security.Cryptography.PaddingMode\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode used in the symmetric algorithm.","pos":[0,49]},{"content":"The default is <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.PaddingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[50,127],"source":" The default is <xref href=\"System.Security.Cryptography.PaddingMode\"></xref>."}]},{"pos":[44515,44619],"content":"The padding mode is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.PaddingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"The padding mode is not one of the <xref href=\"System.Security.Cryptography.PaddingMode\"></xref> values."},{"pos":[45044,45104],"content":"Represents the padding mode used in the symmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the padding mode used in the symmetric algorithm.","pos":[0,60]}]},{"pos":[45117,45662],"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property.","pos":[0,543],"nodes":[{"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks.","pos":[0,89]},{"content":"Often, there are not enough bytes to fill the last block.","pos":[90,147]},{"content":"When this happens, a padding string is added to the text.","pos":[148,205]},{"content":"For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added.","pos":[206,321]},{"content":"See the &lt;xref:System.Security.Cryptography.PaddingMode&gt; enumeration for a description of specific modes.","pos":[322,426],"source":" See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A&gt; property.","pos":[433,543],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property."}]}]},{"pos":[45836,45848],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[46340,46417],"content":"Determines whether the specified key size is valid for the current algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified key size is valid for the current algorithm.","pos":[0,77]}]},{"pos":[46563,46614],"content":"The length, in bits, to check for a valid key size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length, in bits, to check for a valid key size.","pos":[0,51]}]},{"pos":[46673,46870],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified key size is valid for the current algorithm; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified key size is valid for the current algorithm; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  id: SymmetricAlgorithm\n  children:\n  - System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.Create\n  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Key\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  langs:\n  - csharp\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  type: Class\n  summary: Represents the abstract base class from which all implementations of symmetric algorithms must inherit.\n  remarks: \"The classes that derive from the SymmetricAlgorithm class use a chaining mode called cipher block chaining (CBC), which requires a key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and an initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the SymmetricAlgorithm classes, you must set the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and the <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property to the same values that were used for encryption.  For a symmetric algorithm to be useful, the secret key must be known only to the sender and the receiver.  \\n  \\n <xref:System.Security.Cryptography.RijndaelManaged>, <xref:System.Security.Cryptography.DESCryptoServiceProvider>, <xref:System.Security.Cryptography.RC2CryptoServiceProvider>, and <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> are implementations of symmetric algorithms.  \\n  \\n Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the <xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.  \\n  \\n All cryptographic classes in the .NET Framework that hold sensitive data implement a `Clear` method. When called, the `Clear` method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the `Dispose` method with the `disposing` parameter set to `True` to dispose of all managed and unmanaged resources associated with the object.\"\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \\n  \\n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/t-system.security.crypto_19_1.cpp)]\\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/t-system.security.crypto_19_1.cs)]\\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_19_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class SymmetricAlgorithm : IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: SymmetricAlgorithm()\n  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class.\n  remarks: You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.\n  syntax:\n    content: protected SymmetricAlgorithm ();\n    parameters: []\n  overload: System.Security.Cryptography.SymmetricAlgorithm.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The implementation of the class derived from the symmetric algorithm is not valid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  id: BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the block size, in bits, of the cryptographic operation.\n  remarks: The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.\n  syntax:\n    content: public virtual int BlockSize { get; set; }\n    return:\n      type: System.Int32\n      description: The block size, in bits.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The block size is invalid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  id: BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the block size, in bits, of the cryptographic operation.\n  remarks: \"The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property.\"\n  syntax:\n    content: protected int BlockSizeValue;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  id: Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class.\n  remarks: \"Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the Clear method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.  \\n  \\n All cryptographic classes in the .NET Framework that hold sensitive data implement a `Clear` method. When called, the `Clear` method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the `Dispose` method with the `disposing` parameter set to `True` to dispose of all managed and unmanaged resources associated with the object.\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create\n  id: Create\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: SymmetricAlgorithm.Create()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates a default cryptographic object used to perform the symmetric algorithm.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \\n  \\n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/m-system.security.crypto_114_1.cpp)]\\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/m-system.security.crypto_114_1.cs)]\\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_114_1.vb)]\"\n  syntax:\n    content: public static System.Security.Cryptography.SymmetricAlgorithm Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: A default cryptographic object used to perform the symmetric algorithm.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: SymmetricAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates the specified cryptographic object used to perform the symmetric algorithm.\n  syntax:\n    content: public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: The name of the specific implementation of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class to use.\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: A cryptographic object used to perform the symmetric algorithm.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  id: CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates a symmetric decryptor object with the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>).\n  remarks: This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A> overload with the same signature.\n  syntax:\n    content: public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: A symmetric decryptor object.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  id: CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateDecryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates a symmetric decryptor object with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>).\n  remarks: This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A> overload with the same parameters.\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: The secret key to use for the symmetric algorithm.\n    - id: rgbIV\n      type: System.Byte[]\n      description: The initialization vector to use for the symmetric algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: A symmetric decryptor object.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  id: CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates a symmetric encryptor object with the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>).\n  remarks: \"If the current <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property is `null`, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> method is called to create a new random <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>. If the current <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property is `null`, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> method is called to create a new random <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>.  \\n  \\n Use the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A> overload with the same signature to decrypt the result of this method.\"\n  example:\n  - \"The following example encrypts a string using the transform object returned from the CreateEncryptor method.  \\n  \\n [!code-cpp[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_124_1.cpp)]\\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_124_1.cs)]\\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_124_1.vb)]\"\n  syntax:\n    content: public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: A symmetric encryptor object.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  id: CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateEncryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates a symmetric encryptor object with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key*> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>).\n  remarks: Use the <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A> overload with the same parameters to decrypt the result of this method.\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: The secret key to use for the symmetric algorithm.\n    - id: rgbIV\n      type: System.Byte[]\n      description: The initialization vector to use for the symmetric algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: A symmetric encryptor object.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.SymmetricAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.SymmetricAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.SymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.SymmetricAlgorithm> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.SymmetricAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.SymmetricAlgorithm> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.SymmetricAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  id: FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the feedback size, in bits, of the cryptographic operation.\n  remarks: The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.\n  syntax:\n    content: public virtual int FeedbackSize { get; set; }\n    return:\n      type: System.Int32\n      description: The feedback size in bits.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The feedback size is larger than the block size.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  id: FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the feedback size, in bits, of the cryptographic operation.\n  remarks: \"The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A> property.\"\n  syntax:\n    content: protected int FeedbackSizeValue;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  id: GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, generates a random initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) to use for the algorithm.\n  remarks: In general, there is no reason to use this method, because `CreateEncryptor()` or `CreateEncryptor(null, null)` automatically generates both an initialization vector and a key. However, you may want to use the GenerateIV method to reuse a symmetric algorithm instance with a different initialization vector.\n  syntax:\n    content: public abstract void GenerateIV ();\n    parameters: []\n  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  id: GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, generates a random key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) to use for the algorithm.\n  remarks: In general, there is no reason to use this method, because `CreateEncryptor()` or `CreateEncryptor(null, null)` automatically generates both an initialization vector and a key. However, you may want to use the GenerateKey method to reuse a symmetric algorithm instance with a different key.\n  syntax:\n    content: public abstract void GenerateKey ();\n    parameters: []\n  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  id: IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the initialization vector (IV) for the symmetric algorithm.\n  remarks: \"The IV property is automatically set to a new random value whenever you create a new instance of one of the <xref:System.Security.Cryptography.SymmetricAlgorithm> classes or when you manually call the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> method.  The size of the IV property must be the same as the <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A> property divided by 8.  \\n  \\n The classes that derive from the <xref:System.Security.Cryptography.SymmetricAlgorithm> class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the <xref:System.Security.Cryptography.SymmetricAlgorithm> classes, you must set the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and IV property to the same values that were used for encryption.  \\n  \\n For a given secret key *k*, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text. If you have duplicate blocks within your plain text stream, you will have duplicate blocks within your cipher text stream. If unauthorized users know anything about the structure of a block of your plain text, they can use that information to decipher the known cipher text block and possibly recover your key. To combat this problem, information from the previous block is mixed into the process of encrypting the next block. Thus, the output of two identical plain text blocks is different. Because this technique uses the previous block to encrypt the next block, an initialization vector is needed to encrypt the first block of data.\"\n  syntax:\n    content: public virtual byte[] IV { get; set; }\n    return:\n      type: System.Byte[]\n      description: The initialization vector.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.IV*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt was made to set the initialization vector to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An attempt was made to set the initialization vector to an invalid size.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  id: IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) for the symmetric algorithm.\n  remarks: This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> property.\n  syntax:\n    content: protected byte[] IVValue;\n    return:\n      type: System.Byte[]\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  id: Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the secret key for the symmetric algorithm.\n  remarks: \"The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.  \\n  \\n If this property is `null` when it is used, the <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> method is called to create a new random value.\"\n  syntax:\n    content: public virtual byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: The secret key to use for the symmetric algorithm.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Key*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: An attempt was made to set the key to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key size is invalid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.\n  remarks: The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.\n  syntax:\n    content: public virtual int KeySize { get; set; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the secret key used by the symmetric algorithm.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.KeySize*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key size is not valid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  id: KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the size, in bits, of the secret key used by the symmetric algorithm.\n  remarks: \"The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A> property.\"\n  syntax:\n    content: protected int KeySizeValue;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  id: KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the secret key for the symmetric algorithm.\n  remarks: \"The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property.\"\n  syntax:\n    content: protected byte[] KeyValue;\n    return:\n      type: System.Byte[]\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  id: LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the block sizes, in bits, that are supported by the symmetric algorithm.\n  remarks: The symmetric algorithm supports only block sizes that match an entry in this array.\n  example:\n  - \"The following example shows the value of LegalBlockSizes for the symmetric algorithms.  \\n  \\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_95_1.vb)]\\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_95_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: An array that contains the block sizes supported by the algorithm.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  id: LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Specifies the block sizes, in bits, that are supported by the symmetric algorithm.\n  remarks: \"The symmetric algorithm supports only block sizes that match an entry in this array.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A> property.\"\n  syntax:\n    content: protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the key sizes, in bits, that are supported by the symmetric algorithm.\n  remarks: The symmetric algorithm supports only key sizes that match an entry in this array.\n  example:\n  - \"The following example shows the value of LegalKeySizes for the symmetric algorithms.  \\n  \\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_72_1.vb)]\\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_72_1.cs)]\"\n  syntax:\n    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: An array that contains the key sizes supported by the algorithm.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  id: LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Specifies the key sizes, in bits, that are supported by the symmetric algorithm.\n  remarks: \"The symmetric algorithm supports only key sizes that match an entry in this array.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A> property.\"\n  syntax:\n    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  id: Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the mode for operation of the symmetric algorithm.\n  remarks: See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes.\n  syntax:\n    content: public virtual System.Security.Cryptography.CipherMode Mode { get; set; }\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: The mode for operation of the symmetric algorithm. The default is <xref href=\"System.Security.Cryptography.CipherMode\"></xref>.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Mode*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cipher mode is not one of the <xref href=\"System.Security.Cryptography.CipherMode\"></xref> values.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  id: ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the cipher mode used in the symmetric algorithm.\n  remarks: \"See <xref:System.Security.Cryptography.CipherMode> enumeration for a description of specific modes.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A> property.\"\n  syntax:\n    content: protected System.Security.Cryptography.CipherMode ModeValue;\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  id: Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the padding mode used in the symmetric algorithm.\n  remarks: Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes.\n  syntax:\n    content: public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }\n    return:\n      type: System.Security.Cryptography.PaddingMode\n      description: The padding mode used in the symmetric algorithm. The default is <xref href=\"System.Security.Cryptography.PaddingMode\"></xref>.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Padding*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The padding mode is not one of the <xref href=\"System.Security.Cryptography.PaddingMode\"></xref> values.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  id: PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the padding mode used in the symmetric algorithm.\n  remarks: \"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref:System.Security.Cryptography.PaddingMode> enumeration for a description of specific modes.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property.\"\n  syntax:\n    content: protected System.Security.Cryptography.PaddingMode PaddingValue;\n    return:\n      type: System.Security.Cryptography.PaddingMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  id: ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Determines whether the specified key size is valid for the current algorithm.\n  syntax:\n    content: public bool ValidKeySize (int bitLength);\n    parameters:\n    - id: bitLength\n      type: System.Int32\n      description: The length, in bits, to check for a valid key size.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified key size is valid for the current algorithm; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: SymmetricAlgorithm()\n  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Create()\n  nameWithType: SymmetricAlgorithm.Create()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Create(String)\n  nameWithType: SymmetricAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: KeySizes[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.CipherMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CipherMode\n  nameWithType: CipherMode\n  fullName: System.Security.Cryptography.CipherMode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.PaddingMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: PaddingMode\n  nameWithType: PaddingMode\n  fullName: System.Security.Cryptography.PaddingMode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Clear\n  nameWithType: SymmetricAlgorithm.Clear\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Create\n  nameWithType: SymmetricAlgorithm.Create\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor\n  nameWithType: SymmetricAlgorithm.CreateDecryptor\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor\n  nameWithType: SymmetricAlgorithm.CreateEncryptor\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose\n  nameWithType: SymmetricAlgorithm.Dispose\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateIV\n  nameWithType: SymmetricAlgorithm.GenerateIV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateKey\n  nameWithType: SymmetricAlgorithm.GenerateKey\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ValidKeySize\n  nameWithType: SymmetricAlgorithm.ValidKeySize\n"}