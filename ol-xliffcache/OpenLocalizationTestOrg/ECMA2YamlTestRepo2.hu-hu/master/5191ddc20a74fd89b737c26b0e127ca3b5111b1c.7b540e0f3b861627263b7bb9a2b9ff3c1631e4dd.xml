{"nodes":[{"pos":[682,882],"content":"Represents a lexical scope within <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.SymbolStore.ISymbolMethod\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, providing access to the start and end offsets of the scope, as well as its child and parent scopes.","needQuote":true,"needEscape":true,"source":"Represents a lexical scope within <xref href=\"System.Diagnostics.SymbolStore.ISymbolMethod\"></xref>, providing access to the start and end offsets of the scope, as well as its child and parent scopes."},{"pos":[895,1220],"content":"The ISymbolScope interface also provides access to all locals defined within the current scope.      > [!NOTE] >  This interface is the managed counterpart of the `ISymUnmanagedScope` interface, which is one of the unmanaged symbol store interfaces that provide an alternate way to read and write debug symbol information.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ISymbolScope interface also provides access to all locals defined within the current scope.","pos":[0,95]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This interface is the managed counterpart of the <ph id=\"ph2\">`ISymUnmanagedScope`</ph> interface, which is one of the unmanaged symbol store interfaces that provide an alternate way to read and write debug symbol information.","pos":[101,322],"source":"      > [!NOTE] >  This interface is the managed counterpart of the `ISymUnmanagedScope` interface, which is one of the unmanaged symbol store interfaces that provide an alternate way to read and write debug symbol information."}]},{"pos":[1754,1803],"content":"Gets the end offset of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the end offset of the current lexical scope.","pos":[0,49]}]},{"pos":[1913,1957],"content":"The end offset of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The end offset of the current lexical scope.","pos":[0,44]}]},{"pos":[2452,2511],"content":"Gets the child lexical scopes of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the child lexical scopes of the current lexical scope.","pos":[0,59]}]},{"pos":[2712,2771],"content":"The child lexical scopes that of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The child lexical scopes that of the current lexical scope.","pos":[0,59]}]},{"pos":[3258,3316],"content":"Gets the local variables within the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the local variables within the current lexical scope.","pos":[0,58]}]},{"pos":[3328,3528],"content":"The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.","pos":[0,200],"nodes":[{"content":"The local variables are returned in no particular order.","pos":[0,56]},{"content":"If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.","pos":[57,200]}]}]},{"pos":[3733,3786],"content":"The local variables within the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local variables within the current lexical scope.","pos":[0,53]}]},{"pos":[4291,4350],"content":"Gets the namespaces that are used within the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the namespaces that are used within the current scope.","pos":[0,59]}]},{"pos":[4561,4615],"content":"The namespaces that are used within the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The namespaces that are used within the current scope.","pos":[0,54]}]},{"pos":[5085,5141],"content":"Gets the method that contains the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the method that contains the current lexical scope.","pos":[0,56]}]},{"pos":[5321,5372],"content":"The method that contains the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method that contains the current lexical scope.","pos":[0,51]}]},{"pos":[5835,5886],"content":"Gets the parent lexical scope of the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parent lexical scope of the current scope.","pos":[0,51]}]},{"pos":[6064,6110],"content":"The parent lexical scope of the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parent lexical scope of the current scope.","pos":[0,46]}]},{"pos":[6598,6649],"content":"Gets the start offset of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the start offset of the current lexical scope.","pos":[0,51]}]},{"pos":[6761,6807],"content":"The start offset of the current lexical scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The start offset of the current lexical scope.","pos":[0,46]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.SymbolStore.ISymbolScope\n  id: ISymbolScope\n  children:\n  - System.Diagnostics.SymbolStore.ISymbolScope.EndOffset\n  - System.Diagnostics.SymbolStore.ISymbolScope.GetChildren\n  - System.Diagnostics.SymbolStore.ISymbolScope.GetLocals\n  - System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces\n  - System.Diagnostics.SymbolStore.ISymbolScope.Method\n  - System.Diagnostics.SymbolStore.ISymbolScope.Parent\n  - System.Diagnostics.SymbolStore.ISymbolScope.StartOffset\n  langs:\n  - csharp\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope\n  type: Interface\n  summary: Represents a lexical scope within <xref href=\"System.Diagnostics.SymbolStore.ISymbolMethod\"></xref>, providing access to the start and end offsets of the scope, as well as its child and parent scopes.\n  remarks: \"The ISymbolScope interface also provides access to all locals defined within the current scope.  \\n  \\n> [!NOTE]\\n>  This interface is the managed counterpart of the `ISymUnmanagedScope` interface, which is one of the unmanaged symbol store interfaces that provide an alternate way to read and write debug symbol information.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ISymbolScope\n  implements: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.EndOffset\n  id: EndOffset\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: EndOffset\n  nameWithType: ISymbolScope.EndOffset\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.EndOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the end offset of the current lexical scope.\n  syntax:\n    content: public int EndOffset { get; }\n    return:\n      type: System.Int32\n      description: The end offset of the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.EndOffset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetChildren\n  id: GetChildren\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: GetChildren()\n  nameWithType: ISymbolScope.GetChildren()\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.GetChildren()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the child lexical scopes of the current lexical scope.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope[]\n      description: The child lexical scopes that of the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.GetChildren*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetLocals\n  id: GetLocals\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: GetLocals()\n  nameWithType: ISymbolScope.GetLocals()\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.GetLocals()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the local variables within the current lexical scope.\n  remarks: The local variables are returned in no particular order. If a local variable changes its address within the current scope, that variable is returned multiple times, each with a different offset range.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolVariable[]\n      description: The local variables within the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.GetLocals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces\n  id: GetNamespaces\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: GetNamespaces()\n  nameWithType: ISymbolScope.GetNamespaces()\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the namespaces that are used within the current scope.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n      description: The namespaces that are used within the current scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.Method\n  id: Method\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: Method\n  nameWithType: ISymbolScope.Method\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.Method\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the method that contains the current lexical scope.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolMethod Method { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolMethod\n      description: The method that contains the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.Method*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.Parent\n  id: Parent\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: ISymbolScope.Parent\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.Parent\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the parent lexical scope of the current scope.\n  syntax:\n    content: public System.Diagnostics.SymbolStore.ISymbolScope Parent { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The parent lexical scope of the current scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.Parent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.StartOffset\n  id: StartOffset\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  langs:\n  - csharp\n  name: StartOffset\n  nameWithType: ISymbolScope.StartOffset\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.StartOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the start offset of the current lexical scope.\n  syntax:\n    content: public int StartOffset { get; }\n    return:\n      type: System.Int32\n      description: The start offset of the current lexical scope.\n  overload: System.Diagnostics.SymbolStore.ISymbolScope.StartOffset*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.EndOffset\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: EndOffset\n  nameWithType: ISymbolScope.EndOffset\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.EndOffset\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetChildren\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: GetChildren()\n  nameWithType: ISymbolScope.GetChildren()\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.GetChildren()\n- uid: System.Diagnostics.SymbolStore.ISymbolScope[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolScope\n    name: ISymbolScope\n    nameWithType: ISymbolScope\n    fullName: ISymbolScope[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetLocals\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: GetLocals()\n  nameWithType: ISymbolScope.GetLocals()\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.GetLocals()\n- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolVariable\n  nameWithType: ISymbolVariable\n  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolVariable\n    name: ISymbolVariable\n    nameWithType: ISymbolVariable\n    fullName: ISymbolVariable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: GetNamespaces()\n  nameWithType: ISymbolScope.GetNamespaces()\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces()\n- uid: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolNamespace\n  nameWithType: ISymbolNamespace\n  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolNamespace\n    name: ISymbolNamespace\n    nameWithType: ISymbolNamespace\n    fullName: ISymbolNamespace[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.Method\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: Method\n  nameWithType: ISymbolScope.Method\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.Method\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolMethod\n  nameWithType: ISymbolMethod\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.Parent\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: Parent\n  nameWithType: ISymbolScope.Parent\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.Parent\n- uid: System.Diagnostics.SymbolStore.ISymbolScope\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.StartOffset\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: StartOffset\n  nameWithType: ISymbolScope.StartOffset\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope.StartOffset\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.EndOffset*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: EndOffset\n  nameWithType: ISymbolScope.EndOffset\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetChildren*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: GetChildren\n  nameWithType: ISymbolScope.GetChildren\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetLocals*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: GetLocals\n  nameWithType: ISymbolScope.GetLocals\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: GetNamespaces\n  nameWithType: ISymbolScope.GetNamespaces\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.Method*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: Method\n  nameWithType: ISymbolScope.Method\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.Parent*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: Parent\n  nameWithType: ISymbolScope.Parent\n- uid: System.Diagnostics.SymbolStore.ISymbolScope.StartOffset*\n  parent: System.Diagnostics.SymbolStore.ISymbolScope\n  isExternal: false\n  name: StartOffset\n  nameWithType: ISymbolScope.StartOffset\n"}