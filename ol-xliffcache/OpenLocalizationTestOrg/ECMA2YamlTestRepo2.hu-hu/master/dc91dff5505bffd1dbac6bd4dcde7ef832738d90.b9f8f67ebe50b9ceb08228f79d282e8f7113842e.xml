{"nodes":[{"pos":[677,839],"content":"Sets the mode for authorization checks when using the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to control access to a method.","needQuote":true,"needEscape":true,"source":"Sets the mode for authorization checks when using the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> to control access to a method."},{"pos":[7918,8058],"content":"Always enables the user to specify a <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Always enables the user to specify a &lt;xref:System.Security.Principal.IPrincipal&gt; class for &lt;xref:System.Threading.Thread.CurrentPrincipal*&gt;.","pos":[0,140],"source":"Always enables the user to specify a <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>."}]},{"pos":[8188,8200],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8655,8795],"content":"Enables the user to specify a custom <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enables the user to specify a custom &lt;xref:System.Security.Principal.IPrincipal&gt; class for &lt;xref:System.Threading.Thread.CurrentPrincipal*&gt;.","pos":[0,140],"source":"Enables the user to specify a custom <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>."}]},{"pos":[8925,8937],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9382,9442],"content":"<xref:System.Threading.Thread.CurrentPrincipal*> is not set.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.CurrentPrincipal*&gt; is not set.","pos":[0,60],"source":"<xref:System.Threading.Thread.CurrentPrincipal*> is not set."}]},{"pos":[9570,9582],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10077,10254],"content":"&lt;xref:System.Threading.Thread.CurrentPrincipal*&gt; is set based on the <ph id=\"ph1\">[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]</ph> role provider (&lt;xref:System.Web.Security.RoleProvider&gt;).","needQuote":true,"needEscape":true,"source":"<xref:System.Threading.Thread.CurrentPrincipal*> is set based on the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] role provider (<xref:System.Web.Security.RoleProvider>)."},{"pos":[10392,10404],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10909,11138],"content":"<xref:System.Threading.Thread.CurrentPrincipal*> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>). If the user identity is not associated with a Windows account, anonymous Windows is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Threading.Thread.CurrentPrincipal*&gt; is set based on Windows (<bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","pos":[0,139],"source":"<xref:System.Threading.Thread.CurrentPrincipal*> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>)."},{"content":"If the user identity is not associated with a Windows account, anonymous Windows is used.","pos":[140,229]}]},{"pos":[11278,11290],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Description.PrincipalPermissionMode\n  id: PrincipalPermissionMode\n  children:\n  - System.ServiceModel.Description.PrincipalPermissionMode.Always\n  - System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  - System.ServiceModel.Description.PrincipalPermissionMode.None\n  - System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  - System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  langs:\n  - csharp\n  name: PrincipalPermissionMode\n  nameWithType: PrincipalPermissionMode\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode\n  type: Enum\n  summary: Sets the mode for authorization checks when using the <xref href=\"System.Security.Permissions.PrincipalPermissionAttribute\"></xref> to control access to a method.\n  remarks: \"When applying the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a method, this mode specifies which set of roles to use when authorizing access. By default, the attribute uses Windows groups (such as `Administrator` or `Users`) to specify the role to which the user must belong.  \\n  \\n To set the mode programmatically, create an instance of the `ServiceHost` class, then find the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> in its collection of behaviors, and set the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> to the appropriate enumeration. The following example sets the property to UseAspNetRoles.  \\n  \\n [!code-cs[PrincipalPermissionMode#1](~/add/codesnippet/csharp/t-system.servicemodel.de_16_1.cs)]\\n [!code-vb[PrincipalPermissionMode#1](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_1.vb)]  \\n  \\n You can also set the behavior in configuration by adding a [\\\\&lt;serviceAuthorization\\\\&gt;](../Topic/%3CserviceAuthorization%3E%20element.md) to the [\\\\&lt;serviceBehaviors\\\\&gt;](../Topic/%3CserviceBehaviors%3E.md) of a configuration file, as shown in the following code.  \\n  \\n [!code-cs[PrincipalPermissionMode#10](~/add/codesnippet/csharp/t-system.servicemodel.de_16_2.cs)]\\n [!code-vb[PrincipalPermissionMode#10](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_2.vb)]  \\n  \\n The enumeration affects how the <xref:System.Security.Permissions.PrincipalPermissionAttribute> attribute authorizes a user when it is applied to a method. The following example applies the attribute to a method and demands that the user belong to the Users group on the computer. This code works only when the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode%2A> is set to `UseWindowsGroup` (the default setting).  \\n  \\n [!code-cs[PrincipalPermissionMode#2](~/add/codesnippet/csharp/t-system.servicemodel.de_16_3.cs)]\\n [!code-vb[PrincipalPermissionMode#2](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_3.vb)]  \\n  \\n## UseAspNetRoles  \\n The UseAspNetRoles value is used for all credential types. This mode enables [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] to use the ASP.NET role provider to make authorization decisions.  \\n  \\n When the credential for a service is an X.509 certificate, you can set the `Name` property of the <xref:System.Security.Permissions.PrincipalPermissionAttribute> to a string that consists of the concatenated values of the Subject field and the Thumbprint field, as shown in the following example.  \\n  \\n [!code-cs[PrincipalPermissionMode#3](~/add/codesnippet/csharp/t-system.servicemodel.de_16_4.cs)]\\n [!code-vb[PrincipalPermissionMode#3](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_4.vb)]  \\n  \\n The concatenated string consists of the subject and thumbprint values separated by a semicolon and a space.  \\n  \\n It is also possible for a certificate to have a Subject field set to a null string. In that case, you can set the `Name` property to a semicolon followed by a space and then the thumbprint, as shown in the following example.  \\n  \\n [!code-cs[PrincipalPermissionMode#4](~/add/codesnippet/csharp/t-system.servicemodel.de_16_5.cs)]\\n [!code-vb[PrincipalPermissionMode#4](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_5.vb)]  \\n  \\n If an ASP.NET role provider is present, you can also set the <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> property to a role in the database. By default, the database is represented by the <xref:System.Web.Security.SqlRoleProvider>. You can also set a custom role provider with the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider%2A> property of the <xref:System.ServiceModel.Description.ServiceAuthorizationBehavior> class. The following code sets the role to `Administrators`. Note that the role provider must map the user account to that role.  \\n  \\n [!code-cs[PrincipalPermissionMode#13](~/add/codesnippet/csharp/t-system.servicemodel.de_16_6.cs)]\\n [!code-vb[PrincipalPermissionMode#13](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_6.vb)]  \\n  \\n [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] the ASP.NET Role provider, see [How To: Use Role Manager in ASP.NET 2.0](http://go.microsoft.com/fwlink/?LinkId=96692).  \\n  \\n [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] using [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] and the role provider, see [How to: Use the ASP.NET Role Provider with a Service](~/add/includes/ajax-current-ext-md.md).  \\n  \\n## Custom  \\n When the property is set to Custom, you must also provide a custom class that implements the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. This class is responsible for providing the caller's `IPrincipal` representation inside the <xref:System.IdentityModel.Policy.EvaluationContext.Properties%2A> collection. It must store the `IPrincipal` instance to the properties collection using the \\\"Principal\\\" string key, as shown in the following example.  \\n  \\n```  \\nevaluationContext.Properties[\\\"Principal\\\"]=new CustomPrincipal(identity);  \\n```  \\n  \\n## Background  \\n The role-based security in [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] enables applications to specify authorizations through code. By specifying the <xref:System.Security.Permissions.PrincipalPermission> demand, the <xref:System.Threading.Thread.CurrentPrincipal%2A> must satisfy the `PrincipalPermission` requirement. For example, that the user must be in a specific role or group. Otherwise, the thread is not authorized to execute the code, which results in an exception. [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] provides a set of PrincipalPermissionMode selections to specify the <xref:System.Threading.Thread.CurrentPrincipal%2A> based on <xref:System.Security.SecurityContext> accordingly.\"\n  example:\n  - \"The following example shows how to specify UseAspNetRoles.  \\n  \\n [!code-cs[PrincipalPermissionMode#7](~/add/codesnippet/csharp/t-system.servicemodel.de_16_7.cs)]\\n [!code-vb[PrincipalPermissionMode#7](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_7.vb)]  \\n  \\n The following example shows how to specify Custom.  \\n  \\n [!code-cs[PrincipalPermissionMode#8](~/add/codesnippet/csharp/t-system.servicemodel.de_16_8.cs)]\\n [!code-vb[PrincipalPermissionMode#8](~/add/codesnippet/visualbasic/t-system.servicemodel.de_16_8.vb)]\"\n  syntax:\n    content: public enum PrincipalPermissionMode\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Always\n  id: Always\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: Always\n  nameWithType: PrincipalPermissionMode.Always\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Always\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Always enables the user to specify a <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>.\n  syntax:\n    content: Always\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  id: Custom\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: Custom\n  nameWithType: PrincipalPermissionMode.Custom\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Enables the user to specify a custom <xref:System.Security.Principal.IPrincipal> class for <xref:System.Threading.Thread.CurrentPrincipal*>.\n  syntax:\n    content: Custom\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.None\n  id: None\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: None\n  nameWithType: PrincipalPermissionMode.None\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.None\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: <xref:System.Threading.Thread.CurrentPrincipal*> is not set.\n  syntax:\n    content: None\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  id: UseAspNetRoles\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: UseAspNetRoles\n  nameWithType: PrincipalPermissionMode.UseAspNetRoles\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: <xref:System.Threading.Thread.CurrentPrincipal*> is set based on the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] role provider (<xref:System.Web.Security.RoleProvider>).\n  syntax:\n    content: UseAspNetRoles\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  id: UseWindowsGroups\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  langs:\n  - csharp\n  name: UseWindowsGroups\n  nameWithType: PrincipalPermissionMode.UseWindowsGroups\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  type: Field\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: <xref:System.Threading.Thread.CurrentPrincipal*> is set based on Windows (<xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>). If the user identity is not associated with a Windows account, anonymous Windows is used.\n  syntax:\n    content: UseWindowsGroups\n    return:\n      type: System.ServiceModel.Description.PrincipalPermissionMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Always\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: Always\n  nameWithType: PrincipalPermissionMode.Always\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Always\n- uid: System.ServiceModel.Description.PrincipalPermissionMode\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: PrincipalPermissionMode\n  nameWithType: PrincipalPermissionMode\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.Custom\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: Custom\n  nameWithType: PrincipalPermissionMode.Custom\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.Custom\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.None\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: None\n  nameWithType: PrincipalPermissionMode.None\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.None\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: UseAspNetRoles\n  nameWithType: PrincipalPermissionMode.UseAspNetRoles\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseAspNetRoles\n- uid: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n  parent: System.ServiceModel.Description.PrincipalPermissionMode\n  isExternal: false\n  name: UseWindowsGroups\n  nameWithType: PrincipalPermissionMode.UseWindowsGroups\n  fullName: System.ServiceModel.Description.PrincipalPermissionMode.UseWindowsGroups\n"}