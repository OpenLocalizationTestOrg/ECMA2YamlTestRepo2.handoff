{"nodes":[{"pos":[1433,1519],"content":"Contains a collection of locked configuration objects. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains a collection of locked configuration objects. This class cannot be inherited.","pos":[0,86],"nodes":[{"content":"Contains a collection of locked configuration objects.","pos":[0,54]},{"content":"This class cannot be inherited.","pos":[55,86]}]}]},{"pos":[1531,2158],"content":"In a configuration file, a configuration section contains both attributes and elements. A ConfigurationLockCollection collection exists for the locked attributes of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockAttributes%2A> property of the <xref:System.Configuration.ConfigurationElement> class. Another ConfigurationLockCollection collection exists for the locked elements of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockElements%2A> property of the <xref:System.Configuration.ConfigurationElement> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In a configuration file, a configuration section contains both attributes and elements. A ConfigurationLockCollection collection exists for the locked attributes of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockAttributes%2A> property of the <xref:System.Configuration.ConfigurationElement> class. Another ConfigurationLockCollection collection exists for the locked elements of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockElements%2A> property of the <xref:System.Configuration.ConfigurationElement> class.","pos":[0,627],"nodes":[{"content":"In a configuration file, a configuration section contains both attributes and elements.","pos":[0,87]},{"content":"A ConfigurationLockCollection collection exists for the locked attributes of a configuration section, and is accessed through the &lt;xref:System.Configuration.ConfigurationElement.LockAttributes%2A&gt; property of the &lt;xref:System.Configuration.ConfigurationElement&gt; class.","pos":[88,356],"source":" A ConfigurationLockCollection collection exists for the locked attributes of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockAttributes%2A> property of the <xref:System.Configuration.ConfigurationElement> class."},{"content":"Another ConfigurationLockCollection collection exists for the locked elements of a configuration section, and is accessed through the &lt;xref:System.Configuration.ConfigurationElement.LockElements%2A&gt; property of the &lt;xref:System.Configuration.ConfigurationElement&gt; class.","pos":[357,627],"source":" Another ConfigurationLockCollection collection exists for the locked elements of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockElements%2A> property of the <xref:System.Configuration.ConfigurationElement> class."}]}]},{"pos":[3183,3243],"content":"Locks a configuration object by adding it to the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Locks a configuration object by adding it to the collection.","pos":[0,60]}]},{"pos":[3255,3478],"content":"Adding a configuration object to the <xref:System.Configuration.ConfigurationLockCollection> collection specifies that the configuration object is locked and cannot be modified until it has been removed from the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Adding a configuration object to the &lt;xref:System.Configuration.ConfigurationLockCollection&gt; collection specifies that the configuration object is locked and cannot be modified until it has been removed from the collection.","pos":[0,223],"source":"Adding a configuration object to the <xref:System.Configuration.ConfigurationLockCollection> collection specifies that the configuration object is locked and cannot be modified until it has been removed from the collection."}]},{"pos":[4076,4113],"content":"The name of the configuration object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the configuration object.","pos":[0,37]}]},{"pos":[4338,4442],"content":"Occurs when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match an existing configuration object within the collection.","needQuote":true,"needEscape":true,"source":"Occurs when the <code>name</code> does not match an existing configuration object within the collection."},{"pos":[4891,4956],"content":"Gets a list of configuration objects contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a list of configuration objects contained in the collection.","pos":[0,65]}]},{"pos":[5569,5654],"content":"A comma-delimited string that lists the lock configuration objects in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A comma-delimited string that lists the lock configuration objects in the collection.","pos":[0,85]}]},{"pos":[6160,6213],"content":"Clears all configuration objects from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears all configuration objects from the collection.","pos":[0,53]}]},{"pos":[7325,7384],"content":"Verifies whether a specific configuration object is locked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies whether a specific configuration object is locked.","pos":[0,59]}]},{"pos":[7520,7567],"content":"The name of the configuration object to verify.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the configuration object to verify.","pos":[0,47]}]},{"pos":[7626,7883],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains the specified configuration object; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> contains the specified configuration object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8491,8695],"content":"Copies the entire <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"source":"Copies the entire <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array."},{"pos":[8846,9065],"content":"A one-dimensional <xref:System.Array> that is the destination of the elements copied from the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,164],"source":"A one-dimensional <xref:System.Array> that is the destination of the elements copied from the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[165,219],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[9126,9182],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[9677,9753],"content":"Gets the number of locked configuration objects contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of locked configuration objects contained in the collection.","pos":[0,76]}]},{"pos":[10346,10417],"content":"The number of locked configuration objects contained in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of locked configuration objects contained in the collection.","pos":[0,71]}]},{"pos":[10955,11128],"content":"Gets an &lt;xref:System.Collections.IEnumerator&gt; object, which is used to iterate through this <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"Gets an <xref:System.Collections.IEnumerator> object, which is used to iterate through this <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection."},{"pos":[11301,11349],"content":"An <xref:System.Collections.IEnumerator> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; object.","pos":[0,48],"source":"An <xref:System.Collections.IEnumerator> object."}]},{"pos":[11911,11996],"content":"Gets a value specifying whether the collection of locked objects has parent elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value specifying whether the collection of locked objects has parent elements.","pos":[0,85]}]},{"pos":[12616,12860],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> collection has parent elements; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection has parent elements; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13391,13456],"content":"Gets a value specifying whether the collection has been modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value specifying whether the collection has been modified.","pos":[0,65]}]},{"pos":[14062,14304],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> collection has been modified; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection has been modified; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14880,14942],"content":"Verifies whether a specific configuration object is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies whether a specific configuration object is read-only.","pos":[0,62]}]},{"pos":[15568,15615],"content":"The name of the configuration object to verify.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the configuration object to verify.","pos":[0,47]}]},{"pos":[15674,15949],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified configuration object in the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> collection is read-only; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified configuration object in the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16181,16241],"content":"The specified configuration object is not in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified configuration object is not in the collection.","pos":[0,60]}]},{"pos":[16695,16758],"content":"Gets a value specifying whether the collection is synchronized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value specifying whether the collection is synchronized.","pos":[0,63]}]},{"pos":[16876,17116],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> collection is synchronized; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection is synchronized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17676,17727],"content":"Removes a configuration object from the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes a configuration object from the collection.","pos":[0,51]}]},{"pos":[18349,18386],"content":"The name of the configuration object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the configuration object.","pos":[0,37]}]},{"pos":[18614,18718],"content":"Occurs when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match an existing configuration object within the collection.","needQuote":true,"needEscape":true,"source":"Occurs when the <code>name</code> does not match an existing configuration object within the collection."},{"pos":[19209,19273],"content":"Locks a set of configuration objects based on the supplied list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Locks a set of configuration objects based on the supplied list.","pos":[0,64]}]},{"pos":[19921,19946],"content":"A comma-delimited string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A comma-delimited string.","pos":[0,25]}]},{"pos":[20179,20291],"content":"Occurs when an item in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid lockable configuration attribute.","needQuote":true,"needEscape":true,"source":"Occurs when an item in the <code>attributeList</code> parameter is not a valid lockable configuration attribute."},{"pos":[20715,20846],"content":"Gets an object used to synchronize access to this <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"Gets an object used to synchronize access to this <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection."},{"pos":[20959,21085],"content":"An object used to synchronize access to this <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","needQuote":true,"needEscape":true,"source":"An object used to synchronize access to this <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection."},{"pos":[21847,22051],"content":"Copies the entire <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.","needQuote":true,"needEscape":true,"source":"Copies the entire <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array."},{"pos":[22201,22431],"content":"A one-dimensional <xref:System.Array> that is the destination of the elements copied from the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.ConfigurationLockCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection.","pos":[0,175],"source":"A one-dimensional <xref:System.Array> that is the destination of the elements copied from the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[176,230],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[22492,22548],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.ConfigurationLockCollection\n  id: ConfigurationLockCollection\n  children:\n  - System.Configuration.ConfigurationLockCollection.Add(System.String)\n  - System.Configuration.ConfigurationLockCollection.AttributeList\n  - System.Configuration.ConfigurationLockCollection.Clear\n  - System.Configuration.ConfigurationLockCollection.Contains(System.String)\n  - System.Configuration.ConfigurationLockCollection.CopyTo(System.String[],System.Int32)\n  - System.Configuration.ConfigurationLockCollection.Count\n  - System.Configuration.ConfigurationLockCollection.GetEnumerator\n  - System.Configuration.ConfigurationLockCollection.HasParentElements\n  - System.Configuration.ConfigurationLockCollection.IsModified\n  - System.Configuration.ConfigurationLockCollection.IsReadOnly(System.String)\n  - System.Configuration.ConfigurationLockCollection.IsSynchronized\n  - System.Configuration.ConfigurationLockCollection.Remove(System.String)\n  - System.Configuration.ConfigurationLockCollection.SetFromList(System.String)\n  - System.Configuration.ConfigurationLockCollection.SyncRoot\n  - System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  langs:\n  - csharp\n  name: ConfigurationLockCollection\n  nameWithType: ConfigurationLockCollection\n  fullName: System.Configuration.ConfigurationLockCollection\n  type: Class\n  summary: Contains a collection of locked configuration objects. This class cannot be inherited.\n  remarks: In a configuration file, a configuration section contains both attributes and elements. A ConfigurationLockCollection collection exists for the locked attributes of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockAttributes%2A> property of the <xref:System.Configuration.ConfigurationElement> class. Another ConfigurationLockCollection collection exists for the locked elements of a configuration section, and is accessed through the <xref:System.Configuration.ConfigurationElement.LockElements%2A> property of the <xref:System.Configuration.ConfigurationElement> class.\n  example:\n  - \"The following code example demonstrates how to use the ConfigurationLockCollection type.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#1](~/add/codesnippet/visualbasic/t-system.configuration.c_5_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#1](~/add/codesnippet/csharp/t-system.configuration.c_5_1.cs)]\"\n  syntax:\n    content: 'public sealed class ConfigurationLockCollection : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.Add(System.String)\n  id: Add(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: Add(String)\n  nameWithType: ConfigurationLockCollection.Add(String)\n  fullName: System.Configuration.ConfigurationLockCollection.Add(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Locks a configuration object by adding it to the collection.\n  remarks: Adding a configuration object to the <xref:System.Configuration.ConfigurationLockCollection> collection specifies that the configuration object is locked and cannot be modified until it has been removed from the collection.\n  example:\n  - \"The following code example demonstrates how to use the Add method. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#3](~/add/codesnippet/visualbasic/m-system.configuration.c_1_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#3](~/add/codesnippet/csharp/m-system.configuration.c_1_1.cs)]\"\n  syntax:\n    content: public void Add (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the configuration object.\n  overload: System.Configuration.ConfigurationLockCollection.Add*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: Occurs when the <code>name</code> does not match an existing configuration object within the collection.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.AttributeList\n  id: AttributeList\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: AttributeList\n  nameWithType: ConfigurationLockCollection.AttributeList\n  fullName: System.Configuration.ConfigurationLockCollection.AttributeList\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a list of configuration objects contained in the collection.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the AttributeList property. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#5](~/add/codesnippet/visualbasic/p-system.configuration.c_16_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#5](~/add/codesnippet/csharp/p-system.configuration.c_16_1.cs)]\"\n  syntax:\n    content: public string AttributeList { get; }\n    return:\n      type: System.String\n      description: A comma-delimited string that lists the lock configuration objects in the collection.\n  overload: System.Configuration.ConfigurationLockCollection.AttributeList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.Clear\n  id: Clear\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ConfigurationLockCollection.Clear()\n  fullName: System.Configuration.ConfigurationLockCollection.Clear()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Clears all configuration objects from the collection.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the Clear method. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#11](~/add/codesnippet/visualbasic/m-system.configuration.c_39_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#11](~/add/codesnippet/csharp/m-system.configuration.c_39_1.cs)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Configuration.ConfigurationLockCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: ConfigurationLockCollection.Contains(String)\n  fullName: System.Configuration.ConfigurationLockCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Verifies whether a specific configuration object is locked.\n  syntax:\n    content: public bool Contains (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the configuration object to verify.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> contains the specified configuration object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationLockCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.CopyTo(System.String[],System.Int32)\n  id: CopyTo(System.String[],System.Int32)\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: CopyTo(String[],Int32)\n  nameWithType: ConfigurationLockCollection.CopyTo(String[],Int32)\n  fullName: System.Configuration.ConfigurationLockCollection.CopyTo(String[],Int32)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Copies the entire <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.\n  syntax:\n    content: public void CopyTo (string[] array, int index);\n    parameters:\n    - id: array\n      type: System.String[]\n      description: A one-dimensional <xref:System.Array> that is the destination of the elements copied from the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Configuration.ConfigurationLockCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.Count\n  id: Count\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ConfigurationLockCollection.Count\n  fullName: System.Configuration.ConfigurationLockCollection.Count\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets the number of locked configuration objects contained in the collection.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the Count property. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#4](~/add/codesnippet/visualbasic/p-system.configuration.c_12_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#4](~/add/codesnippet/csharp/p-system.configuration.c_12_1.cs)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of locked configuration objects contained in the collection.\n  overload: System.Configuration.ConfigurationLockCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ConfigurationLockCollection.GetEnumerator()\n  fullName: System.Configuration.ConfigurationLockCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets an <xref:System.Collections.IEnumerator> object, which is used to iterate through this <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> object.\n  overload: System.Configuration.ConfigurationLockCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.HasParentElements\n  id: HasParentElements\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: HasParentElements\n  nameWithType: ConfigurationLockCollection.HasParentElements\n  fullName: System.Configuration.ConfigurationLockCollection.HasParentElements\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value specifying whether the collection of locked objects has parent elements.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the HasParentElements property. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#7](~/add/codesnippet/visualbasic/p-system.configuration.c_28_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#7](~/add/codesnippet/csharp/p-system.configuration.c_28_1.cs)]\"\n  syntax:\n    content: public bool HasParentElements { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection has parent elements; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationLockCollection.HasParentElements*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.IsModified\n  id: IsModified\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: IsModified\n  nameWithType: ConfigurationLockCollection.IsModified\n  fullName: System.Configuration.ConfigurationLockCollection.IsModified\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value specifying whether the collection has been modified.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the IsModified property. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#8](~/add/codesnippet/visualbasic/p-system.configuration.c_10_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#8](~/add/codesnippet/csharp/p-system.configuration.c_10_1.cs)]\"\n  syntax:\n    content: public bool IsModified { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection has been modified; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationLockCollection.IsModified*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.IsReadOnly(System.String)\n  id: IsReadOnly(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: IsReadOnly(String)\n  nameWithType: ConfigurationLockCollection.IsReadOnly(String)\n  fullName: System.Configuration.ConfigurationLockCollection.IsReadOnly(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Verifies whether a specific configuration object is read-only.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the IsReadOnly method. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#9](~/add/codesnippet/visualbasic/m-system.configuration.c_8_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#9](~/add/codesnippet/csharp/m-system.configuration.c_8_1.cs)]\"\n  syntax:\n    content: public bool IsReadOnly (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the configuration object to verify.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified configuration object in the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationLockCollection.IsReadOnly*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The specified configuration object is not in the collection.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: ConfigurationLockCollection.IsSynchronized\n  fullName: System.Configuration.ConfigurationLockCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets a value specifying whether the collection is synchronized.\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection is synchronized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.ConfigurationLockCollection.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: ConfigurationLockCollection.Remove(String)\n  fullName: System.Configuration.ConfigurationLockCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Removes a configuration object from the collection.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the Remove method. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#10](~/add/codesnippet/visualbasic/m-system.configuration.c_11_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#10](~/add/codesnippet/csharp/m-system.configuration.c_11_1.cs)]\"\n  syntax:\n    content: public void Remove (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the configuration object.\n  overload: System.Configuration.ConfigurationLockCollection.Remove*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: Occurs when the <code>name</code> does not match an existing configuration object within the collection.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.SetFromList(System.String)\n  id: SetFromList(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: SetFromList(String)\n  nameWithType: ConfigurationLockCollection.SetFromList(String)\n  fullName: System.Configuration.ConfigurationLockCollection.SetFromList(String)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Locks a set of configuration objects based on the supplied list.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the SetFromList method. This code example is part of a larger example provided for the <xref:System.Configuration.ConfigurationLockCollection> class.  \\n  \\n [!code-vb[System.Configuration.ConfigurationLockCollection#12](~/add/codesnippet/visualbasic/m-system.configuration.c_4_1.vb)]\\n [!code-cs[System.Configuration.ConfigurationLockCollection#12](~/add/codesnippet/csharp/m-system.configuration.c_4_1.cs)]\"\n  syntax:\n    content: public void SetFromList (string attributeList);\n    parameters:\n    - id: attributeList\n      type: System.String\n      description: A comma-delimited string.\n  overload: System.Configuration.ConfigurationLockCollection.SetFromList*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: Occurs when an item in the <code>attributeList</code> parameter is not a valid lockable configuration attribute.\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: ConfigurationLockCollection.SyncRoot\n  fullName: System.Configuration.ConfigurationLockCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Gets an object used to synchronize access to this <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection.\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object used to synchronize access to this <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection.\n  overload: System.Configuration.ConfigurationLockCollection.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Configuration.ConfigurationLockCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConfigurationLockCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Configuration.ConfigurationLockCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Configuration\n  namespace: System.Configuration\n  summary: Copies the entire <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: A one-dimensional <xref:System.Array> that is the destination of the elements copied from the <xref href=\"System.Configuration.ConfigurationLockCollection\"></xref> collection. The <xref:System.Array> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Configuration.ConfigurationErrorsException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationErrorsException\n  nameWithType: ConfigurationErrorsException\n  fullName: System.Configuration.ConfigurationErrorsException\n- uid: System.Configuration.ConfigurationLockCollection.Add(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Add(String)\n  nameWithType: ConfigurationLockCollection.Add(String)\n  fullName: System.Configuration.ConfigurationLockCollection.Add(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.ConfigurationLockCollection.AttributeList\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: AttributeList\n  nameWithType: ConfigurationLockCollection.AttributeList\n  fullName: System.Configuration.ConfigurationLockCollection.AttributeList\n- uid: System.Configuration.ConfigurationLockCollection.Clear\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: ConfigurationLockCollection.Clear()\n  fullName: System.Configuration.ConfigurationLockCollection.Clear()\n- uid: System.Configuration.ConfigurationLockCollection.Contains(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: ConfigurationLockCollection.Contains(String)\n  fullName: System.Configuration.ConfigurationLockCollection.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Configuration.ConfigurationLockCollection.CopyTo(System.String[],System.Int32)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: CopyTo(String[],Int32)\n  nameWithType: ConfigurationLockCollection.CopyTo(String[],Int32)\n  fullName: System.Configuration.ConfigurationLockCollection.CopyTo(String[],Int32)\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Configuration.ConfigurationLockCollection.Count\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Count\n  nameWithType: ConfigurationLockCollection.Count\n  fullName: System.Configuration.ConfigurationLockCollection.Count\n- uid: System.Configuration.ConfigurationLockCollection.GetEnumerator\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ConfigurationLockCollection.GetEnumerator()\n  fullName: System.Configuration.ConfigurationLockCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Configuration.ConfigurationLockCollection.HasParentElements\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: HasParentElements\n  nameWithType: ConfigurationLockCollection.HasParentElements\n  fullName: System.Configuration.ConfigurationLockCollection.HasParentElements\n- uid: System.Configuration.ConfigurationLockCollection.IsModified\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: IsModified\n  nameWithType: ConfigurationLockCollection.IsModified\n  fullName: System.Configuration.ConfigurationLockCollection.IsModified\n- uid: System.Configuration.ConfigurationLockCollection.IsReadOnly(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: IsReadOnly(String)\n  nameWithType: ConfigurationLockCollection.IsReadOnly(String)\n  fullName: System.Configuration.ConfigurationLockCollection.IsReadOnly(String)\n- uid: System.Configuration.ConfigurationLockCollection.IsSynchronized\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ConfigurationLockCollection.IsSynchronized\n  fullName: System.Configuration.ConfigurationLockCollection.IsSynchronized\n- uid: System.Configuration.ConfigurationLockCollection.Remove(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: ConfigurationLockCollection.Remove(String)\n  fullName: System.Configuration.ConfigurationLockCollection.Remove(String)\n- uid: System.Configuration.ConfigurationLockCollection.SetFromList(System.String)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: SetFromList(String)\n  nameWithType: ConfigurationLockCollection.SetFromList(String)\n  fullName: System.Configuration.ConfigurationLockCollection.SetFromList(String)\n- uid: System.Configuration.ConfigurationLockCollection.SyncRoot\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ConfigurationLockCollection.SyncRoot\n  fullName: System.Configuration.ConfigurationLockCollection.SyncRoot\n- uid: System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConfigurationLockCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Configuration.ConfigurationLockCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Configuration.ConfigurationLockCollection.Add*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Add\n  nameWithType: ConfigurationLockCollection.Add\n- uid: System.Configuration.ConfigurationLockCollection.AttributeList*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: AttributeList\n  nameWithType: ConfigurationLockCollection.AttributeList\n- uid: System.Configuration.ConfigurationLockCollection.Clear*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Clear\n  nameWithType: ConfigurationLockCollection.Clear\n- uid: System.Configuration.ConfigurationLockCollection.Contains*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Contains\n  nameWithType: ConfigurationLockCollection.Contains\n- uid: System.Configuration.ConfigurationLockCollection.CopyTo*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: ConfigurationLockCollection.CopyTo\n- uid: System.Configuration.ConfigurationLockCollection.Count*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Count\n  nameWithType: ConfigurationLockCollection.Count\n- uid: System.Configuration.ConfigurationLockCollection.GetEnumerator*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ConfigurationLockCollection.GetEnumerator\n- uid: System.Configuration.ConfigurationLockCollection.HasParentElements*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: HasParentElements\n  nameWithType: ConfigurationLockCollection.HasParentElements\n- uid: System.Configuration.ConfigurationLockCollection.IsModified*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: IsModified\n  nameWithType: ConfigurationLockCollection.IsModified\n- uid: System.Configuration.ConfigurationLockCollection.IsReadOnly*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ConfigurationLockCollection.IsReadOnly\n- uid: System.Configuration.ConfigurationLockCollection.IsSynchronized*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: ConfigurationLockCollection.IsSynchronized\n- uid: System.Configuration.ConfigurationLockCollection.Remove*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: Remove\n  nameWithType: ConfigurationLockCollection.Remove\n- uid: System.Configuration.ConfigurationLockCollection.SetFromList*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: SetFromList\n  nameWithType: ConfigurationLockCollection.SetFromList\n- uid: System.Configuration.ConfigurationLockCollection.SyncRoot*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: ConfigurationLockCollection.SyncRoot\n- uid: System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Configuration.ConfigurationLockCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ConfigurationLockCollection.System.Collections.ICollection.CopyTo\n"}