{"nodes":[{"pos":[976,1081],"content":"Represents an interoperable binding that supports distributed transactions and secure, reliable sessions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an interoperable binding that supports distributed transactions and secure, reliable sessions.","pos":[0,105]}]},{"pos":[1093,1470],"content":"The WSHttpBinding is similar to the <xref:System.ServiceModel.BasicHttpBinding> but provides more Web service features. It uses the HTTP transport and provides message security, as does <xref:System.ServiceModel.BasicHttpBinding>, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The WSHttpBinding is similar to the <xref:System.ServiceModel.BasicHttpBinding> but provides more Web service features. It uses the HTTP transport and provides message security, as does <xref:System.ServiceModel.BasicHttpBinding>, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting.","pos":[0,377],"nodes":[{"content":"The WSHttpBinding is similar to the &lt;xref:System.ServiceModel.BasicHttpBinding&gt; but provides more Web service features.","pos":[0,119],"source":"The WSHttpBinding is similar to the <xref:System.ServiceModel.BasicHttpBinding> but provides more Web service features."},{"content":"It uses the HTTP transport and provides message security, as does &lt;xref:System.ServiceModel.BasicHttpBinding&gt;, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting.","pos":[120,377],"source":" It uses the HTTP transport and provides message security, as does <xref:System.ServiceModel.BasicHttpBinding>, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting."}]}]},{"pos":[3442,3537],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.WSHttpBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class."},{"pos":[4499,4648],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.WSHttpBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified type of security used by the binding.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class with a specified type of security used by the binding."},{"pos":[5211,5354],"content":"The value of <xref:System.ServiceModel.SecurityMode> that specifies the type of security that is used with the SOAP message and for the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of &lt;xref:System.ServiceModel.SecurityMode&gt; that specifies the type of security that is used with the SOAP message and for the client.","pos":[0,143],"source":"The value of <xref:System.ServiceModel.SecurityMode> that specifies the type of security that is used with the SOAP message and for the client."}]},{"pos":[5855,6001],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.WSHttpBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a binding specified by its configuration name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class with a binding specified by its configuration name."},{"pos":[6506,6621],"content":"The binding configuration name for the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Configuration.WSHttpBindingElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The binding configuration name for the <xref href=\"System.ServiceModel.Configuration.WSHttpBindingElement\"></xref>."},{"pos":[6833,6905],"content":"The binding element with the name <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">configName</ph><ept id=\"p1\">&lt;/code&gt;</ept> was not found.","needQuote":true,"needEscape":true,"source":"The binding element with the name <code>configName</code> was not found."},{"pos":[7446,7660],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.WSHttpBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specified type of security used by the binding and a value that indicates whether a reliable session is enabled.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class with a specified type of security used by the binding and a value that indicates whether a reliable session is enabled."},{"pos":[8277,8420],"content":"The value of <xref:System.ServiceModel.SecurityMode> that specifies the type of security that is used with the SOAP message and for the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of &lt;xref:System.ServiceModel.SecurityMode&gt; that specifies the type of security that is used with the SOAP message and for the client.","pos":[0,143],"source":"The value of <xref:System.ServiceModel.SecurityMode> that specifies the type of security that is used with the SOAP message and for the client."}]},{"pos":[8500,8669],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a reliable session is enabled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a reliable session is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9122,9258],"content":"Gets or sets a value that indicates whether the WCF client will automatically store and resend any cookies sent by a single web service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the WCF client will automatically store and resend any cookies sent by a single web service.","pos":[0,136]}]},{"pos":[9271,10927],"content":"Setting AllowCookies to `true` is useful when a client is interacting with one web service that uses cookies.  If you are accessing multiple services with the same cookie, set AllowCookies to `false` and you will have to manually add the cookie header to each outgoing message. The following code shows how to do this:      ```c#   MyWebServiceClient client = new MyWebServiceClient();              using (new OperationContextScope(client.InnerChannel))           {               client.DoSomething();                  // Extract the cookie embedded in the received web service response               // and stores it locally               HttpResponseMessageProperty response = (HttpResponseMessageProperty)               OperationContext.Current.IncomingMessageProperties[                   HttpResponseMessageProperty.Name];               sharedCookie = response.Headers[\"Set-Cookie\"];           }              MyOtherWebServiceClient otherClient = new MyOtherWebServiceClient();              using (new OperationContextScope(otherClient.InnerChannel))           {               // Embeds the extracted cookie in the next web service request               // Note that we manually have to create the request object since               // since it doesn't exist yet at this stage                HttpRequestMessageProperty request = new HttpRequestMessageProperty();               request.Headers[\"Cookie\"] = sharedCookie;               OperationContext.Current.OutgoingMessageProperties[                   HttpRequestMessageProperty.Name] = request;                  otherClient.DoSomethingElse();           }      ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Setting AllowCookies to <ph id=\"ph1\">`true`</ph> is useful when a client is interacting with one web service that uses cookies.","pos":[0,109],"source":"Setting AllowCookies to `true` is useful when a client is interacting with one web service that uses cookies."},{"content":"If you are accessing multiple services with the same cookie, set AllowCookies to <ph id=\"ph1\">`false`</ph> and you will have to manually add the cookie header to each outgoing message.","pos":[111,277],"source":"  If you are accessing multiple services with the same cookie, set AllowCookies to `false` and you will have to manually add the cookie header to each outgoing message."},{"content":"The following code shows how to do this:      <ph id=\"ph1\">```c#   MyWebServiceClient client = new MyWebServiceClient();              using (new OperationContextScope(client.InnerChannel))           {               client.DoSomething();                  // Extract the cookie embedded in the received web service response               // and stores it locally               HttpResponseMessageProperty response = (HttpResponseMessageProperty)               OperationContext.Current.IncomingMessageProperties[                   HttpResponseMessageProperty.Name];               sharedCookie = response.Headers[\"Set-Cookie\"];           }              MyOtherWebServiceClient otherClient = new MyOtherWebServiceClient();              using (new OperationContextScope(otherClient.InnerChannel))           {               // Embeds the extracted cookie in the next web service request               // Note that we manually have to create the request object since               // since it doesn't exist yet at this stage                HttpRequestMessageProperty request = new HttpRequestMessageProperty();               request.Headers[\"Cookie\"] = sharedCookie;               OperationContext.Current.OutgoingMessageProperties[                   HttpRequestMessageProperty.Name] = request;                  otherClient.DoSomethingElse();           }      ```</ph>","pos":[278,1620],"source":" The following code shows how to do this:      ```c#   MyWebServiceClient client = new MyWebServiceClient();              using (new OperationContextScope(client.InnerChannel))           {               client.DoSomething();                  // Extract the cookie embedded in the received web service response               // and stores it locally               HttpResponseMessageProperty response = (HttpResponseMessageProperty)               OperationContext.Current.IncomingMessageProperties[                   HttpResponseMessageProperty.Name];               sharedCookie = response.Headers[\"Set-Cookie\"];           }              MyOtherWebServiceClient otherClient = new MyOtherWebServiceClient();              using (new OperationContextScope(otherClient.InnerChannel))           {               // Embeds the extracted cookie in the next web service request               // Note that we manually have to create the request object since               // since it doesn't exist yet at this stage                HttpRequestMessageProperty request = new HttpRequestMessageProperty();               request.Headers[\"Cookie\"] = sharedCookie;               OperationContext.Current.OutgoingMessageProperties[                   HttpRequestMessageProperty.Name] = request;                  otherClient.DoSomethingElse();           }      ```"}]},{"pos":[11049,11229],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if automatic cookies processing is required; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if automatic cookies processing is required; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12233,12245],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12344,12356],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12882,12965],"content":"Returns an ordered collection of binding elements contained in the current binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an ordered collection of binding elements contained in the current binding.","pos":[0,83]}]},{"pos":[12977,13120],"content":"The order of the binding elements is important. It reflects the order in which the protocol and transport channels are constructed and stacked.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The order of the binding elements is important. It reflects the order in which the protocol and transport channels are constructed and stacked.","pos":[0,143],"nodes":[{"content":"The order of the binding elements is important.","pos":[0,47]},{"content":"It reflects the order in which the protocol and transport channels are constructed and stacked.","pos":[48,143]}]}]},{"pos":[13782,13979],"content":"The &lt;xref:System.ServiceModel.Channels.BindingElementCollection&gt; that contains the ordered stack of binding elements described by the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.WSHttpBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> binding.","needQuote":true,"needEscape":true,"source":"The <xref:System.ServiceModel.Channels.BindingElementCollection> that contains the ordered stack of binding elements described by the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> binding."},{"pos":[14173,14263],"content":"The transport security mode set cannot provide the reliable session that has been enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transport security mode set cannot provide the reliable session that has been enabled.","pos":[0,90]}]},{"pos":[14695,14757],"content":"Returns the security binding element from the current binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the security binding element from the current binding.","pos":[0,62]}]},{"pos":[14992,15078],"content":"A <xref:System.ServiceModel.Channels.SecurityBindingElement> from the current binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt; from the current binding.","pos":[0,86],"source":"A <xref:System.ServiceModel.Channels.SecurityBindingElement> from the current binding."}]},{"pos":[15551,15614],"content":"Returns the transport binding element from the current binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the transport binding element from the current binding.","pos":[0,63]}]},{"pos":[15842,15931],"content":"The <xref:System.ServiceModel.Channels.TransportBindingElement> from the current binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.TransportBindingElement&gt; from the current binding.","pos":[0,89],"source":"The <xref:System.ServiceModel.Channels.TransportBindingElement> from the current binding."}]},{"pos":[16371,16421],"content":"Gets the security settings used with this binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the security settings used with this binding.","pos":[0,50]}]},{"pos":[16433,16595],"content":"To use something other than the default security type, use the <xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29> constructor.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To use something other than the default security type, use the &lt;xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29&gt; constructor.","pos":[0,162],"source":"To use something other than the default security type, use the <xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29> constructor."}]},{"pos":[17037,17258],"content":"The <xref href=\"System.ServiceModel.WSHttpSecurity\"></xref> that is used with this binding. The default value <xref:System.ServiceModel.WSHttpSecurity.Mode*> property is <xref:System.ServiceModel.WSHttpSecurity.Message*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.WSHttpSecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used with this binding.","pos":[0,91],"source":"The <xref href=\"System.ServiceModel.WSHttpSecurity\"></xref> that is used with this binding."},{"content":"The default value &lt;xref:System.ServiceModel.WSHttpSecurity.Mode<bpt id=\"p1\">*</bpt>&gt; property is &lt;xref:System.ServiceModel.WSHttpSecurity.Message<ept id=\"p1\">*</ept>&gt;.","pos":[92,221],"source":" The default value <xref:System.ServiceModel.WSHttpSecurity.Mode*> property is <xref:System.ServiceModel.WSHttpSecurity.Message*>."}]},{"pos":[17773,17936],"content":"Returns a value that indicates whether the <xref:System.ServiceModel.WSHttpBinding.Security*> property has changed from its default value and should be serialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether the &lt;xref:System.ServiceModel.WSHttpBinding.Security*&gt; property has changed from its default value and should be serialized.","pos":[0,163],"source":"Returns a value that indicates whether the <xref:System.ServiceModel.WSHttpBinding.Security*> property has changed from its default value and should be serialized."}]},{"pos":[18077,18307],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.ServiceModel.WSHttpBinding.Security*&gt; property value should be serialized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.WSHttpBinding.Security*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.WSHttpBinding\n  id: WSHttpBinding\n  children:\n  - System.ServiceModel.WSHttpBinding.#ctor\n  - System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)\n  - System.ServiceModel.WSHttpBinding.#ctor(System.String)\n  - System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)\n  - System.ServiceModel.WSHttpBinding.AllowCookies\n  - System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)\n  - System.ServiceModel.WSHttpBinding.CreateBindingElements\n  - System.ServiceModel.WSHttpBinding.CreateMessageSecurity\n  - System.ServiceModel.WSHttpBinding.GetTransport\n  - System.ServiceModel.WSHttpBinding.Security\n  - System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity\n  langs:\n  - csharp\n  name: WSHttpBinding\n  nameWithType: WSHttpBinding\n  fullName: System.ServiceModel.WSHttpBinding\n  type: Class\n  summary: Represents an interoperable binding that supports distributed transactions and secure, reliable sessions.\n  remarks: The WSHttpBinding is similar to the <xref:System.ServiceModel.BasicHttpBinding> but provides more Web service features. It uses the HTTP transport and provides message security, as does <xref:System.ServiceModel.BasicHttpBinding>, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting.\n  example:\n  - \"The following sample code shows how to use the WSHttpBinding class.  \\n  \\n [!code-cs[WSHttpBinding#0](~/add/codesnippet/csharp/t-system.servicemodel.ws_4_1.cs)]\\n [!code-vb[WSHttpBinding#0](~/add/codesnippet/visualbasic/t-system.servicemodel.ws_4_1.vb)]\"\n  syntax:\n    content: 'public class WSHttpBinding : System.ServiceModel.WSHttpBindingBase'\n  inheritance:\n  - System.ServiceModel.Channels.Binding\n  - System.ServiceModel.WSHttpBindingBase\n  implements: []\n  inheritedMembers:\n  - System.ServiceModel.WSHttpBindingBase.BypassProxyOnLocal\n  - System.ServiceModel.WSHttpBindingBase.EnvelopeVersion\n  - System.ServiceModel.WSHttpBindingBase.HostNameComparisonMode\n  - System.ServiceModel.WSHttpBindingBase.MaxBufferPoolSize\n  - System.ServiceModel.WSHttpBindingBase.MaxReceivedMessageSize\n  - System.ServiceModel.WSHttpBindingBase.MessageEncoding\n  - System.ServiceModel.WSHttpBindingBase.ProxyAddress\n  - System.ServiceModel.WSHttpBindingBase.ReaderQuotas\n  - System.ServiceModel.WSHttpBindingBase.ReliableSession\n  - System.ServiceModel.WSHttpBindingBase.Scheme\n  - System.ServiceModel.WSHttpBindingBase.ShouldSerializeReaderQuotas\n  - System.ServiceModel.WSHttpBindingBase.ShouldSerializeReliableSession\n  - System.ServiceModel.WSHttpBindingBase.ShouldSerializeTextEncoding\n  - System.ServiceModel.WSHttpBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously\n  - System.ServiceModel.WSHttpBindingBase.TextEncoding\n  - System.ServiceModel.WSHttpBindingBase.TransactionFlow\n  - System.ServiceModel.WSHttpBindingBase.UseDefaultWebProxy\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: WSHttpBinding()\n  nameWithType: WSHttpBinding.WSHttpBinding()\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following sample code shows how to initialize a new instance of the <xref:System.ServiceModel.WSHttpBinding> class.  \\n  \\n [!code-cs[WSHttpBinding#1](~/add/codesnippet/csharp/m-system.servicemodel.ws_5_1.cs)]\\n [!code-vb[WSHttpBinding#1](~/add/codesnippet/visualbasic/m-system.servicemodel.ws_5_1.vb)]\"\n  syntax:\n    content: public WSHttpBinding ();\n    parameters: []\n  overload: System.ServiceModel.WSHttpBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)\n  id: '#ctor(System.ServiceModel.SecurityMode)'\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: WSHttpBinding(SecurityMode)\n  nameWithType: WSHttpBinding.WSHttpBinding(SecurityMode)\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding(SecurityMode)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class with a specified type of security used by the binding.\n  remarks: ''\n  example:\n  - \"The following example shows how to initialize a new instance of the <xref:System.ServiceModel.WSHttpBinding> class with a `securityMode` parameter.  \\n  \\n [!code-cs[WSHttpBinding#7](~/add/codesnippet/csharp/m-system.servicemodel.ws_3_1.cs)]\\n [!code-vb[WSHttpBinding#7](~/add/codesnippet/visualbasic/m-system.servicemodel.ws_3_1.vb)]\"\n  syntax:\n    content: public WSHttpBinding (System.ServiceModel.SecurityMode securityMode);\n    parameters:\n    - id: securityMode\n      type: System.ServiceModel.SecurityMode\n      description: The value of <xref:System.ServiceModel.SecurityMode> that specifies the type of security that is used with the SOAP message and for the client.\n  overload: System.ServiceModel.WSHttpBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: WSHttpBinding(String)\n  nameWithType: WSHttpBinding.WSHttpBinding(String)\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding(String)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class with a binding specified by its configuration name.\n  remarks: ''\n  example:\n  - \"The following example shows how to initialize a new instance of the <xref:System.ServiceModel.WSHttpBinding> class with a string argument.  \\n  \\n [!code-cs[WSHttpBinding#5](~/add/codesnippet/csharp/m-system.servicemodel.ws_6_1.cs)]\\n [!code-vb[WSHttpBinding#5](~/add/codesnippet/visualbasic/m-system.servicemodel.ws_6_1.vb)]\"\n  syntax:\n    content: public WSHttpBinding (string configName);\n    parameters:\n    - id: configName\n      type: System.String\n      description: The binding configuration name for the <xref href=\"System.ServiceModel.Configuration.WSHttpBindingElement\"></xref>.\n  overload: System.ServiceModel.WSHttpBinding.#ctor*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The binding element with the name <code>configName</code> was not found.\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)\n  id: '#ctor(System.ServiceModel.SecurityMode,System.Boolean)'\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: WSHttpBinding(SecurityMode,Boolean)\n  nameWithType: WSHttpBinding.WSHttpBinding(SecurityMode,Boolean)\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding(SecurityMode,Boolean)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> class with a specified type of security used by the binding and a value that indicates whether a reliable session is enabled.\n  remarks: ''\n  example:\n  - \"The following example shows how to initialize a new instance of the <xref:System.ServiceModel.WSHttpBinding> class with a `securityMode` and `reliableSessionEnabled` parameter.  \\n  \\n [!code-cs[WSHttpBinding#6](~/add/codesnippet/csharp/07636ed4-d0dd-4ca2-9f3d-_1.cs)]\\n [!code-vb[WSHttpBinding#6](~/add/codesnippet/visualbasic/07636ed4-d0dd-4ca2-9f3d-_1.vb)]\"\n  syntax:\n    content: public WSHttpBinding (System.ServiceModel.SecurityMode securityMode, bool reliableSessionEnabled);\n    parameters:\n    - id: securityMode\n      type: System.ServiceModel.SecurityMode\n      description: The value of <xref:System.ServiceModel.SecurityMode> that specifies the type of security that is used with the SOAP message and for the client.\n    - id: reliableSessionEnabled\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a reliable session is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.WSHttpBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.AllowCookies\n  id: AllowCookies\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: AllowCookies\n  nameWithType: WSHttpBinding.AllowCookies\n  fullName: System.ServiceModel.WSHttpBinding.AllowCookies\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets or sets a value that indicates whether the WCF client will automatically store and resend any cookies sent by a single web service.\n  remarks: \"Setting AllowCookies to `true` is useful when a client is interacting with one web service that uses cookies.  If you are accessing multiple services with the same cookie, set AllowCookies to `false` and you will have to manually add the cookie header to each outgoing message. The following code shows how to do this:  \\n  \\n```c#  \\nMyWebServiceClient client = new MyWebServiceClient();  \\n  \\n        using (new OperationContextScope(client.InnerChannel))  \\n        {  \\n            client.DoSomething();  \\n  \\n            // Extract the cookie embedded in the received web service response  \\n            // and stores it locally  \\n            HttpResponseMessageProperty response = (HttpResponseMessageProperty)  \\n            OperationContext.Current.IncomingMessageProperties[  \\n                HttpResponseMessageProperty.Name];  \\n            sharedCookie = response.Headers[\\\"Set-Cookie\\\"];  \\n        }  \\n  \\n        MyOtherWebServiceClient otherClient = new MyOtherWebServiceClient();  \\n  \\n        using (new OperationContextScope(otherClient.InnerChannel))  \\n        {  \\n            // Embeds the extracted cookie in the next web service request  \\n            // Note that we manually have to create the request object since  \\n            // since it doesn't exist yet at this stage   \\n            HttpRequestMessageProperty request = new HttpRequestMessageProperty();  \\n            request.Headers[\\\"Cookie\\\"] = sharedCookie;  \\n            OperationContext.Current.OutgoingMessageProperties[  \\n                HttpRequestMessageProperty.Name] = request;  \\n  \\n            otherClient.DoSomethingElse();  \\n        }  \\n  \\n```\"\n  syntax:\n    content: public bool AllowCookies { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if automatic cookies processing is required; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.WSHttpBinding.AllowCookies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)\n  id: BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: BuildChannelFactory(BindingParameterCollection)\n  nameWithType: WSHttpBinding.BuildChannelFactory(BindingParameterCollection)\n  fullName: System.ServiceModel.WSHttpBinding.BuildChannelFactory(BindingParameterCollection)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  syntax:\n    content: public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel> (System.ServiceModel.Channels.BindingParameterCollection parameters);\n    parameters:\n    - id: parameters\n      type: System.ServiceModel.Channels.BindingParameterCollection\n      description: To be added.\n    return:\n      type: System.ServiceModel.Channels.IChannelFactory{TChannel}\n      description: To be added.\n  overload: System.ServiceModel.WSHttpBinding.BuildChannelFactory<TChannel>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.CreateBindingElements\n  id: CreateBindingElements\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: CreateBindingElements()\n  nameWithType: WSHttpBinding.CreateBindingElements()\n  fullName: System.ServiceModel.WSHttpBinding.CreateBindingElements()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Returns an ordered collection of binding elements contained in the current binding.\n  remarks: The order of the binding elements is important. It reflects the order in which the protocol and transport channels are constructed and stacked.\n  example:\n  - \"The following example shows how to obtain the <xref:System.ServiceModel.Channels.BindingElementCollection> that contains the ordered stack of binding elements described by <xref:System.ServiceModel.WSHttpBinding> binding.  \\n  \\n [!code-cs[WSHttpBinding#9](~/add/codesnippet/csharp/m-system.servicemodel.ws_2_1.cs)]\\n [!code-vb[WSHttpBinding#9](~/add/codesnippet/visualbasic/m-system.servicemodel.ws_2_1.vb)]\"\n  syntax:\n    content: public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Channels.BindingElementCollection\n      description: The <xref:System.ServiceModel.Channels.BindingElementCollection> that contains the ordered stack of binding elements described by the <xref href=\"System.ServiceModel.WSHttpBinding\"></xref> binding.\n  overload: System.ServiceModel.WSHttpBinding.CreateBindingElements*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The transport security mode set cannot provide the reliable session that has been enabled.\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.CreateMessageSecurity\n  id: CreateMessageSecurity\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: CreateMessageSecurity()\n  nameWithType: WSHttpBinding.CreateMessageSecurity()\n  fullName: System.ServiceModel.WSHttpBinding.CreateMessageSecurity()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Returns the security binding element from the current binding.\n  syntax:\n    content: protected override System.ServiceModel.Channels.SecurityBindingElement CreateMessageSecurity ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Channels.SecurityBindingElement\n      description: A <xref:System.ServiceModel.Channels.SecurityBindingElement> from the current binding.\n  overload: System.ServiceModel.WSHttpBinding.CreateMessageSecurity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.GetTransport\n  id: GetTransport\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: GetTransport()\n  nameWithType: WSHttpBinding.GetTransport()\n  fullName: System.ServiceModel.WSHttpBinding.GetTransport()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Returns the transport binding element from the current binding.\n  syntax:\n    content: protected override System.ServiceModel.Channels.TransportBindingElement GetTransport ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Channels.TransportBindingElement\n      description: The <xref:System.ServiceModel.Channels.TransportBindingElement> from the current binding.\n  overload: System.ServiceModel.WSHttpBinding.GetTransport*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.Security\n  id: Security\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: Security\n  nameWithType: WSHttpBinding.Security\n  fullName: System.ServiceModel.WSHttpBinding.Security\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets the security settings used with this binding.\n  remarks: To use something other than the default security type, use the <xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29> constructor.\n  example:\n  - \"The following example shows how to obtain the value of the Security.  \\n  \\n [!code-cs[WSHttpBinding#8](~/add/codesnippet/csharp/p-system.servicemodel.ws_33_1.cs)]\\n [!code-vb[WSHttpBinding#8](~/add/codesnippet/visualbasic/p-system.servicemodel.ws_33_1.vb)]\"\n  syntax:\n    content: public System.ServiceModel.WSHttpSecurity Security { get; set; }\n    return:\n      type: System.ServiceModel.WSHttpSecurity\n      description: The <xref href=\"System.ServiceModel.WSHttpSecurity\"></xref> that is used with this binding. The default value <xref:System.ServiceModel.WSHttpSecurity.Mode*> property is <xref:System.ServiceModel.WSHttpSecurity.Message*>.\n  overload: System.ServiceModel.WSHttpBinding.Security*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity\n  id: ShouldSerializeSecurity\n  parent: System.ServiceModel.WSHttpBinding\n  langs:\n  - csharp\n  name: ShouldSerializeSecurity()\n  nameWithType: WSHttpBinding.ShouldSerializeSecurity()\n  fullName: System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Returns a value that indicates whether the <xref:System.ServiceModel.WSHttpBinding.Security*> property has changed from its default value and should be serialized.\n  syntax:\n    content: public bool ShouldSerializeSecurity ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.ServiceModel.WSHttpBinding.Security*> property value should be serialized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.WSHttpBindingBase\n  isExternal: false\n  name: System.ServiceModel.WSHttpBindingBase\n- uid: System.Configuration.ConfigurationErrorsException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationErrorsException\n  nameWithType: ConfigurationErrorsException\n  fullName: System.Configuration.ConfigurationErrorsException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ServiceModel.WSHttpBinding.#ctor\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: WSHttpBinding()\n  nameWithType: WSHttpBinding.WSHttpBinding()\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding()\n- uid: System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode)\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: WSHttpBinding(SecurityMode)\n  nameWithType: WSHttpBinding.WSHttpBinding(SecurityMode)\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding(SecurityMode)\n- uid: System.ServiceModel.SecurityMode\n  parent: System.ServiceModel\n  isExternal: true\n  name: SecurityMode\n  nameWithType: SecurityMode\n  fullName: System.ServiceModel.SecurityMode\n- uid: System.ServiceModel.WSHttpBinding.#ctor(System.String)\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: WSHttpBinding(String)\n  nameWithType: WSHttpBinding.WSHttpBinding(String)\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceModel.WSHttpBinding.#ctor(System.ServiceModel.SecurityMode,System.Boolean)\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: WSHttpBinding(SecurityMode,Boolean)\n  nameWithType: WSHttpBinding.WSHttpBinding(SecurityMode,Boolean)\n  fullName: System.ServiceModel.WSHttpBinding.WSHttpBinding(SecurityMode,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.WSHttpBinding.AllowCookies\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: AllowCookies\n  nameWithType: WSHttpBinding.AllowCookies\n  fullName: System.ServiceModel.WSHttpBinding.AllowCookies\n- uid: System.ServiceModel.WSHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: BuildChannelFactory(BindingParameterCollection)\n  nameWithType: WSHttpBinding.BuildChannelFactory(BindingParameterCollection)\n  fullName: System.ServiceModel.WSHttpBinding.BuildChannelFactory(BindingParameterCollection)\n- uid: System.ServiceModel.Channels.IChannelFactory{TChannel}\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: IChannelFactory<TChannel>\n  nameWithType: IChannelFactory<TChannel>\n  fullName: System.ServiceModel.Channels.IChannelFactory<TChannel>\n  spec.csharp:\n  - uid: System.ServiceModel.Channels.IChannelFactory`1\n    name: IChannelFactory\n    nameWithType: IChannelFactory\n    fullName: IChannelFactory<TChannel>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TChannel\n    name: TChannel\n    nameWithType: TChannel\n    fullName: TChannel\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Channels.BindingParameterCollection\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: BindingParameterCollection\n  nameWithType: BindingParameterCollection\n  fullName: System.ServiceModel.Channels.BindingParameterCollection\n- uid: System.ServiceModel.WSHttpBinding.CreateBindingElements\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: CreateBindingElements()\n  nameWithType: WSHttpBinding.CreateBindingElements()\n  fullName: System.ServiceModel.WSHttpBinding.CreateBindingElements()\n- uid: System.ServiceModel.Channels.BindingElementCollection\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: BindingElementCollection\n  nameWithType: BindingElementCollection\n  fullName: System.ServiceModel.Channels.BindingElementCollection\n- uid: System.ServiceModel.WSHttpBinding.CreateMessageSecurity\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: CreateMessageSecurity()\n  nameWithType: WSHttpBinding.CreateMessageSecurity()\n  fullName: System.ServiceModel.WSHttpBinding.CreateMessageSecurity()\n- uid: System.ServiceModel.Channels.SecurityBindingElement\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: SecurityBindingElement\n  nameWithType: SecurityBindingElement\n  fullName: System.ServiceModel.Channels.SecurityBindingElement\n- uid: System.ServiceModel.WSHttpBinding.GetTransport\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: GetTransport()\n  nameWithType: WSHttpBinding.GetTransport()\n  fullName: System.ServiceModel.WSHttpBinding.GetTransport()\n- uid: System.ServiceModel.Channels.TransportBindingElement\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: TransportBindingElement\n  nameWithType: TransportBindingElement\n  fullName: System.ServiceModel.Channels.TransportBindingElement\n- uid: System.ServiceModel.WSHttpBinding.Security\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: Security\n  nameWithType: WSHttpBinding.Security\n  fullName: System.ServiceModel.WSHttpBinding.Security\n- uid: System.ServiceModel.WSHttpSecurity\n  parent: System.ServiceModel\n  isExternal: false\n  name: WSHttpSecurity\n  nameWithType: WSHttpSecurity\n  fullName: System.ServiceModel.WSHttpSecurity\n- uid: System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: ShouldSerializeSecurity()\n  nameWithType: WSHttpBinding.ShouldSerializeSecurity()\n  fullName: System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity()\n- uid: System.ServiceModel.WSHttpBinding.#ctor*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: WSHttpBinding\n  nameWithType: WSHttpBinding.WSHttpBinding\n- uid: System.ServiceModel.WSHttpBinding.AllowCookies*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: AllowCookies\n  nameWithType: WSHttpBinding.AllowCookies\n- uid: System.ServiceModel.WSHttpBinding.BuildChannelFactory<TChannel>*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: BuildChannelFactory<TChannel>\n  nameWithType: WSHttpBinding.BuildChannelFactory<TChannel>\n- uid: System.ServiceModel.WSHttpBinding.CreateBindingElements*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: CreateBindingElements\n  nameWithType: WSHttpBinding.CreateBindingElements\n- uid: System.ServiceModel.WSHttpBinding.CreateMessageSecurity*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: CreateMessageSecurity\n  nameWithType: WSHttpBinding.CreateMessageSecurity\n- uid: System.ServiceModel.WSHttpBinding.GetTransport*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: GetTransport\n  nameWithType: WSHttpBinding.GetTransport\n- uid: System.ServiceModel.WSHttpBinding.Security*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: Security\n  nameWithType: WSHttpBinding.Security\n- uid: System.ServiceModel.WSHttpBinding.ShouldSerializeSecurity*\n  parent: System.ServiceModel.WSHttpBinding\n  isExternal: false\n  name: ShouldSerializeSecurity\n  nameWithType: WSHttpBinding.ShouldSerializeSecurity\n"}