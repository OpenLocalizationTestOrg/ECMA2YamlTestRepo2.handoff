{"nodes":[{"pos":[449,563],"content":"Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.","pos":[0,114],"nodes":[{"content":"Provides methods to verify the machine name and path conform to a specific syntax.","pos":[0,82]},{"content":"This class cannot be inherited.","pos":[83,114]}]}]},{"pos":[1133,1212],"content":"Checks the syntax of the machine name to confirm that it does not contain \"\\\".","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks the syntax of the machine name to confirm that it does not contain \"<ph id=\"ph1\">\\\"</ph>.","pos":[0,78],"source":"Checks the syntax of the machine name to confirm that it does not contain \"\\\"."}]},{"pos":[1365,1411],"content":"A string containing the machine name to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the machine name to check.","pos":[0,46]}]},{"pos":[1470,1667],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> matches the proper machine name format; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> matches the proper machine name format; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[2155,2222],"content":"Checks the syntax of the path to see whether it starts with \"\\\\\\\".","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks the syntax of the path to see whether it starts with \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\"</ph>.","pos":[0,66],"source":"Checks the syntax of the path to see whether it starts with \"\\\\\\\"."}]},{"pos":[2368,2406],"content":"A string containing the path to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the path to check.","pos":[0,38]}]},{"pos":[2465,2654],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> matches the proper path format; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> matches the proper path format; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3165,3246],"content":"Checks the syntax of the path to see if it starts with \"\\\" or drive letter \"C:\".","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks the syntax of the path to see if it starts with \"<ph id=\"ph1\">\\\"</ph> or drive letter \"C:\".","pos":[0,80],"source":"Checks the syntax of the path to see if it starts with \"\\\" or drive letter \"C:\"."}]},{"pos":[3398,3436],"content":"A string containing the path to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing the path to check.","pos":[0,38]}]},{"pos":[3495,3684],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> matches the proper path format; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> matches the proper path format; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.SyntaxCheck\n  id: SyntaxCheck\n  children:\n  - System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)\n  - System.ComponentModel.SyntaxCheck.CheckPath(System.String)\n  - System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)\n  langs:\n  - csharp\n  name: SyntaxCheck\n  nameWithType: SyntaxCheck\n  fullName: System.ComponentModel.SyntaxCheck\n  type: Class\n  summary: Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.\n  syntax:\n    content: public static class SyntaxCheck\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)\n  id: CheckMachineName(System.String)\n  parent: System.ComponentModel.SyntaxCheck\n  langs:\n  - csharp\n  name: CheckMachineName(String)\n  nameWithType: SyntaxCheck.CheckMachineName(String)\n  fullName: System.ComponentModel.SyntaxCheck.CheckMachineName(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Checks the syntax of the machine name to confirm that it does not contain \"\\\\\".\n  syntax:\n    content: public static bool CheckMachineName (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string containing the machine name to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> matches the proper machine name format; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.SyntaxCheck.CheckMachineName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.SyntaxCheck.CheckPath(System.String)\n  id: CheckPath(System.String)\n  parent: System.ComponentModel.SyntaxCheck\n  langs:\n  - csharp\n  name: CheckPath(String)\n  nameWithType: SyntaxCheck.CheckPath(String)\n  fullName: System.ComponentModel.SyntaxCheck.CheckPath(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Checks the syntax of the path to see whether it starts with \"\\\\\\\\\".\n  syntax:\n    content: public static bool CheckPath (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string containing the path to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> matches the proper path format; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.SyntaxCheck.CheckPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)\n  id: CheckRootedPath(System.String)\n  parent: System.ComponentModel.SyntaxCheck\n  langs:\n  - csharp\n  name: CheckRootedPath(String)\n  nameWithType: SyntaxCheck.CheckRootedPath(String)\n  fullName: System.ComponentModel.SyntaxCheck.CheckRootedPath(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Checks the syntax of the path to see if it starts with \"\\\\\" or drive letter \"C:\".\n  syntax:\n    content: public static bool CheckRootedPath (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string containing the path to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> matches the proper path format; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.SyntaxCheck.CheckRootedPath*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)\n  parent: System.ComponentModel.SyntaxCheck\n  isExternal: false\n  name: CheckMachineName(String)\n  nameWithType: SyntaxCheck.CheckMachineName(String)\n  fullName: System.ComponentModel.SyntaxCheck.CheckMachineName(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.SyntaxCheck.CheckPath(System.String)\n  parent: System.ComponentModel.SyntaxCheck\n  isExternal: false\n  name: CheckPath(String)\n  nameWithType: SyntaxCheck.CheckPath(String)\n  fullName: System.ComponentModel.SyntaxCheck.CheckPath(String)\n- uid: System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)\n  parent: System.ComponentModel.SyntaxCheck\n  isExternal: false\n  name: CheckRootedPath(String)\n  nameWithType: SyntaxCheck.CheckRootedPath(String)\n  fullName: System.ComponentModel.SyntaxCheck.CheckRootedPath(String)\n- uid: System.ComponentModel.SyntaxCheck.CheckMachineName*\n  parent: System.ComponentModel.SyntaxCheck\n  isExternal: false\n  name: CheckMachineName\n  nameWithType: SyntaxCheck.CheckMachineName\n- uid: System.ComponentModel.SyntaxCheck.CheckPath*\n  parent: System.ComponentModel.SyntaxCheck\n  isExternal: false\n  name: CheckPath\n  nameWithType: SyntaxCheck.CheckPath\n- uid: System.ComponentModel.SyntaxCheck.CheckRootedPath*\n  parent: System.ComponentModel.SyntaxCheck\n  isExternal: false\n  name: CheckRootedPath\n  nameWithType: SyntaxCheck.CheckRootedPath\n"}