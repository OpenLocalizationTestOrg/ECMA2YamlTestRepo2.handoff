{"nodes":[{"pos":[802,1035],"content":"An activity which scopes the lifetime of a transaction which is initiated by a received message. The transaction may be flowed into the workflow on the initiating message, or be created by the dispatcher when the message is received.","needQuote":true,"needEscape":true,"nodes":[{"content":"An activity which scopes the lifetime of a transaction which is initiated by a received message. The transaction may be flowed into the workflow on the initiating message, or be created by the dispatcher when the message is received.","pos":[0,233],"nodes":[{"content":"An activity which scopes the lifetime of a transaction which is initiated by a received message.","pos":[0,96]},{"content":"The transaction may be flowed into the workflow on the initiating message, or be created by the dispatcher when the message is received.","pos":[97,233]}]}]},{"pos":[1048,2770],"content":"The TransactedReceiveScope activity enables you to control the lifetime of the flowed transaction.      > [!WARNING] >  For an initiating TransactedReceiveScope activity (a TransactedReceiveScope that contains a <xref:System.ServiceModel.Activities.Receive> activity with <xref:System.ServiceModel.Activities.Receive.CanCreateInstance%2A> set to `true`), the transaction is created before the runtime starts to execute the TransactedReceiveScope activity. This transaction is not ambient at the workflow activity layer, but it is ambient in the underlying persistence layers. If execution of the workflow encounters a <xref:System.Activities.Statements.Persist> activity before the TransactedReceiveScope activity, the runtime tries to persist under the ambient transaction. This behavior causes a block until the transaction is completed. Because the workflow execution has not reached the <xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A> section, the transaction cannot finish. This deadlock causes the workflow to stop responding until the transaction times out. When the transaction times out, the newly created instance is aborted.      > [!IMPORTANT] >  Whenever you use a TransactedReceiveScope it is recommended to place all Receives in the workflow within TransactedReceiveScope activities.      > [!IMPORTANT] >  When using TransactedReceiveScope and messages arrive in the incorrect order, the workflow will be aborted when trying to deliver the first out of order message. You must make sure your workflow is always at a consistent stopping point when the workflow idles. This will allow you to restart the workflow from a previous persistence point should the workflow be aborted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TransactedReceiveScope activity enables you to control the lifetime of the flowed transaction.","pos":[0,98]},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  For an initiating TransactedReceiveScope activity (a TransactedReceiveScope that contains a &lt;xref:System.ServiceModel.Activities.Receive&gt; activity with &lt;xref:System.ServiceModel.Activities.Receive.CanCreateInstance%2A&gt; set to <ph id=\"ph2\">`true`</ph>), the transaction is created before the runtime starts to execute the TransactedReceiveScope activity.","pos":[104,455],"source":"      > [!WARNING] >  For an initiating TransactedReceiveScope activity (a TransactedReceiveScope that contains a <xref:System.ServiceModel.Activities.Receive> activity with <xref:System.ServiceModel.Activities.Receive.CanCreateInstance%2A> set to `true`), the transaction is created before the runtime starts to execute the TransactedReceiveScope activity."},{"content":"This transaction is not ambient at the workflow activity layer, but it is ambient in the underlying persistence layers.","pos":[456,575]},{"content":"If execution of the workflow encounters a &lt;xref:System.Activities.Statements.Persist&gt; activity before the TransactedReceiveScope activity, the runtime tries to persist under the ambient transaction.","pos":[576,774],"source":" If execution of the workflow encounters a <xref:System.Activities.Statements.Persist> activity before the TransactedReceiveScope activity, the runtime tries to persist under the ambient transaction."},{"content":"This behavior causes a block until the transaction is completed.","pos":[775,839]},{"content":"Because the workflow execution has not reached the &lt;xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A&gt; section, the transaction cannot finish.","pos":[840,999],"source":" Because the workflow execution has not reached the <xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A> section, the transaction cannot finish."},{"content":"This deadlock causes the workflow to stop responding until the transaction times out.","pos":[1000,1085]},{"content":"When the transaction times out, the newly created instance is aborted.","pos":[1086,1156]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  Whenever you use a TransactedReceiveScope it is recommended to place all Receives in the workflow within TransactedReceiveScope activities.","pos":[1162,1319],"source":"      > [!IMPORTANT] >  Whenever you use a TransactedReceiveScope it is recommended to place all Receives in the workflow within TransactedReceiveScope activities."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  When using TransactedReceiveScope and messages arrive in the incorrect order, the workflow will be aborted when trying to deliver the first out of order message.","pos":[1325,1504],"source":"      > [!IMPORTANT] >  When using TransactedReceiveScope and messages arrive in the incorrect order, the workflow will be aborted when trying to deliver the first out of order message."},{"content":"You must make sure your workflow is always at a consistent stopping point when the workflow idles.","pos":[1505,1603]},{"content":"This will allow you to restart the workflow from a previous persistence point should the workflow be aborted.","pos":[1604,1713]}]},{"pos":[4914,5029],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref> class."},{"pos":[5629,5808],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Activity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that makes up the body of the <bpt id=\"p2\">&lt;xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> activity.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Activities.Activity\"></xref> that makes up the body of the <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref> activity."},{"pos":[5820,5883],"content":"The transaction is ambient for the entire duration of the body.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The transaction is ambient for the entire duration of the body.","pos":[0,63]}]},{"pos":[6208,6249],"content":"The body of the transacted receive scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The body of the transacted receive scope.","pos":[0,41]}]},{"pos":[7181,7193],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8089,8101],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8642,8833],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Activities.Receive\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> activity associated with this <bpt id=\"p2\">&lt;xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> activity.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.ServiceModel.Activities.Receive\"></xref> activity associated with this <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref> activity."},{"pos":[9202,9268],"content":"The receive activity associated with the transacted receive scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The receive activity associated with the transacted receive scope.","pos":[0,66]}]},{"pos":[9819,9986],"content":"Gets the collection of <bpt id=\"p1\">&lt;xref href=\"System.Activities.Variable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with this <bpt id=\"p2\">&lt;xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the collection of <xref href=\"System.Activities.Variable\"></xref> associated with this <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref>."},{"pos":[10416,10475],"content":"The variables associated with the transacted receive scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"The variables associated with the transacted receive scope.","pos":[0,59]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Activities.TransactedReceiveScope\n  id: TransactedReceiveScope\n  children:\n  - System.ServiceModel.Activities.TransactedReceiveScope.#ctor\n  - System.ServiceModel.Activities.TransactedReceiveScope.Body\n  - System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)\n  - System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)\n  - System.ServiceModel.Activities.TransactedReceiveScope.Request\n  - System.ServiceModel.Activities.TransactedReceiveScope.Variables\n  langs:\n  - csharp\n  name: TransactedReceiveScope\n  nameWithType: TransactedReceiveScope\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope\n  type: Class\n  summary: An activity which scopes the lifetime of a transaction which is initiated by a received message. The transaction may be flowed into the workflow on the initiating message, or be created by the dispatcher when the message is received.\n  remarks: \"The TransactedReceiveScope activity enables you to control the lifetime of the flowed transaction.  \\n  \\n> [!WARNING]\\n>  For an initiating TransactedReceiveScope activity (a TransactedReceiveScope that contains a <xref:System.ServiceModel.Activities.Receive> activity with <xref:System.ServiceModel.Activities.Receive.CanCreateInstance%2A> set to `true`), the transaction is created before the runtime starts to execute the TransactedReceiveScope activity. This transaction is not ambient at the workflow activity layer, but it is ambient in the underlying persistence layers. If execution of the workflow encounters a <xref:System.Activities.Statements.Persist> activity before the TransactedReceiveScope activity, the runtime tries to persist under the ambient transaction. This behavior causes a block until the transaction is completed. Because the workflow execution has not reached the <xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A> section, the transaction cannot finish. This deadlock causes the workflow to stop responding until the transaction times out. When the transaction times out, the newly created instance is aborted.  \\n  \\n> [!IMPORTANT]\\n>  Whenever you use a TransactedReceiveScope it is recommended to place all Receives in the workflow within TransactedReceiveScope activities.  \\n  \\n> [!IMPORTANT]\\n>  When using TransactedReceiveScope and messages arrive in the incorrect order, the workflow will be aborted when trying to deliver the first out of order message. You must make sure your workflow is always at a consistent stopping point when the workflow idles. This will allow you to restart the workflow from a previous persistence point should the workflow be aborted.\"\n  example:\n  - \"The following example shows how to use the TransactedReceiveScope class in a <xref:System.Activities.Statements.Sequence> activity.  \\n  \\n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]\"\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Body\")]\n\n      public sealed class TransactedReceiveScope : System.Activities.NativeActivity\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.NativeActivity\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)\n  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)\n  - System.Activities.NativeActivity.CanInduceIdle\n  - System.Activities.NativeActivity.Implementation\n  - System.Activities.NativeActivity.ImplementationVersion\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  platform:\n  - net462\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  langs:\n  - csharp\n  name: TransactedReceiveScope()\n  nameWithType: TransactedReceiveScope.TransactedReceiveScope()\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.TransactedReceiveScope()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel.Activities\n  namespace: System.ServiceModel.Activities\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref> class.\n  syntax:\n    content: public TransactedReceiveScope ();\n    parameters: []\n  overload: System.ServiceModel.Activities.TransactedReceiveScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Body\n  id: Body\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  langs:\n  - csharp\n  name: Body\n  nameWithType: TransactedReceiveScope.Body\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Body\n  type: Property\n  assemblies:\n  - System.ServiceModel.Activities\n  namespace: System.ServiceModel.Activities\n  summary: Gets or sets the <xref href=\"System.Activities.Activity\"></xref> that makes up the body of the <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref> activity.\n  remarks: The transaction is ambient for the entire duration of the body.\n  example:\n  - \"The following example shows how to set the Body property.  \\n  \\n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]\"\n  syntax:\n    content: public System.Activities.Activity Body { get; set; }\n    return:\n      type: System.Activities.Activity\n      description: The body of the transacted receive scope.\n  overload: System.ServiceModel.Activities.TransactedReceiveScope.Body*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)\n  id: CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  langs:\n  - csharp\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)\n  type: Method\n  assemblies:\n  - System.ServiceModel.Activities\n  namespace: System.ServiceModel.Activities\n  syntax:\n    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);\n    parameters:\n    - id: metadata\n      type: System.Activities.NativeActivityMetadata\n      description: To be added.\n  overload: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)\n  id: Execute(System.Activities.NativeActivityContext)\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  langs:\n  - csharp\n  name: Execute(NativeActivityContext)\n  nameWithType: TransactedReceiveScope.Execute(NativeActivityContext)\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Execute(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel.Activities\n  namespace: System.ServiceModel.Activities\n  syntax:\n    content: protected override void Execute (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.ServiceModel.Activities.TransactedReceiveScope.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Request\n  id: Request\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  langs:\n  - csharp\n  name: Request\n  nameWithType: TransactedReceiveScope.Request\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Request\n  type: Property\n  assemblies:\n  - System.ServiceModel.Activities\n  namespace: System.ServiceModel.Activities\n  summary: Gets or sets the <xref href=\"System.ServiceModel.Activities.Receive\"></xref> activity associated with this <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref> activity.\n  remarks: ''\n  example:\n  - \"The following example shows how to set the Request property.  \\n  \\n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]\"\n  syntax:\n    content: public System.ServiceModel.Activities.Receive Request { get; set; }\n    return:\n      type: System.ServiceModel.Activities.Receive\n      description: The receive activity associated with the transacted receive scope.\n  overload: System.ServiceModel.Activities.TransactedReceiveScope.Request*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Variables\n  id: Variables\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  langs:\n  - csharp\n  name: Variables\n  nameWithType: TransactedReceiveScope.Variables\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Variables\n  type: Property\n  assemblies:\n  - System.ServiceModel.Activities\n  namespace: System.ServiceModel.Activities\n  summary: Gets the collection of <xref href=\"System.Activities.Variable\"></xref> associated with this <xref href=\"System.ServiceModel.Activities.TransactedReceiveScope\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to set the Variables property.  \\n  \\n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]\"\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<System.Activities.Variable> Variables { get; }\n    return:\n      type: System.Collections.ObjectModel.Collection{System.Activities.Variable}\n      description: The variables associated with the transacted receive scope.\n  overload: System.ServiceModel.Activities.TransactedReceiveScope.Variables*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.NativeActivity\n  isExternal: false\n  name: System.Activities.NativeActivity\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.#ctor\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: TransactedReceiveScope()\n  nameWithType: TransactedReceiveScope.TransactedReceiveScope()\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.TransactedReceiveScope()\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Body\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Body\n  nameWithType: TransactedReceiveScope.Body\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Body\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)\n- uid: System.Activities.NativeActivityMetadata\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityMetadata\n  nameWithType: NativeActivityMetadata\n  fullName: System.Activities.NativeActivityMetadata\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Execute(NativeActivityContext)\n  nameWithType: TransactedReceiveScope.Execute(NativeActivityContext)\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Execute(NativeActivityContext)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Request\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Request\n  nameWithType: TransactedReceiveScope.Request\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Request\n- uid: System.ServiceModel.Activities.Receive\n  parent: System.ServiceModel.Activities\n  isExternal: false\n  name: Receive\n  nameWithType: Receive\n  fullName: System.ServiceModel.Activities.Receive\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Variables\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Variables\n  nameWithType: TransactedReceiveScope.Variables\n  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Variables\n- uid: System.Collections.ObjectModel.Collection{System.Activities.Variable}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: Collection<Variable>\n  nameWithType: Collection<Variable>\n  fullName: System.Collections.ObjectModel.Collection<System.Activities.Variable>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: Collection<System.Activities.Variable>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Variable\n    name: Variable\n    nameWithType: Variable\n    fullName: Variable\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.#ctor*\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: TransactedReceiveScope\n  nameWithType: TransactedReceiveScope.TransactedReceiveScope\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Body*\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Body\n  nameWithType: TransactedReceiveScope.Body\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata*\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: TransactedReceiveScope.CacheMetadata\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Execute*\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Execute\n  nameWithType: TransactedReceiveScope.Execute\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Request*\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Request\n  nameWithType: TransactedReceiveScope.Request\n- uid: System.ServiceModel.Activities.TransactedReceiveScope.Variables*\n  parent: System.ServiceModel.Activities.TransactedReceiveScope\n  isExternal: false\n  name: Variables\n  nameWithType: TransactedReceiveScope.Variables\n"}