{"nodes":[{"pos":[245,396],"content":"Indicates that a modified integer is a standard C++ <xref uid=\"langword_csharp_long\" name=\"long\" href=\"\"></xref> value. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that a modified integer is a standard C++ <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_long\" name=\"long\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","pos":[0,119],"source":"Indicates that a modified integer is a standard C++ <xref uid=\"langword_csharp_long\" name=\"long\" href=\"\"></xref> value."},{"content":"This class cannot be inherited.","pos":[120,151]}]},{"pos":[409,1965],"content":"The C++ standard indicates that a `long` value and an integer value are distinct types.  However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.  To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the IsLong modifier to any instance of a `long` when the instance is emited.  This process is critically important for maintaining language-level type safety.       Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).      -   Using the unmanaged reflection API.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The C++ standard indicates that a <ph id=\"ph1\">`long`</ph> value and an integer value are distinct types.","pos":[0,87],"source":"The C++ standard indicates that a `long` value and an integer value are distinct types."},{"content":"However, they are both represented using <ph id=\"ph1\">`ELEMENT_TYPE_I4`</ph> in an assembly.","pos":[89,163],"source":"  However, they are both represented using `ELEMENT_TYPE_I4` in an assembly."},{"content":"To distinguish a <ph id=\"ph1\">`long`</ph> from an integer in C++, the Microsoft C++ compiler adds the IsLong modifier to any instance of a <ph id=\"ph2\">`long`</ph> when the instance is emited.","pos":[165,321],"source":"  To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the IsLong modifier to any instance of a `long` when the instance is emited."},{"content":"This process is critically important for maintaining language-level type safety.","pos":[323,403]},{"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.","pos":[410,573]},{"content":"When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.","pos":[575,687]},{"content":"Compilers can apply custom modifiers to methods, parameters, and return values.","pos":[689,768]},{"content":"The JIT compiler must respond to required modifiers but can ignore optional modifiers.","pos":[770,856]},{"content":"You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.","pos":[863,1277],"source":"       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>."},{"content":"-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id=\"ph1\">`modopt`</ph> and <ph id=\"ph2\">`modreq`</ph>, and assembling the file with the <bpt id=\"p1\">[</bpt>Ilasm.exe (IL Assembler)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1283,1501],"source":"      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   Using the unmanaged reflection API.","pos":[1507,1546]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.IsLong\n  id: IsLong\n  children: []\n  langs:\n  - csharp\n  name: IsLong\n  nameWithType: IsLong\n  fullName: System.Runtime.CompilerServices.IsLong\n  type: Class\n  summary: Indicates that a modified integer is a standard C++ <xref uid=\"langword_csharp_long\" name=\"long\" href=\"\"></xref> value. This class cannot be inherited.\n  remarks: \"The C++ standard indicates that a `long` value and an integer value are distinct types.  However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.  To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the IsLong modifier to any instance of a `long` when the instance is emited.  This process is critically important for maintaining language-level type safety.  \\n  \\n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  \\n  \\n You can emit custom modifiers into metadata using one of the following techniques:  \\n  \\n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \\n  \\n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   Using the unmanaged reflection API.\"\n  example:\n  - \"The following example demonstrates how to emit an IsLong object into an assembly using reflection.  \\n  \\n [!code-cpp[Runtime.CompilerServices.IsLong#1](~/add/codesnippet/cpp/t-system.runtime.compile_11_1.cpp)]\"\n  syntax:\n    content: public static class IsLong\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n"}