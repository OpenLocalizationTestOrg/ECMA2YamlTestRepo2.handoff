{"nodes":[{"pos":[684,946],"content":"Represents a configuration element that specifies a pass through filter, which provides a mechanism to pick the appropriate IIS bindings when hosting a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] application in IIS. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a configuration element that specifies a pass through filter, which provides a mechanism to pick the appropriate IIS bindings when hosting a <ph id=\"ph1\">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> application in IIS.","pos":[0,230],"source":"Represents a configuration element that specifies a pass through filter, which provides a mechanism to pick the appropriate IIS bindings when hosting a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] application in IIS."},{"content":"This class cannot be inherited.","pos":[231,262]}]},{"pos":[959,3281],"content":"A prefix filter provider a mechanism for a service to bind to a specific URI .It enables you to host multiple applications with different base addresses for the same scheme on the same site.       IIS websites are containers for virtual applications which contain virtual directories. The application in a site can be accessed through one or more IIS binding. IIS bindings provide two pieces of information: binding protocol and binding information. Binding protocol (e.g., HTTP) defines the scheme over which communication occurs, and binding information (e.g., IPAddress, Port, Hostheader) contains data used to access the site.       IIS supports specifying multiple IIS bindings per site, which results in multiple base addresses per scheme. Since a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service hosted under a site allows binding to only one base address per scheme, you can use the prefix filter feature to pick the required base address of the hosted service.  The incoming base addresses, supplied by IIS, are filtered based on the optional prefix list filter.       For example, your site can contain the following base addresses      ```   http://testl.fabrikam.com/Service.svc   http://test2.fabrikam.com/Service.svc   ```       You can use the following configuration file to specify a prefix filter at the appdomain level.      ```   <system.serviceModel>     <serviceHostingEnvironment>        <baseAddressPrefixFilters>           <add prefix=”net.tcp://test1.fabrikam.com:8000”/>           <add prefix=”http://test2.fabrikam.com:9000”/>       </baseAddressPrefixFilters>     </serviceHostingEnvironment>   </system.serviceModel>   ```       In this example, `net.tcp://test1.fabrikam.com:8000` and `http://test2.fabrikam.com:9000` are the only base addresses for their respective schemes which are allowed to be passed through.       By default, when prefix is not specified, all addresses are passed through. Specifying the prefix will result in only the matching base address for that scheme to be passed through.      > [!NOTE] >  The filter does not support any wildcards. In addition, the baseAddresses supplied by IIS may have addresses bound to other schemes not present in the `baseAddressPrefixFilters` list. These addresses are not filtered out.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A prefix filter provider a mechanism for a service to bind to a specific URI .It enables you to host multiple applications with different base addresses for the same scheme on the same site.","pos":[0,190]},{"content":"IIS websites are containers for virtual applications which contain virtual directories.","pos":[197,284]},{"content":"The application in a site can be accessed through one or more IIS binding.","pos":[285,359]},{"content":"IIS bindings provide two pieces of information: binding protocol and binding information.","pos":[360,449]},{"content":"Binding protocol (e.g., HTTP) defines the scheme over which communication occurs, and binding information (e.g., IPAddress, Port, Hostheader) contains data used to access the site.","pos":[450,630]},{"content":"IIS supports specifying multiple IIS bindings per site, which results in multiple base addresses per scheme.","pos":[637,745]},{"content":"Since a <ph id=\"ph1\">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> service hosted under a site allows binding to only one base address per scheme, you can use the prefix filter feature to pick the required base address of the hosted service.","pos":[746,987],"source":" Since a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service hosted under a site allows binding to only one base address per scheme, you can use the prefix filter feature to pick the required base address of the hosted service."},{"content":"The incoming base addresses, supplied by IIS, are filtered based on the optional prefix list filter.","pos":[989,1089]},{"content":"For example, your site can contain the following base addresses      <ph id=\"ph1\">```   http://testl.fabrikam.com/Service.svc   http://test2.fabrikam.com/Service.svc   ```</ph>       You can use the following configuration file to specify a prefix filter at the appdomain level.","pos":[1096,1356],"source":"       For example, your site can contain the following base addresses      ```   http://testl.fabrikam.com/Service.svc   http://test2.fabrikam.com/Service.svc   ```       You can use the following configuration file to specify a prefix filter at the appdomain level."},{"content":"<ph id=\"ph1\">```   &lt;system.serviceModel&gt;     &lt;serviceHostingEnvironment&gt;        &lt;baseAddressPrefixFilters&gt;           &lt;add prefix=”net.tcp://test1.fabrikam.com:8000”/&gt;           &lt;add prefix=”http://test2.fabrikam.com:9000”/&gt;       &lt;/baseAddressPrefixFilters&gt;     &lt;/serviceHostingEnvironment&gt;   &lt;/system.serviceModel&gt;   ```</ph>       In this example, <ph id=\"ph2\">`net.tcp://test1.fabrikam.com:8000`</ph> and <ph id=\"ph3\">`http://test2.fabrikam.com:9000`</ph> are the only base addresses for their respective schemes which are allowed to be passed through.","pos":[1362,1863],"source":"```   <system.serviceModel>     <serviceHostingEnvironment>        <baseAddressPrefixFilters>           <add prefix=”net.tcp://test1.fabrikam.com:8000”/>           <add prefix=”http://test2.fabrikam.com:9000”/>       </baseAddressPrefixFilters>     </serviceHostingEnvironment>   </system.serviceModel>   ```       In this example, `net.tcp://test1.fabrikam.com:8000` and `http://test2.fabrikam.com:9000` are the only base addresses for their respective schemes which are allowed to be passed through."},{"content":"By default, when prefix is not specified, all addresses are passed through.","pos":[1870,1945]},{"content":"Specifying the prefix will result in only the matching base address for that scheme to be passed through.","pos":[1946,2051]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The filter does not support any wildcards.","pos":[2057,2112],"source":"      > [!NOTE] >  The filter does not support any wildcards."},{"content":"In addition, the baseAddresses supplied by IIS may have addresses bound to other schemes not present in the <ph id=\"ph1\">`baseAddressPrefixFilters`</ph> list.","pos":[2113,2253],"source":" In addition, the baseAddresses supplied by IIS may have addresses bound to other schemes not present in the `baseAddressPrefixFilters` list."},{"content":"These addresses are not filtered out.","pos":[2254,2291]}]},{"pos":[6772,6898],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\"></xref> class."},{"pos":[7674,7820],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a specific URI.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\"></xref> class with a specific URI."},{"pos":[7971,8063],"content":"A filter that causes the service to listen on all URIs that start with this specific prefix.","needQuote":true,"needEscape":true,"nodes":[{"content":"A filter that causes the service to listen on all URIs that start with this specific prefix.","pos":[0,92]}]},{"pos":[8641,8710],"content":"Gets or sets a prefix that is used to match a part of a base address.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a prefix that is used to match a part of a base address.","pos":[0,69]}]},{"pos":[8820,8873],"content":"A URI that is used to match a part of a base address.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI that is used to match a part of a base address.","pos":[0,53]}]},{"pos":[9672,9684],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  id: BaseAddressPrefixFilterElement\n  children:\n  - System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor\n  - System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor(System.Uri)\n  - System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix\n  - System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties\n  langs:\n  - csharp\n  name: BaseAddressPrefixFilterElement\n  nameWithType: BaseAddressPrefixFilterElement\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  type: Class\n  summary: Represents a configuration element that specifies a pass through filter, which provides a mechanism to pick the appropriate IIS bindings when hosting a [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] application in IIS. This class cannot be inherited.\n  remarks: \"A prefix filter provider a mechanism for a service to bind to a specific URI .It enables you to host multiple applications with different base addresses for the same scheme on the same site.  \\n  \\n IIS websites are containers for virtual applications which contain virtual directories. The application in a site can be accessed through one or more IIS binding. IIS bindings provide two pieces of information: binding protocol and binding information. Binding protocol (e.g., HTTP) defines the scheme over which communication occurs, and binding information (e.g., IPAddress, Port, Hostheader) contains data used to access the site.  \\n  \\n IIS supports specifying multiple IIS bindings per site, which results in multiple base addresses per scheme. Since a [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] service hosted under a site allows binding to only one base address per scheme, you can use the prefix filter feature to pick the required base address of the hosted service.  The incoming base addresses, supplied by IIS, are filtered based on the optional prefix list filter.  \\n  \\n For example, your site can contain the following base addresses  \\n  \\n```  \\nhttp://testl.fabrikam.com/Service.svc  \\nhttp://test2.fabrikam.com/Service.svc  \\n```  \\n  \\n You can use the following configuration file to specify a prefix filter at the appdomain level.  \\n  \\n```  \\n<system.serviceModel>  \\n  <serviceHostingEnvironment>  \\n     <baseAddressPrefixFilters>  \\n        <add prefix=”net.tcp://test1.fabrikam.com:8000”/>  \\n        <add prefix=”http://test2.fabrikam.com:9000”/>  \\n    </baseAddressPrefixFilters>  \\n  </serviceHostingEnvironment>  \\n</system.serviceModel>  \\n```  \\n  \\n In this example, `net.tcp://test1.fabrikam.com:8000` and `http://test2.fabrikam.com:9000` are the only base addresses for their respective schemes which are allowed to be passed through.  \\n  \\n By default, when prefix is not specified, all addresses are passed through. Specifying the prefix will result in only the matching base address for that scheme to be passed through.  \\n  \\n> [!NOTE]\\n>  The filter does not support any wildcards. In addition, the baseAddresses supplied by IIS may have addresses bound to other schemes not present in the `baseAddressPrefixFilters` list. These addresses are not filtered out.\"\n  syntax:\n    content: 'public sealed class BaseAddressPrefixFilterElement : System.Configuration.ConfigurationElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  langs:\n  - csharp\n  name: BaseAddressPrefixFilterElement()\n  nameWithType: BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement()\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\"></xref> class.\n  syntax:\n    content: public BaseAddressPrefixFilterElement ();\n    parameters: []\n  overload: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor(System.Uri)\n  id: '#ctor(System.Uri)'\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  langs:\n  - csharp\n  name: BaseAddressPrefixFilterElement(Uri)\n  nameWithType: BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement(Uri)\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement(Uri)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\"></xref> class with a specific URI.\n  syntax:\n    content: public BaseAddressPrefixFilterElement (Uri prefix);\n    parameters:\n    - id: prefix\n      type: System.Uri\n      description: A filter that causes the service to listen on all URIs that start with this specific prefix.\n  overload: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix\n  id: Prefix\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  langs:\n  - csharp\n  name: Prefix\n  nameWithType: BaseAddressPrefixFilterElement.Prefix\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets a prefix that is used to match a part of a base address.\n  syntax:\n    content: public Uri Prefix { get; set; }\n    return:\n      type: System.Uri\n      description: A URI that is used to match a part of a base address.\n  overload: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties\n  id: Properties\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: BaseAddressPrefixFilterElement.Properties\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: To be added.\n  overload: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: System.Configuration.ConfigurationElement\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: BaseAddressPrefixFilterElement()\n  nameWithType: BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement()\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement()\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor(System.Uri)\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: BaseAddressPrefixFilterElement(Uri)\n  nameWithType: BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement(Uri)\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement(Uri)\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: Prefix\n  nameWithType: BaseAddressPrefixFilterElement.Prefix\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: Properties\n  nameWithType: BaseAddressPrefixFilterElement.Properties\n  fullName: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.#ctor*\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: BaseAddressPrefixFilterElement\n  nameWithType: BaseAddressPrefixFilterElement.BaseAddressPrefixFilterElement\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Prefix*\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: Prefix\n  nameWithType: BaseAddressPrefixFilterElement.Prefix\n- uid: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement.Properties*\n  parent: System.ServiceModel.Configuration.BaseAddressPrefixFilterElement\n  isExternal: false\n  name: Properties\n  nameWithType: BaseAddressPrefixFilterElement.Properties\n"}