{"nodes":[{"pos":[916,928],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3635,3647],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4409,4421],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5269,5281],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5340,5352],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5991,6003],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.ExistsInCollection`1\n  id: ExistsInCollection`1\n  children:\n  - System.Activities.Statements.ExistsInCollection`1.#ctor\n  - System.Activities.Statements.ExistsInCollection`1.CacheMetadata(System.Activities.CodeActivityMetadata)\n  - System.Activities.Statements.ExistsInCollection`1.Collection\n  - System.Activities.Statements.ExistsInCollection`1.Execute(System.Activities.CodeActivityContext)\n  - System.Activities.Statements.ExistsInCollection`1.Item\n  langs:\n  - csharp\n  name: ExistsInCollection<T>\n  nameWithType: ExistsInCollection<T>\n  fullName: System.Activities.Statements.ExistsInCollection<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Collection\")]\n\n      public sealed class ExistsInCollection<T> : System.Activities.CodeActivity<bool>\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.ActivityWithResult\n  - System.Activities.Activity`1\n  - System.Activities.CodeActivity`1\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.Activity`1.FromValue(`0)\n  - System.Activities.Activity`1.FromVariable(System.Activities.Variable)\n  - System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})\n  - System.Activities.Activity`1.op_Implicit(`0)\n  - System.Activities.Activity`1.op_Implicit(System.Activities.Variable)\n  - System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})\n  - System.Activities.Activity`1.Result\n  - System.Activities.ActivityWithResult.ResultType\n  - System.Activities.CodeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.CodeActivity`1.Implementation\n  - System.Activities.CodeActivity`1.ImplementationVersion\n  - System.Activities.CodeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  platform:\n  - net462\n- uid: System.Activities.Statements.ExistsInCollection`1.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.ExistsInCollection`1\n  langs:\n  - csharp\n  name: ExistsInCollection()\n  nameWithType: ExistsInCollection<T>.ExistsInCollection()\n  fullName: System.Activities.Statements.ExistsInCollection<T>.ExistsInCollection()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public ExistsInCollection ();\n    parameters: []\n  overload: System.Activities.Statements.ExistsInCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.ExistsInCollection`1.CacheMetadata(System.Activities.CodeActivityMetadata)\n  id: CacheMetadata(System.Activities.CodeActivityMetadata)\n  parent: System.Activities.Statements.ExistsInCollection`1\n  langs:\n  - csharp\n  name: CacheMetadata(CodeActivityMetadata)\n  nameWithType: ExistsInCollection<T>.CacheMetadata(CodeActivityMetadata)\n  fullName: System.Activities.Statements.ExistsInCollection<T>.CacheMetadata(CodeActivityMetadata)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);\n    parameters:\n    - id: metadata\n      type: System.Activities.CodeActivityMetadata\n      description: To be added.\n  overload: System.Activities.Statements.ExistsInCollection`1.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.ExistsInCollection`1.Collection\n  id: Collection\n  parent: System.Activities.Statements.ExistsInCollection`1\n  langs:\n  - csharp\n  name: Collection\n  nameWithType: ExistsInCollection<T>.Collection\n  fullName: System.Activities.Statements.ExistsInCollection<T>.Collection\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.InArgument<System.Collections.Generic.ICollection<T>> Collection { get; set; }\n    return:\n      type: System.Activities.InArgument{System.Collections.Generic.ICollection{T}}\n      description: To be added.\n  overload: System.Activities.Statements.ExistsInCollection`1.Collection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.ExistsInCollection`1.Execute(System.Activities.CodeActivityContext)\n  id: Execute(System.Activities.CodeActivityContext)\n  parent: System.Activities.Statements.ExistsInCollection`1\n  langs:\n  - csharp\n  name: Execute(CodeActivityContext)\n  nameWithType: ExistsInCollection<T>.Execute(CodeActivityContext)\n  fullName: System.Activities.Statements.ExistsInCollection<T>.Execute(CodeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override bool Execute (System.Activities.CodeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.CodeActivityContext\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Statements.ExistsInCollection`1.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.ExistsInCollection`1.Item\n  id: Item\n  parent: System.Activities.Statements.ExistsInCollection`1\n  langs:\n  - csharp\n  name: Item\n  nameWithType: ExistsInCollection<T>.Item\n  fullName: System.Activities.Statements.ExistsInCollection<T>.Item\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: public System.Activities.InArgument<T> Item { get; set; }\n    return:\n      type: System.Activities.InArgument`1\n      description: To be added.\n  overload: System.Activities.Statements.ExistsInCollection`1.Item*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.CodeActivity`1\n  isExternal: false\n  name: System.Activities.CodeActivity<System.Boolean>\n- uid: System.Activities.Statements.ExistsInCollection`1.#ctor\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: ExistsInCollection()\n  nameWithType: ExistsInCollection<T>.ExistsInCollection()\n  fullName: System.Activities.Statements.ExistsInCollection<T>.ExistsInCollection()\n- uid: System.Activities.Statements.ExistsInCollection`1.CacheMetadata(System.Activities.CodeActivityMetadata)\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: CacheMetadata(CodeActivityMetadata)\n  nameWithType: ExistsInCollection<T>.CacheMetadata(CodeActivityMetadata)\n  fullName: System.Activities.Statements.ExistsInCollection<T>.CacheMetadata(CodeActivityMetadata)\n- uid: System.Activities.CodeActivityMetadata\n  parent: System.Activities\n  isExternal: false\n  name: CodeActivityMetadata\n  nameWithType: CodeActivityMetadata\n  fullName: System.Activities.CodeActivityMetadata\n- uid: System.Activities.Statements.ExistsInCollection`1.Collection\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: Collection\n  nameWithType: ExistsInCollection<T>.Collection\n  fullName: System.Activities.Statements.ExistsInCollection<T>.Collection\n- uid: System.Activities.InArgument{System.Collections.Generic.ICollection{T}}\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<ICollection<T>>\n  nameWithType: InArgument<ICollection<T>>\n  fullName: System.Activities.InArgument<System.Collections.Generic.ICollection<T>>\n  spec.csharp:\n  - uid: System.Activities.InArgument`1\n    name: InArgument\n    nameWithType: InArgument\n    fullName: InArgument<System.Collections.Generic.ICollection<T>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.ExistsInCollection`1.Execute(System.Activities.CodeActivityContext)\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: Execute(CodeActivityContext)\n  nameWithType: ExistsInCollection<T>.Execute(CodeActivityContext)\n  fullName: System.Activities.Statements.ExistsInCollection<T>.Execute(CodeActivityContext)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.CodeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: CodeActivityContext\n  nameWithType: CodeActivityContext\n  fullName: System.Activities.CodeActivityContext\n- uid: System.Activities.Statements.ExistsInCollection`1.Item\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: Item\n  nameWithType: ExistsInCollection<T>.Item\n  fullName: System.Activities.Statements.ExistsInCollection<T>.Item\n- uid: System.Activities.InArgument`1\n  parent: System.Activities\n  isExternal: false\n  name: InArgument<T>\n  nameWithType: InArgument<T>\n  fullName: System.Activities.InArgument<T>\n- uid: System.Activities.Statements.ExistsInCollection`1.#ctor*\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: ExistsInCollection<T>\n  nameWithType: ExistsInCollection<T>.ExistsInCollection<T>\n- uid: System.Activities.Statements.ExistsInCollection`1.CacheMetadata*\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: ExistsInCollection<T>.CacheMetadata\n- uid: System.Activities.Statements.ExistsInCollection`1.Collection*\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: Collection\n  nameWithType: ExistsInCollection<T>.Collection\n- uid: System.Activities.Statements.ExistsInCollection`1.Execute*\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: Execute\n  nameWithType: ExistsInCollection<T>.Execute\n- uid: System.Activities.Statements.ExistsInCollection`1.Item*\n  parent: System.Activities.Statements.ExistsInCollection`1\n  isExternal: false\n  name: Item\n  nameWithType: ExistsInCollection<T>.Item\n"}