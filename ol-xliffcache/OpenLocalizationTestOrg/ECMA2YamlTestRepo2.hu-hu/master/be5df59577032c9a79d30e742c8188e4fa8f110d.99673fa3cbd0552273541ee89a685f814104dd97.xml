{"nodes":[{"pos":[2036,2067],"content":"Represents the Julian calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the Julian calendar.","pos":[0,31]}]},{"pos":[2080,4245],"content":"In 45 B.C., Julius Caesar ordered a calendar reform, which resulted in the calendar called the Julian calendar. The Julian calendar is the predecessor of the Gregorian calendar.      > [!NOTE] >  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).       The JulianCalendar class recognizes only the current era.       Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. A common year has 365 days and a leap year has 366 days.       Like the Gregorian calendar, the Julian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.       The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the 19th day of December in the year 2000 A.D. in the Julian calendar.       Currently, the JulianCalendar is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, the JulianCalendar class can be used only to calculate dates in the Julian calendar.       Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"In 45 B.C., Julius Caesar ordered a calendar reform, which resulted in the calendar called the Julian calendar.","pos":[0,111]},{"content":"The Julian calendar is the predecessor of the Gregorian calendar.","pos":[112,177]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For information about using the &lt;xref:System.Globalization.HebrewCalendar&gt; class and the other calendar classes in the .NET Framework, see <bpt id=\"p1\">[</bpt>Working with Calendars<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[183,399],"source":"      > [!NOTE] >  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md)."},{"content":"The JulianCalendar class recognizes only the current era.","pos":[406,463]},{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions.","pos":[470,603]},{"content":"Therefore, the calendar is inaccurate by one day every 128 years.","pos":[604,669]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[670,726]},{"content":"Like the Gregorian calendar, the Julian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days).","pos":[733,1048]},{"content":"February has 29 days during leap years and 28 during common years.","pos":[1049,1115]},{"content":"The date January 1, 2001 A.D.","pos":[1122,1151]},{"content":"in the Gregorian calendar is equivalent to the 19th day of December in the year 2000 A.D.","pos":[1152,1241]},{"content":"in the Julian calendar.","pos":[1242,1265]},{"content":"Currently, the JulianCalendar is not used by any of the cultures supported by the &lt;xref:System.Globalization.CultureInfo&gt; class.","pos":[1272,1400],"source":"       Currently, the JulianCalendar is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class."},{"content":"Therefore, the JulianCalendar class can be used only to calculate dates in the Julian calendar.","pos":[1401,1496]},{"content":"Each &lt;xref:System.Globalization.CultureInfo&gt; object supports a set of calendars.","pos":[1503,1583],"source":"       Each <xref:System.Globalization.CultureInfo> object supports a set of calendars."},{"content":"The &lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt; property returns the default calendar for the culture, and the &lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A&gt; property returns an array containing all the calendars supported by the culture.","pos":[1584,1844],"source":" The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture."},{"content":"To change the calendar used by a &lt;xref:System.Globalization.CultureInfo&gt;, the application should set the &lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A&gt; property of &lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt; to a new &lt;xref:System.Globalization.Calendar&gt;.","pos":[1845,2150],"source":" To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>."}]},{"pos":[4867,4964],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Globalization.JulianCalendar\"></xref> class."},{"pos":[5575,5694],"content":"Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is the specified number of months away from the specified &lt;xref:System.DateTime&gt;.","pos":[0,119],"source":"Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>."}]},{"pos":[5707,7481],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The year part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting month is outside the year of the specified &lt;xref:System.DateTime&gt;.","pos":[233,382],"source":" The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[383,433]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[434,568],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[569,687],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the <ph id=\"ph1\">`months`</ph> parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.","pos":[694,1012],"source":"       For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April."},{"content":"If the value of the <ph id=\"ph1\">`months`</ph> parameter is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[1019,1161],"source":"       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1168,1322],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1323,1525],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1532,1765],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)]"}]},{"pos":[8159,8209],"content":"The <xref:System.DateTime> to which to add months.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to which to add months.","pos":[0,50],"source":"The <xref:System.DateTime> to which to add months."}]},{"pos":[8271,8299],"content":"The number of months to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months to add.","pos":[0,28]}]},{"pos":[8359,8482],"content":"The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that results from adding the specified number of months to the specified &lt;xref:System.DateTime&gt;.","pos":[0,123],"source":"The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>."}]},{"pos":[8650,8718],"content":"The resulting <xref:System.DateTime> is outside the supported range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting &lt;xref:System.DateTime&gt; is outside the supported range.","pos":[0,68],"source":"The resulting <xref:System.DateTime> is outside the supported range."}]},{"pos":[8834,8940],"content":"<code>months</code> is less than -120000.       -or-       <code>months</code> is greater than 120000.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is less than -120000.","pos":[0,41],"source":"<code>months</code> is less than -120000."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is greater than 120000.","pos":[48,102],"source":"       -or-       <code>months</code> is greater than 120000."}]},{"pos":[9407,9525],"content":"Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is the specified number of years away from the specified &lt;xref:System.DateTime&gt;.","pos":[0,118],"source":"Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>."}]},{"pos":[9538,11175],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day part of the resulting &lt;xref:System.DateTime&gt; is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The month part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[233,345],"source":" The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[346,396]},{"content":"Therefore, &lt;xref:System.ArgumentException&gt; is thrown if the resulting year is outside the era of the specified &lt;xref:System.DateTime&gt;.","pos":[397,531],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting &lt;xref:System.DateTime&gt; remains the same as the specified &lt;xref:System.DateTime&gt;.","pos":[532,650],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"For example, February has 28 days, except during leap years when it has 29 days.","pos":[657,737]},{"content":"If the specified date is the 29th day of February in a leap year and the value of <ph id=\"ph1\">`years`</ph> is 1, the resulting date is the 28th day of February in the following year.","pos":[738,903],"source":" If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year."},{"content":"If <ph id=\"ph1\">`years`</ph> is negative, the resulting &lt;xref:System.DateTime&gt; is earlier than the specified &lt;xref:System.DateTime&gt;.","pos":[910,1024],"source":"       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"content":"The&lt;xref:System.DateTime.Kind%2A&gt; property of the returned &lt;xref:System.DateTime&gt; value always equals &lt;xref:System.DateTimeKind?displayProperty=fullName&gt;.","pos":[1031,1185],"source":"       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the &lt;xref:System.DateTime.Kind%2A&gt; property of the <ph id=\"ph1\">`time`</ph> parameter by calling the &lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt; method, as the following example shows.","pos":[1186,1388],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p2\">](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p4\">](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)</ept><ept id=\"p3\">]</ept>","pos":[1395,1628],"source":"[!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)]"}]},{"pos":[11851,11900],"content":"The <xref:System.DateTime> to which to add years.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to which to add years.","pos":[0,49],"source":"The <xref:System.DateTime> to which to add years."}]},{"pos":[11961,11988],"content":"The number of years to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of years to add.","pos":[0,27]}]},{"pos":[12048,12170],"content":"The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that results from adding the specified number of years to the specified &lt;xref:System.DateTime&gt;.","pos":[0,122],"source":"The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>."}]},{"pos":[12337,12405],"content":"The resulting <xref:System.DateTime> is outside the supported range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting &lt;xref:System.DateTime&gt; is outside the supported range.","pos":[0,68],"source":"The resulting <xref:System.DateTime> is outside the supported range."}]},{"pos":[12790,12901],"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","pos":[0,111]}]},{"pos":[13593,13672],"content":"Always returns <bpt id=\"p1\">&lt;xref href=\"System.Globalization.CalendarAlgorithmType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>."},{"pos":[14092,14178],"content":"Gets the list of eras in the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the list of eras in the <xref href=\"System.Globalization.JulianCalendar\"></xref>."},{"pos":[14190,14336],"content":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This property always returns an array with only one element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This property always returns an array with only one element.","pos":[0,146],"nodes":[{"content":"The &lt;xref:System.Globalization.JulianCalendar&gt; class recognizes only the current era.","pos":[0,85],"source":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era."},{"content":"This property always returns an array with only one element.","pos":[86,146]}]}]},{"pos":[14454,14564],"content":"An array of integers that represents the eras in the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An array of integers that represents the eras in the <xref href=\"System.Globalization.JulianCalendar\"></xref>."},{"pos":[15082,15151],"content":"Returns the day of the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,69],"source":"Returns the day of the month in the specified <xref:System.DateTime>."}]},{"pos":[15826,15861],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[15918,16000],"content":"An integer from 1 to 31 that represents the day of the month in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 31 that represents the day of the month in <code>time</code>."},{"pos":[16522,16590],"content":"Returns the day of the week in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the week in the specified &lt;xref:System.DateTime&gt;.","pos":[0,68],"source":"Returns the day of the week in the specified <xref:System.DateTime>."}]},{"pos":[16602,16708],"content":"The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.DayOfWeek&gt; values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.","pos":[0,106],"source":"The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday."}]},{"pos":[17374,17409],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[17470,17559],"content":"A &lt;xref:System.DayOfWeek&gt; value that represents the day of the week in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.DayOfWeek> value that represents the day of the week in <code>time</code>."},{"pos":[18080,18148],"content":"Returns the day of the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the day of the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,68],"source":"Returns the day of the year in the specified <xref:System.DateTime>."}]},{"pos":[18160,18526],"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year. The total is the same value as that returned by <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year. The total is the same value as that returned by <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>.","pos":[0,366],"nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year.","pos":[0,84]},{"content":"For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year.","pos":[85,257]},{"content":"The total is the same value as that returned by &lt;xref:System.Globalization.JulianCalendar.GetDaysInYear%2A&gt;.","pos":[258,366],"source":" The total is the same value as that returned by <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>."}]}]},{"pos":[19186,19221],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[19278,19360],"content":"An integer from 1 to 366 that represents the day of the year in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 366 that represents the day of the year in <code>time</code>."},{"pos":[19964,20057],"content":"Returns the number of days in the specified month in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of days in the specified month in the specified year in the specified era.","pos":[0,93]}]},{"pos":[20069,20169],"content":"This method returns 28 or 29 for February (<ph id=\"ph1\">`month`</ph> = 2), depending on whether <ph id=\"ph2\">`year`</ph> is a leap year.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year."},{"pos":[20830,20866],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[20927,20977],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[21036,21071],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[21128,21213],"content":"The number of days in the specified month in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified month in the specified year in the specified era.","pos":[0,85]}]},{"pos":[21407,21646],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[154,231],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."}]},{"pos":[22123,22193],"content":"Returns the number of days in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of days in the specified year in the specified era.","pos":[0,70]}]},{"pos":[22205,22280],"content":"This method returns 365 or 366, depending on whether <ph id=\"ph1\">`year`</ph> is a leap year.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method returns 365 or 366, depending on whether `year` is a leap year."},{"pos":[22906,22942],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[23001,23036],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[23093,23155],"content":"The number of days in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of days in the specified year in the specified era.","pos":[0,62]}]},{"pos":[23348,23499],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."}]},{"pos":[23912,23968],"content":"Returns the era in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the era in the specified &lt;xref:System.DateTime&gt;.","pos":[0,56],"source":"Returns the era in the specified <xref:System.DateTime>."}]},{"pos":[23980,24065],"content":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Globalization.JulianCalendar&gt; class recognizes only the current era.","pos":[0,85],"source":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era."}]},{"pos":[24719,24754],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[24811,24867],"content":"An integer that represents the era in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that represents the era in <code>time</code>."},{"pos":[25411,25466],"content":"Calculates the leap month for a specified year and era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the leap month for a specified year and era.","pos":[0,55]}]},{"pos":[25478,26045],"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[0,567],"nodes":[{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year.","pos":[0,142]},{"content":"For example, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns a number between 1 and 13 that indicates the month associated with a specified date.","pos":[143,326],"source":" For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date."},{"content":"If there is a leap month between the eighth and ninth months of the year, the &lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt; method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[327,567],"source":" If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."}]}]},{"pos":[26198,26234],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[26293,26328],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[26385,26624],"content":"A positive integer that indicates the leap month in the specified year and era. Alternatively, this method returns zero if the calendar does not support a leap month, or if <code>year</code> and <code>era</code> do not specify a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"A positive integer that indicates the leap month in the specified year and era.","pos":[0,79]},{"content":"Alternatively, this method returns zero if the calendar does not support a leap month, or if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">era</ph><ept id=\"p2\">&lt;/code&gt;</ept> do not specify a leap year.","pos":[80,239],"source":" Alternatively, this method returns zero if the calendar does not support a leap month, or if <code>year</code> and <code>era</code> do not specify a leap year."}]},{"pos":[27125,27183],"content":"Returns the month in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the month in the specified &lt;xref:System.DateTime&gt;.","pos":[0,58],"source":"Returns the month in the specified <xref:System.DateTime>."}]},{"pos":[27856,27891],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[27948,28019],"content":"An integer from 1 to 12 that represents the month in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer from 1 to 12 that represents the month in <code>time</code>."},{"pos":[28580,28652],"content":"Returns the number of months in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of months in the specified year in the specified era.","pos":[0,72]}]},{"pos":[29299,29335],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[29394,29429],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[29486,29550],"content":"The number of months in the specified year in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of months in the specified year in the specified era.","pos":[0,64]}]},{"pos":[29745,29896],"content":"<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,64],"source":"<code>era</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[71,147],"source":"       -or-       <code>year</code> is outside the range supported by the calendar."}]},{"pos":[30314,30371],"content":"Returns the year in the specified <xref:System.DateTime>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the year in the specified &lt;xref:System.DateTime&gt;.","pos":[0,57],"source":"Returns the year in the specified <xref:System.DateTime>."}]},{"pos":[31043,31078],"content":"The <xref:System.DateTime> to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; to read.","pos":[0,35],"source":"The <xref:System.DateTime> to read."}]},{"pos":[31135,31192],"content":"An integer that represents the year in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that represents the year in <code>time</code>."},{"pos":[31810,31883],"content":"Determines whether the specified date in the specified era is a leap day.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified date in the specified era is a leap day.","pos":[0,73]}]},{"pos":[31896,32355],"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap day is a day that occurs only in a leap year. In the Julian calendar, the 29th day of February is the only leap day.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap day is a day that occurs only in a leap year. In the Julian calendar, the 29th day of February is the only leap day.","pos":[0,457],"nodes":[{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions.","pos":[0,133]},{"content":"Therefore, the calendar is inaccurate by one day every 128 years.","pos":[134,199]},{"content":"For example, the year 1999 was not a leap year, but the year 2000 was.","pos":[200,270]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[271,327]},{"content":"A leap day is a day that occurs only in a leap year.","pos":[334,386]},{"content":"In the Julian calendar, the 29th day of February is the only leap day.","pos":[387,457]}]}]},{"pos":[33030,33066],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[33127,33177],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[33236,33284],"content":"An integer from 1 to 31 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 31 that represents the day.","pos":[0,48]}]},{"pos":[33343,33378],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[33437,33608],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified day is a leap day; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[33797,34122],"content":"<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,65],"source":"<code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[72,149],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[156,231],"source":"       -or-       <code>day</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[238,313],"source":"       -or-       <code>era</code> is outside the range supported by the calendar."}]},{"pos":[34633,34731],"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","pos":[0,98]}]},{"pos":[34744,35195],"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap month is an entire month that occurs only in a leap year. The Julian calendar does not have any leap months.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap month is an entire month that occurs only in a leap year. The Julian calendar does not have any leap months.","pos":[0,449],"nodes":[{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions.","pos":[0,133]},{"content":"Therefore, the calendar is inaccurate by one day every 128 years.","pos":[134,199]},{"content":"For example, the year 1999 was not a leap year, but the year 2000 was.","pos":[200,270]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[271,327]},{"content":"A leap month is an entire month that occurs only in a leap year.","pos":[334,398]},{"content":"The Julian calendar does not have any leap months.","pos":[399,449]}]}]},{"pos":[35840,35876],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[35937,35987],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[36046,36081],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[36140,36268],"content":"This method always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, unless overridden by a derived class.","needQuote":true,"needEscape":true,"source":"This method always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, unless overridden by a derived class."},{"pos":[36459,36698],"content":"<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,65],"source":"<code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[72,149],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[156,231],"source":"       -or-       <code>era</code> is outside the range supported by the calendar."}]},{"pos":[37160,37234],"content":"Determines whether the specified year in the specified era is a leap year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified year in the specified era is a leap year.","pos":[0,74]}]},{"pos":[37246,37573],"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.","pos":[0,327],"nodes":[{"content":"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions.","pos":[0,133]},{"content":"Therefore, the calendar is inaccurate by one day every 128 years.","pos":[134,199]},{"content":"For example, the year 1999 was not a leap year, but the year 2000 was.","pos":[200,270]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[271,327]}]}]},{"pos":[38190,38226],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[38285,38320],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[38379,38552],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified year is a leap year; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[38742,38893],"content":"<code>year</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,65],"source":"<code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[72,147],"source":"       -or-       <code>era</code> is outside the range supported by the calendar."}]},{"pos":[39256,39307],"content":"Represents the current era. This field is constant.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the current era. This field is constant.","pos":[0,51],"nodes":[{"content":"Represents the current era.","pos":[0,27]},{"content":"This field is constant.","pos":[28,51]}]}]},{"pos":[39319,39433],"content":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This field always returns 1.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This field always returns 1.","pos":[0,114],"nodes":[{"content":"The &lt;xref:System.Globalization.JulianCalendar&gt; class recognizes only the current era.","pos":[0,85],"source":"The <xref:System.Globalization.JulianCalendar> class recognizes only the current era."},{"content":"This field always returns 1.","pos":[86,114]}]}]},{"pos":[39551,39563],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[40000,40110],"content":"Gets the latest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Gets the latest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class."},{"pos":[40729,40926],"content":"The latest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"The latest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, which is equivalent to the last moment of December 31, 9999 C.E.","pos":[0,170],"source":"The latest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E."},{"content":"in the Gregorian calendar.","pos":[171,197]}]},{"pos":[41433,41545],"content":"Gets the earliest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Gets the earliest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class."},{"pos":[42164,42362],"content":"The earliest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.","needQuote":true,"needEscape":true,"nodes":[{"content":"The earliest date and time supported by the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.JulianCalendar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, which is equivalent to the first moment of January 1, 0001 C.E.","pos":[0,171],"source":"The earliest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class, which is equivalent to the first moment of January 1, 0001 C.E."},{"content":"in the Gregorian calendar.","pos":[172,198]}]},{"pos":[43174,43271],"content":"Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.DateTime&gt; that is set to the specified date and time in the specified era.","pos":[0,97],"source":"Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era."}]},{"pos":[43498,43534],"content":"An integer that represents the year.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]},{"pos":[43595,43645],"content":"An integer from 1 to 12 that represents the month.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]},{"pos":[43704,43752],"content":"An integer from 1 to 31 that represents the day.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 1 to 31 that represents the day.","pos":[0,48]}]},{"pos":[43812,43861],"content":"An integer from 0 to 23 that represents the hour.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 23 that represents the hour.","pos":[0,49]}]},{"pos":[43923,43974],"content":"An integer from 0 to 59 that represents the minute.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 59 that represents the minute.","pos":[0,51]}]},{"pos":[44036,44087],"content":"An integer from 0 to 59 that represents the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 59 that represents the second.","pos":[0,51]}]},{"pos":[44154,44211],"content":"An integer from 0 to 999 that represents the millisecond.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer from 0 to 999 that represents the millisecond.","pos":[0,57]}]},{"pos":[44270,44305],"content":"An integer that represents the era.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]},{"pos":[44365,44454],"content":"The <xref:System.DateTime> that is set to the specified date and time in the current era.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.DateTime&gt; that is set to the specified date and time in the current era.","pos":[0,89],"source":"The <xref:System.DateTime> that is set to the specified date and time in the current era."}]},{"pos":[44644,45289],"content":"<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.       -or-       <code>hour</code> is less than zero or greater than 23.       -or-       <code>minute</code> is less than zero or greater than 59.       -or-       <code>second</code> is less than zero or greater than 59.       -or-       <code>millisecond</code> is less than zero or greater than 999.       -or-       <code>era</code> is outside the range supported by the calendar.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[0,65],"source":"<code>year</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[72,149],"source":"       -or-       <code>month</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[156,231],"source":"       -or-       <code>day</code> is outside the range supported by the calendar."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;hour&lt;/code&gt;</ph> is less than zero or greater than 23.","pos":[238,304],"source":"       -or-       <code>hour</code> is less than zero or greater than 23."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;minute&lt;/code&gt;</ph> is less than zero or greater than 59.","pos":[311,379],"source":"       -or-       <code>minute</code> is less than zero or greater than 59."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;second&lt;/code&gt;</ph> is less than zero or greater than 59.","pos":[386,454],"source":"       -or-       <code>second</code> is less than zero or greater than 59."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;millisecond&lt;/code&gt;</ph> is less than zero or greater than 999.","pos":[461,535],"source":"       -or-       <code>millisecond</code> is less than zero or greater than 999."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","pos":[542,617],"source":"       -or-       <code>era</code> is outside the range supported by the calendar."}]},{"pos":[45732,45900],"content":"Converts the specified year to a four-digit year by using the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax*> property to determine the appropriate century.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified year to a four-digit year by using the &lt;xref:System.Globalization.JulianCalendar.TwoDigitYearMax*&gt; property to determine the appropriate century.","pos":[0,168],"source":"Converts the specified year to a four-digit year by using the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax*> property to determine the appropriate century."}]},{"pos":[45913,47041],"content":"<xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the specified `year` within that 100-year range. For example, if <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A&gt; is the last year in the 100-year range that can be represented by a two-digit year.","pos":[0,145],"source":"<xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year."},{"content":"The century is determined by finding the sole occurrence of the specified <ph id=\"ph1\">`year`</ph> within that 100-year range.","pos":[146,254],"source":" The century is determined by finding the sole occurrence of the specified `year` within that 100-year range."},{"content":"For example, if &lt;xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A&gt; is set to 2029, the 100-year range is from 1930 to 2029.","pos":[255,389],"source":" For example, if <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029."},{"content":"Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.","pos":[390,498]},{"content":"ToFourDigitYear supports either a two-digit year or a four-digit year.","pos":[505,575]},{"content":"Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the &lt;xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A&gt; value representing the appropriate century.","pos":[576,806],"source":" Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> value representing the appropriate century."},{"content":"If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value.","pos":[807,965]},{"content":"If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[966,1126]}]},{"pos":[47189,47259],"content":"A two-digit or four-digit integer that represents the year to convert.","needQuote":true,"needEscape":true,"nodes":[{"content":"A two-digit or four-digit integer that represents the year to convert.","pos":[0,70]}]},{"pos":[47316,47392],"content":"An integer that contains the four-digit representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An integer that contains the four-digit representation of <code>year</code>."},{"pos":[47586,47651],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","needQuote":true,"needEscape":true,"source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[48046,48135],"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,89]}]},{"pos":[48148,48814],"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The <xref:System.Globalization.JulianCalendar> class does not detect changes in the system settings.       The application can set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The <xref:System.Globalization.JulianCalendar> class does not detect changes in the system settings.       The application can set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.","pos":[0,662],"nodes":[{"content":"This property allows a 2-digit year to be properly translated to a 4-digit year.","pos":[0,80]},{"content":"For example, if this property is set to 2029, the 100-year range is from 1930 to 2029.","pos":[81,167]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.","pos":[168,276]},{"content":"The &lt;xref:System.Globalization.JulianCalendar&gt; class does not detect changes in the system settings.","pos":[283,383],"source":"       The <xref:System.Globalization.JulianCalendar> class does not detect changes in the system settings."},{"content":"The application can set this value to 99 to indicate that 2-digit years are to be taken literally.","pos":[390,488]},{"content":"For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99.","pos":[489,607]},{"content":"Therefore, a 2-digit value of 30 is interpreted as 30.","pos":[608,662]}]}]},{"pos":[48945,49021],"content":"The last year of a 100-year range that can be represented by a 2-digit year.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,76]}]},{"pos":[49216,49457],"content":"The value specified in a set operation is less than 99.       -or-       The value specified in a set operation is greater than <xref uid=\"langword_csharp_MaxSupportedDateTime.Year\" name=\"MaxSupportedDateTime.Year\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value specified in a set operation is less than 99.","pos":[0,55]},{"content":"-or-       The value specified in a set operation is greater than <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_MaxSupportedDateTime.Year\" name=\"MaxSupportedDateTime.Year\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[62,231],"source":"       -or-       The value specified in a set operation is greater than <xref uid=\"langword_csharp_MaxSupportedDateTime.Year\" name=\"MaxSupportedDateTime.Year\" href=\"\"></xref>."}]},{"pos":[49569,49623],"content":"In a set operation, the current instance is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"In a set operation, the current instance is read-only.","pos":[0,54]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.JulianCalendar\n  id: JulianCalendar\n  children:\n  - System.Globalization.JulianCalendar.#ctor\n  - System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.JulianCalendar.AlgorithmType\n  - System.Globalization.JulianCalendar.Eras\n  - System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.GetEra(System.DateTime)\n  - System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.GetMonth(System.DateTime)\n  - System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.GetYear(System.DateTime)\n  - System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.JulianEra\n  - System.Globalization.JulianCalendar.MaxSupportedDateTime\n  - System.Globalization.JulianCalendar.MinSupportedDateTime\n  - System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.JulianCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  name: JulianCalendar\n  nameWithType: JulianCalendar\n  fullName: System.Globalization.JulianCalendar\n  type: Class\n  summary: Represents the Julian calendar.\n  remarks: \"In 45 B.C., Julius Caesar ordered a calendar reform, which resulted in the calendar called the Julian calendar. The Julian calendar is the predecessor of the Gregorian calendar.  \\n  \\n> [!NOTE]\\n>  For information about using the <xref:System.Globalization.HebrewCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The JulianCalendar class recognizes only the current era.  \\n  \\n Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. A common year has 365 days and a leap year has 366 days.  \\n  \\n Like the Gregorian calendar, the Julian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.  \\n  \\n The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the 19th day of December in the year 2000 A.D. in the Julian calendar.  \\n  \\n Currently, the JulianCalendar is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, the JulianCalendar class can be used only to calculate dates in the Julian calendar.  \\n  \\n Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class JulianCalendar : System.Globalization.Calendar\n  inheritance:\n  - System.Globalization.Calendar\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: JulianCalendar()\n  nameWithType: JulianCalendar.JulianCalendar()\n  fullName: System.Globalization.JulianCalendar.JulianCalendar()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.JulianCalendar\"></xref> class.\n  syntax:\n    content: public JulianCalendar ();\n    parameters: []\n  overload: System.Globalization.JulianCalendar.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: AddMonths(DateTime,Int32)\n  nameWithType: JulianCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.JulianCalendar.AddMonths(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.  \\n  \\n If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)]\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_20_2.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_20_2.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_20_2.cs)]\"\n  syntax:\n    content: public override DateTime AddMonths (DateTime time, int months);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to which to add months.\n    - id: months\n      type: System.Int32\n      description: The number of months to add.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>.\n  overload: System.Globalization.JulianCalendar.AddMonths*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref:System.DateTime> is outside the supported range.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>months</code> is less than -120000.  \\n  \\n -or-  \\n  \\n <code>months</code> is greater than 120000.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: AddYears(DateTime,Int32)\n  nameWithType: JulianCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.JulianCalendar.AddYears(DateTime,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.  \\n  \\n If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)]\\n [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)]\"\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_19_2.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_19_2.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_19_2.cs)]\"\n  syntax:\n    content: public override DateTime AddYears (DateTime time, int years);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to which to add years.\n    - id: years\n      type: System.Int32\n      description: The number of years to add.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>.\n  overload: System.Globalization.JulianCalendar.AddYears*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref:System.DateTime> is outside the supported range.\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.AlgorithmType\n  id: AlgorithmType\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: AlgorithmType\n  nameWithType: JulianCalendar.AlgorithmType\n  fullName: System.Globalization.JulianCalendar.AlgorithmType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.\n  remarks: ''\n  example:\n  - \"The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \\n  \\n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.j_6_1.cs)]\\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.j_6_1.vb)]\"\n  syntax:\n    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }\n    return:\n      type: System.Globalization.CalendarAlgorithmType\n      description: Always returns <xref href=\"System.Globalization.CalendarAlgorithmType\"></xref>.\n  overload: System.Globalization.JulianCalendar.AlgorithmType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.Eras\n  id: Eras\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: Eras\n  nameWithType: JulianCalendar.Eras\n  fullName: System.Globalization.JulianCalendar.Eras\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the list of eras in the <xref href=\"System.Globalization.JulianCalendar\"></xref>.\n  remarks: The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This property always returns an array with only one element.\n  syntax:\n    content: public override int[] Eras { get; }\n    return:\n      type: System.Int32[]\n      description: An array of integers that represents the eras in the <xref href=\"System.Globalization.JulianCalendar\"></xref>.\n  overload: System.Globalization.JulianCalendar.Eras*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetDayOfMonth(DateTime)\n  nameWithType: JulianCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the month in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_8_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_8_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_8_1.cs)]\"\n  syntax:\n    content: public override int GetDayOfMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day of the month in <code>time</code>.\n  overload: System.Globalization.JulianCalendar.GetDayOfMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetDayOfWeek(DateTime)\n  nameWithType: JulianCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the week in the specified <xref:System.DateTime>.\n  remarks: The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_6_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_6_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_6_1.cs)]\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.DayOfWeek\n      description: A <xref:System.DayOfWeek> value that represents the day of the week in <code>time</code>.\n  overload: System.Globalization.JulianCalendar.GetDayOfWeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetDayOfYear(DateTime)\n  nameWithType: JulianCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetDayOfYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the day of the year in the specified <xref:System.DateTime>.\n  remarks: The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year. The total is the same value as that returned by <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>.\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_0_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_0_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_0_1.cs)]\"\n  syntax:\n    content: public override int GetDayOfYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 366 that represents the day of the year in <code>time</code>.\n  overload: System.Globalization.JulianCalendar.GetDayOfYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified month in the specified year in the specified era.\n  remarks: This method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year.\n  example:\n  - \"The following example calls GetDaysInMonth for the second month in each of five years in each era.  \\n  \\n [!code-cpp[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/44fd8236-349c-466d-b6f3-_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/44fd8236-349c-466d-b6f3-_1.cs)]\\n [!code-vb[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/44fd8236-349c-466d-b6f3-_1.vb)]\"\n  syntax:\n    content: public override int GetDaysInMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified month in the specified year in the specified era.\n  overload: System.Globalization.JulianCalendar.GetDaysInMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: JulianCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetDaysInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified year in the specified era.\n  remarks: This method returns 365 or 366, depending on whether `year` is a leap year.\n  example:\n  - \"The following example calls GetDaysInYear for five years in each era.  \\n  \\n [!code-cs[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_11_1.cs)]\\n [!code-cpp[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_11_1.cpp)]\\n [!code-vb[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_11_1.vb)]\"\n  syntax:\n    content: public override int GetDaysInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified year in the specified era.\n  overload: System.Globalization.JulianCalendar.GetDaysInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetEra(DateTime)\n  nameWithType: JulianCalendar.GetEra(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetEra(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the era in the specified <xref:System.DateTime>.\n  remarks: The <xref:System.Globalization.JulianCalendar> class recognizes only the current era.\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_1_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_1_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_1_1.cs)]\"\n  syntax:\n    content: public override int GetEra (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the era in <code>time</code>.\n  overload: System.Globalization.JulianCalendar.GetEra*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: JulianCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetLeapMonth(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Calculates the leap month for a specified year and era.\n  remarks: In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.\n  syntax:\n    content: public override int GetLeapMonth (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: A positive integer that indicates the leap month in the specified year and era. Alternatively, this method returns zero if the calendar does not support a leap month, or if <code>year</code> and <code>era</code> do not specify a leap year.\n  overload: System.Globalization.JulianCalendar.GetLeapMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetMonth(DateTime)\n  nameWithType: JulianCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetMonth(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the month in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_15_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_15_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_15_1.cs)]\"\n  syntax:\n    content: public override int GetMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month in <code>time</code>.\n  overload: System.Globalization.JulianCalendar.GetMonth*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: JulianCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetMonthsInYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the number of months in the specified year in the specified era.\n  remarks: ''\n  example:\n  - \"The following example calls GetMonthsInYear for five years in each era.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_7_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_7_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_7_1.cs)]\"\n  syntax:\n    content: public override int GetMonthsInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of months in the specified year in the specified era.\n  overload: System.Globalization.JulianCalendar.GetMonthsInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>era</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>year</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: GetYear(DateTime)\n  nameWithType: JulianCalendar.GetYear(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetYear(DateTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns the year in the specified <xref:System.DateTime>.\n  remarks: ''\n  example:\n  - \"The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_12_1.vb)]\\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_12_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_12_1.cs)]\"\n  syntax:\n    content: public override int GetYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref:System.DateTime> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the year in <code>time</code>.\n  overload: System.Globalization.JulianCalendar.GetYear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified date in the specified era is a leap day.\n  remarks: \"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  \\n  \\n A leap day is a day that occurs only in a leap year. In the Julian calendar, the 29th day of February is the only leap day.\"\n  example:\n  - \"The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \\n  \\n [!code-cs[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/dc155d8f-dfc5-4b2c-b5d1-_1.cs)]\\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/dc155d8f-dfc5-4b2c-b5d1-_1.cpp)]\\n [!code-vb[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/dc155d8f-dfc5-4b2c-b5d1-_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapDay (int year, int month, int day, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified day is a leap day; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.JulianCalendar.IsLeapDay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: JulianCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.IsLeapMonth(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified month in the specified year in the specified era is a leap month.\n  remarks: \"Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  \\n  \\n A leap month is an entire month that occurs only in a leap year. The Julian calendar does not have any leap months.\"\n  example:\n  - \"The following example calls IsLeapMonth for all the months in five years in the current era.  \\n  \\n [!code-vb[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/ba7f2b6b-4831-427c-a7c2-_1.vb)]\\n [!code-cs[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/ba7f2b6b-4831-427c-a7c2-_1.cs)]\\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/ba7f2b6b-4831-427c-a7c2-_1.cpp)]\"\n  syntax:\n    content: public override bool IsLeapMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: This method always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, unless overridden by a derived class.\n  overload: System.Globalization.JulianCalendar.IsLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: JulianCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.IsLeapYear(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Determines whether the specified year in the specified era is a leap year.\n  remarks: Unlike the Gregorian calendar, the Julian calendar defines a leap year as a year that is evenly divisible by four with no exceptions. Therefore, the calendar is inaccurate by one day every 128 years. For example, the year 1999 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.\n  example:\n  - \"The following example calls IsLeapYear for five years in each of the eras.  \\n  \\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.j_3_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.j_3_1.cs)]\\n [!code-vb[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_3_1.vb)]\"\n  syntax:\n    content: public override bool IsLeapYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified year is a leap year; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.JulianCalendar.IsLeapYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.JulianEra\n  id: JulianEra\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: JulianEra\n  nameWithType: JulianCalendar.JulianEra\n  fullName: System.Globalization.JulianCalendar.JulianEra\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Represents the current era. This field is constant.\n  remarks: The <xref:System.Globalization.JulianCalendar> class recognizes only the current era. This field always returns 1.\n  syntax:\n    content: public static readonly int JulianEra;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: MaxSupportedDateTime\n  nameWithType: JulianCalendar.MaxSupportedDateTime\n  fullName: System.Globalization.JulianCalendar.MaxSupportedDateTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the latest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_2_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_2_1.cs)]\\n [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_2_1.vb)]\"\n  syntax:\n    content: public override DateTime MaxSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The latest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.\n  overload: System.Globalization.JulianCalendar.MaxSupportedDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: MinSupportedDateTime\n  nameWithType: JulianCalendar.MinSupportedDateTime\n  fullName: System.Globalization.JulianCalendar.MinSupportedDateTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets the earliest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_3_1.cpp)]\\n [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_3_1.cs)]\\n [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_3_1.vb)]\"\n  syntax:\n    content: public override DateTime MinSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The earliest date and time supported by the <xref href=\"System.Globalization.JulianCalendar\"></xref> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.\n  overload: System.Globalization.JulianCalendar.MinSupportedDateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era.\n  syntax:\n    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day.\n    - id: hour\n      type: System.Int32\n      description: An integer from 0 to 23 that represents the hour.\n    - id: minute\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the minute.\n    - id: second\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the second.\n    - id: millisecond\n      type: System.Int32\n      description: An integer from 0 to 999 that represents the millisecond.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.DateTime\n      description: The <xref:System.DateTime> that is set to the specified date and time in the current era.\n  overload: System.Globalization.JulianCalendar.ToDateTime*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>hour</code> is less than zero or greater than 23.  \\n  \\n -or-  \\n  \\n <code>minute</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>second</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>millisecond</code> is less than zero or greater than 999.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: ToFourDigitYear(Int32)\n  nameWithType: JulianCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.JulianCalendar.ToFourDigitYear(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Converts the specified year to a four-digit year by using the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax*> property to determine the appropriate century.\n  remarks: \"<xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the specified `year` within that 100-year range. For example, if <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  \\n  \\n ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.\"\n  syntax:\n    content: public override int ToFourDigitYear (int year);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A two-digit or four-digit integer that represents the year to convert.\n    return:\n      type: System.Int32\n      description: An integer that contains the four-digit representation of <code>year</code>.\n  overload: System.Globalization.JulianCalendar.ToFourDigitYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> is outside the range supported by the calendar.\n  platform:\n  - net462\n- uid: System.Globalization.JulianCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.JulianCalendar\n  langs:\n  - csharp\n  name: TwoDigitYearMax\n  nameWithType: JulianCalendar.TwoDigitYearMax\n  fullName: System.Globalization.JulianCalendar.TwoDigitYearMax\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.\n  remarks: \"This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  \\n  \\n The <xref:System.Globalization.JulianCalendar> class does not detect changes in the system settings.  \\n  \\n The application can set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    return:\n      type: System.Int32\n      description: The last year of a 100-year range that can be represented by a 2-digit year.\n  overload: System.Globalization.JulianCalendar.TwoDigitYearMax*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value specified in a set operation is less than 99.  \\n  \\n -or-  \\n  \\n The value specified in a set operation is greater than <xref uid=\\\"langword_csharp_MaxSupportedDateTime.Year\\\" name=\\\"MaxSupportedDateTime.Year\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In a set operation, the current instance is read-only.\n  platform:\n  - net462\nreferences:\n- uid: System.Globalization.Calendar\n  isExternal: false\n  name: System.Globalization.Calendar\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Globalization.JulianCalendar.#ctor\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: JulianCalendar()\n  nameWithType: JulianCalendar.JulianCalendar()\n  fullName: System.Globalization.JulianCalendar.JulianCalendar()\n- uid: System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: AddMonths(DateTime,Int32)\n  nameWithType: JulianCalendar.AddMonths(DateTime,Int32)\n  fullName: System.Globalization.JulianCalendar.AddMonths(DateTime,Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: AddYears(DateTime,Int32)\n  nameWithType: JulianCalendar.AddYears(DateTime,Int32)\n  fullName: System.Globalization.JulianCalendar.AddYears(DateTime,Int32)\n- uid: System.Globalization.JulianCalendar.AlgorithmType\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: JulianCalendar.AlgorithmType\n  fullName: System.Globalization.JulianCalendar.AlgorithmType\n- uid: System.Globalization.CalendarAlgorithmType\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarAlgorithmType\n  nameWithType: CalendarAlgorithmType\n  fullName: System.Globalization.CalendarAlgorithmType\n- uid: System.Globalization.JulianCalendar.Eras\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: JulianCalendar.Eras\n  fullName: System.Globalization.JulianCalendar.Eras\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDayOfMonth(DateTime)\n  nameWithType: JulianCalendar.GetDayOfMonth(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDayOfWeek(DateTime)\n  nameWithType: JulianCalendar.GetDayOfWeek(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: true\n  name: DayOfWeek\n  nameWithType: DayOfWeek\n  fullName: System.DayOfWeek\n- uid: System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDayOfYear(DateTime)\n  nameWithType: JulianCalendar.GetDayOfYear(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDaysInMonth(Int32,Int32,Int32)\n  nameWithType: JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)\n- uid: System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDaysInYear(Int32,Int32)\n  nameWithType: JulianCalendar.GetDaysInYear(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetDaysInYear(Int32,Int32)\n- uid: System.Globalization.JulianCalendar.GetEra(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetEra(DateTime)\n  nameWithType: JulianCalendar.GetEra(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetEra(DateTime)\n- uid: System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetLeapMonth(Int32,Int32)\n  nameWithType: JulianCalendar.GetLeapMonth(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetLeapMonth(Int32,Int32)\n- uid: System.Globalization.JulianCalendar.GetMonth(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetMonth(DateTime)\n  nameWithType: JulianCalendar.GetMonth(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetMonth(DateTime)\n- uid: System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetMonthsInYear(Int32,Int32)\n  nameWithType: JulianCalendar.GetMonthsInYear(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.GetMonthsInYear(Int32,Int32)\n- uid: System.Globalization.JulianCalendar.GetYear(System.DateTime)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetYear(DateTime)\n  nameWithType: JulianCalendar.GetYear(DateTime)\n  fullName: System.Globalization.JulianCalendar.GetYear(DateTime)\n- uid: System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: IsLeapDay(Int32,Int32,Int32,Int32)\n  nameWithType: JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: IsLeapMonth(Int32,Int32,Int32)\n  nameWithType: JulianCalendar.IsLeapMonth(Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.IsLeapMonth(Int32,Int32,Int32)\n- uid: System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: IsLeapYear(Int32,Int32)\n  nameWithType: JulianCalendar.IsLeapYear(Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.IsLeapYear(Int32,Int32)\n- uid: System.Globalization.JulianCalendar.JulianEra\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: JulianEra\n  nameWithType: JulianCalendar.JulianEra\n  fullName: System.Globalization.JulianCalendar.JulianEra\n- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: JulianCalendar.MaxSupportedDateTime\n  fullName: System.Globalization.JulianCalendar.MaxSupportedDateTime\n- uid: System.Globalization.JulianCalendar.MinSupportedDateTime\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: JulianCalendar.MinSupportedDateTime\n  fullName: System.Globalization.JulianCalendar.MinSupportedDateTime\n- uid: System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  nameWithType: JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n  fullName: System.Globalization.JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)\n- uid: System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: ToFourDigitYear(Int32)\n  nameWithType: JulianCalendar.ToFourDigitYear(Int32)\n  fullName: System.Globalization.JulianCalendar.ToFourDigitYear(Int32)\n- uid: System.Globalization.JulianCalendar.TwoDigitYearMax\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: JulianCalendar.TwoDigitYearMax\n  fullName: System.Globalization.JulianCalendar.TwoDigitYearMax\n- uid: System.Globalization.JulianCalendar.#ctor*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: JulianCalendar\n  nameWithType: JulianCalendar.JulianCalendar\n- uid: System.Globalization.JulianCalendar.AddMonths*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: AddMonths\n  nameWithType: JulianCalendar.AddMonths\n- uid: System.Globalization.JulianCalendar.AddYears*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: AddYears\n  nameWithType: JulianCalendar.AddYears\n- uid: System.Globalization.JulianCalendar.AlgorithmType*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: JulianCalendar.AlgorithmType\n- uid: System.Globalization.JulianCalendar.Eras*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: JulianCalendar.Eras\n- uid: System.Globalization.JulianCalendar.GetDayOfMonth*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDayOfMonth\n  nameWithType: JulianCalendar.GetDayOfMonth\n- uid: System.Globalization.JulianCalendar.GetDayOfWeek*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDayOfWeek\n  nameWithType: JulianCalendar.GetDayOfWeek\n- uid: System.Globalization.JulianCalendar.GetDayOfYear*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDayOfYear\n  nameWithType: JulianCalendar.GetDayOfYear\n- uid: System.Globalization.JulianCalendar.GetDaysInMonth*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDaysInMonth\n  nameWithType: JulianCalendar.GetDaysInMonth\n- uid: System.Globalization.JulianCalendar.GetDaysInYear*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetDaysInYear\n  nameWithType: JulianCalendar.GetDaysInYear\n- uid: System.Globalization.JulianCalendar.GetEra*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetEra\n  nameWithType: JulianCalendar.GetEra\n- uid: System.Globalization.JulianCalendar.GetLeapMonth*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetLeapMonth\n  nameWithType: JulianCalendar.GetLeapMonth\n- uid: System.Globalization.JulianCalendar.GetMonth*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetMonth\n  nameWithType: JulianCalendar.GetMonth\n- uid: System.Globalization.JulianCalendar.GetMonthsInYear*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetMonthsInYear\n  nameWithType: JulianCalendar.GetMonthsInYear\n- uid: System.Globalization.JulianCalendar.GetYear*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: GetYear\n  nameWithType: JulianCalendar.GetYear\n- uid: System.Globalization.JulianCalendar.IsLeapDay*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: IsLeapDay\n  nameWithType: JulianCalendar.IsLeapDay\n- uid: System.Globalization.JulianCalendar.IsLeapMonth*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: IsLeapMonth\n  nameWithType: JulianCalendar.IsLeapMonth\n- uid: System.Globalization.JulianCalendar.IsLeapYear*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: IsLeapYear\n  nameWithType: JulianCalendar.IsLeapYear\n- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: JulianCalendar.MaxSupportedDateTime\n- uid: System.Globalization.JulianCalendar.MinSupportedDateTime*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: JulianCalendar.MinSupportedDateTime\n- uid: System.Globalization.JulianCalendar.ToDateTime*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: ToDateTime\n  nameWithType: JulianCalendar.ToDateTime\n- uid: System.Globalization.JulianCalendar.ToFourDigitYear*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: ToFourDigitYear\n  nameWithType: JulianCalendar.ToFourDigitYear\n- uid: System.Globalization.JulianCalendar.TwoDigitYearMax*\n  parent: System.Globalization.JulianCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: JulianCalendar.TwoDigitYearMax\n"}