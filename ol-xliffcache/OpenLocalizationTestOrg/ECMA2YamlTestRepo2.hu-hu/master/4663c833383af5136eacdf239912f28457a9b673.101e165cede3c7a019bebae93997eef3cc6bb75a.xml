{"nodes":[{"pos":[3640,3717],"content":"Provides access to the functionality of an installed speech synthesis engine.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to the functionality of an installed speech synthesis engine.","pos":[0,77]}]},{"pos":[3730,6945],"content":"When you create a new SpeechSynthesizer object, it uses the default system voice. To configure the SpeechSynthesizer to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.       This class also provides control over the following aspects of speech synthesis:      -   To configure the output for the SpeechSynthesizer object, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.      -   To generate speech, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. The SpeechSynthesizer can produce speech from text, a <xref:System.Speech.Synthesis.Prompt> or <xref:System.Speech.Synthesis.PromptBuilder> object, or from [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763).      -   To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.      -   To add or remove lexicons, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> methods. The SpeechSynthesizer can use one or more lexicons to guide its pronunciation of words.      -   To modify the delivery of speech output, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> properties.       The SpeechSynthesizer raises events when it encounters certain features in prompts: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>). It also raises events that report on the start (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) and end (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) of speak operations and on the change of the speaking voice (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).      > [!NOTE] >  Always call <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> before you release your last reference to the SpeechSynthesizer. Otherwise, the resources it is using will not be freed until the garbage collector calls the SpeechSynthesizer object's <xref:System.Object.Finalize%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you create a new SpeechSynthesizer object, it uses the default system voice.","pos":[0,81]},{"content":"To configure the SpeechSynthesizer to use one of the installed speech synthesis (text-to-speech) voices, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; method.","pos":[82,340],"source":" To configure the SpeechSynthesizer to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method."},{"content":"To get information about which voices are installed, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and the &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class.","pos":[341,535],"source":" To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class."},{"content":"This class also provides control over the following aspects of speech synthesis:      -   To configure the output for the SpeechSynthesizer object, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A&gt;, and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A&gt; methods.","pos":[542,1010],"source":"       This class also provides control over the following aspects of speech synthesis:      -   To configure the output for the SpeechSynthesizer object, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods."},{"content":"-   To generate speech, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; method.","pos":[1016,1311],"source":"      -   To generate speech, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method."},{"content":"The SpeechSynthesizer can produce speech from text, a &lt;xref:System.Speech.Synthesis.Prompt&gt; or &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object, or from <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language (SSML) Version 1.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201763)</ept>.","pos":[1312,1569],"source":" The SpeechSynthesizer can produce speech from text, a <xref:System.Speech.Synthesis.Prompt> or <xref:System.Speech.Synthesis.PromptBuilder> object, or from [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)."},{"content":"-   To pause and resume speech synthesis, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A&gt; and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A&gt; methods.","pos":[1575,1754],"source":"      -   To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods."},{"content":"-   To add or remove lexicons, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A&gt; and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A&gt; methods.","pos":[1760,1940],"source":"      -   To add or remove lexicons, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> methods."},{"content":"The SpeechSynthesizer can use one or more lexicons to guide its pronunciation of words.","pos":[1941,2028]},{"content":"-   To modify the delivery of speech output, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A&gt; and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A&gt; properties.","pos":[2034,2218],"source":"      -   To modify the delivery of speech output, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> properties."},{"content":"The SpeechSynthesizer raises events when it encounters certain features in prompts: (&lt;xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached&gt;, and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt;).","pos":[2225,2573],"source":"       The SpeechSynthesizer raises events when it encounters certain features in prompts: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>)."},{"content":"It also raises events that report on the start (&lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted&gt;) and end (&lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted&gt;) of speak operations and on the change of the speaking voice (&lt;xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange&gt;).","pos":[2574,2882],"source":" It also raises events that report on the start (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) and end (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) of speak operations and on the change of the speaking voice (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A&gt; before you release your last reference to the SpeechSynthesizer.","pos":[2888,3037],"source":"      > [!NOTE] >  Always call <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> before you release your last reference to the SpeechSynthesizer."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the SpeechSynthesizer object's &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[3038,3198],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the SpeechSynthesizer object's <xref:System.Object.Finalize%2A> method."}]},{"pos":[8346,8449],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> class."},{"pos":[8461,9064],"content":"When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.","pos":[0,603],"nodes":[{"content":"When you initialize a new &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; instance, it uses the default system voice.","pos":[0,118],"source":"When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, it uses the default system voice."},{"content":"To configure the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; to use one of the installed speech synthesis (text-to-speech) voices, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; method.","pos":[119,408],"source":" To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method."},{"content":"To get information about which voices are installed, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and the &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class.","pos":[409,603],"source":" To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class."}]}]},{"pos":[9698,9790],"content":"Adds a lexicon to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Adds a lexicon to the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[9803,11415],"content":"A pronunciation lexicon is a collection of words or phrases together with their pronunciations, which consist of letters and characters from a supported phonetic alphabet. You can use a lexicon to specify custom pronunciations for specialized vocabulary in your application.       Pronunciations specified in an external lexicon file take precedence over the pronunciations of the speech synthesizer's internal lexicon or dictionary. However, pronunciations specified inline in prompts created with any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods take precedence over pronunciations specified in any lexicon. Inline pronunciations apply only to a single occurrence of a word. See [Lexicons and Phonetic Alphabets](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) for more information.       You can add multiple lexicons to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object.Two values are currently supported for the `mediaType` parameter:      -   The value `application/pls+xml` indicates that the lexicon conforms to the [Pronunciation Lexicon Specification (PLS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201766). This is the preferred format to use.      -   The value `application/vdn.ms-sapi-lex` indicates that the lexicon format is Uncompressed Lexicon, which is a Microsoft-proprietary format. This is a legacy format and we recommend that you use the PLS format described above.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A pronunciation lexicon is a collection of words or phrases together with their pronunciations, which consist of letters and characters from a supported phonetic alphabet.","pos":[0,171]},{"content":"You can use a lexicon to specify custom pronunciations for specialized vocabulary in your application.","pos":[172,274]},{"content":"Pronunciations specified in an external lexicon file take precedence over the pronunciations of the speech synthesizer's internal lexicon or dictionary.","pos":[281,433]},{"content":"However, pronunciations specified inline in prompts created with any of the &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A&gt;, &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A&gt;, or &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A&gt; methods take precedence over pronunciations specified in any lexicon.","pos":[434,784],"source":" However, pronunciations specified inline in prompts created with any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods take precedence over pronunciations specified in any lexicon."},{"content":"Inline pronunciations apply only to a single occurrence of a word.","pos":[785,851]},{"content":"See <bpt id=\"p1\">[</bpt>Lexicons and Phonetic Alphabets<ept id=\"p1\">](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51)</ept> for more information.","pos":[852,981],"source":" See [Lexicons and Phonetic Alphabets](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) for more information."},{"content":"You can add multiple lexicons to a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object.Two values are currently supported for the <ph id=\"ph1\">`mediaType`</ph> parameter:      -   The value <ph id=\"ph2\">`application/pls+xml`</ph> indicates that the lexicon conforms to the <bpt id=\"p1\">[</bpt>Pronunciation Lexicon Specification (PLS) Version 1.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201766)</ept>.","pos":[988,1332],"source":"       You can add multiple lexicons to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object.Two values are currently supported for the `mediaType` parameter:      -   The value `application/pls+xml` indicates that the lexicon conforms to the [Pronunciation Lexicon Specification (PLS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201766)."},{"content":"This is the preferred format to use.","pos":[1333,1369]},{"content":"-   The value <ph id=\"ph1\">`application/vdn.ms-sapi-lex`</ph> indicates that the lexicon format is Uncompressed Lexicon, which is a Microsoft-proprietary format.","pos":[1375,1518],"source":"      -   The value `application/vdn.ms-sapi-lex` indicates that the lexicon format is Uncompressed Lexicon, which is a Microsoft-proprietary format."},{"content":"This is a legacy format and we recommend that you use the PLS format described above.","pos":[1519,1604]}]},{"pos":[13434,13474],"content":"The location of the lexicon information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location of the lexicon information.","pos":[0,40]}]},{"pos":[13540,13612],"content":"The media type of the lexicon. Media type values are not case sensitive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The media type of the lexicon. Media type values are not case sensitive.","pos":[0,72],"nodes":[{"content":"The media type of the lexicon.","pos":[0,30]},{"content":"Media type values are not case sensitive.","pos":[31,72]}]}]},{"pos":[14116,14229],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> encounters a bookmark in a prompt.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> encounters a bookmark in a prompt."},{"pos":[14242,14831],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods. For information about data associated with the event, see <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.       You can add bookmarks using the <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods. For information about data associated with the event, see <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.       You can add bookmarks using the <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> method.","pos":[0,587],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; raises this event while processing any of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; methods.","pos":[0,363],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods."},{"content":"For information about data associated with the event, see &lt;xref:System.Speech.Synthesis.BookmarkReachedEventArgs&gt;.","pos":[364,478],"source":" For information about data associated with the event, see <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>."},{"content":"You can add bookmarks using the &lt;xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A&gt; method.","pos":[485,587],"source":"       You can add bookmarks using the <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> method."}]}]},{"pos":[17260,17272],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17677,17807],"content":"Disposes the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and releases resources used during the session.","needQuote":true,"needEscape":true,"source":"Disposes the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object and releases resources used during the session."},{"pos":[18346,18489],"content":"Acts as a safeguard to clean up resources in the event that the <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*> method is not called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Acts as a safeguard to clean up resources in the event that the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*&gt; method is not called.","pos":[0,143],"source":"Acts as a safeguard to clean up resources in the event that the <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*> method is not called."}]},{"pos":[19108,19208],"content":"Gets the prompt that the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is speaking.","needQuote":true,"needEscape":true,"source":"Gets the prompt that the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> is speaking."},{"pos":[19440,19497],"content":"Returns the prompt object that is currently being spoken.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the prompt object that is currently being spoken.","pos":[0,57]}]},{"pos":[20037,20107],"content":"Returns all of the installed speech synthesis (text-to-speech) voices.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns all of the installed speech synthesis (text-to-speech) voices.","pos":[0,70]}]},{"pos":[20119,20217],"content":"A voice is an engine for speech synthesis (text-to-speech or TTS) that is installed on the system.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A voice is an engine for speech synthesis (text-to-speech or TTS) that is installed on the system.","pos":[0,98]}]},{"pos":[22936,23015],"content":"Returns a read-only collection of the voices currently installed on the system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a read-only collection of the voices currently installed on the system.","pos":[0,79]}]},{"pos":[23650,23752],"content":"Returns all of the installed speech synthesis  (text-to-speech) voices that support a specific locale.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns all of the installed speech synthesis  (text-to-speech) voices that support a specific locale.","pos":[0,102]}]},{"pos":[23765,24421],"content":"If none of the installed voices support the specified locale, this method returns an empty collection.       Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform text-to-speech using the language specified in the Culture property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If none of the installed voices support the specified locale, this method returns an empty collection.       Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform text-to-speech using the language specified in the Culture property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[0,644],"nodes":[{"content":"If none of the installed voices support the specified locale, this method returns an empty collection.","pos":[0,102]},{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes.","pos":[109,193]},{"content":"To perform text-to-speech using the language specified in the Culture property, a speech synthesis engine that supports that language-country code must be installed.","pos":[194,359]},{"content":"The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US.","pos":[360,490]},{"content":"English (United States)      -   zh-CN.","pos":[491,530]},{"content":"Chinese (China)      -   zh-TW.","pos":[531,562]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[563,644]}]}]},{"pos":[26425,26464],"content":"The locale that the voice must support.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale that the voice must support.","pos":[0,39]}]},{"pos":[26598,26711],"content":"Returns a read-only collection of the voices currently installed on the system that support the specified locale.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a read-only collection of the voices currently installed on the system that support the specified locale.","pos":[0,113]}]},{"pos":[27180,27261],"content":"Pauses the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Pauses the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[27819,27852],"content":"Raised when a phoneme is reached.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raised when a phoneme is reached.","pos":[0,33]}]},{"pos":[27865,28682],"content":"A phoneme is a basic component of written language, typically a letter of an alphabet (or the combination of two letters) that represents one or more distinct sounds. For example, the letter “c” is a phoneme that may sound like “s” in “cinder”, or like “k” in “catch”. A written word is an assemblage of phonemes. Changing a phoneme in a word will alter its spelling.       A <xref:System.Speech.Synthesis.SpeechSynthesizer> instance generates a PhonemeReached event for each portion of a word that constitutes a phoneme. For example, for the word “theme” would generate three PhonemeReached events; one for the “th” sound, one for the “e” sound, and one for the “m” sound (me).       For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A phoneme is a basic component of written language, typically a letter of an alphabet (or the combination of two letters) that represents one or more distinct sounds. For example, the letter “c” is a phoneme that may sound like “s” in “cinder”, or like “k” in “catch”. A written word is an assemblage of phonemes. Changing a phoneme in a word will alter its spelling.       A <xref:System.Speech.Synthesis.SpeechSynthesizer> instance generates a PhonemeReached event for each portion of a word that constitutes a phoneme. For example, for the word “theme” would generate three PhonemeReached events; one for the “th” sound, one for the “e” sound, and one for the “m” sound (me).       For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.","pos":[0,813],"nodes":[{"content":"A phoneme is a basic component of written language, typically a letter of an alphabet (or the combination of two letters) that represents one or more distinct sounds.","pos":[0,166]},{"content":"For example, the letter “c” is a phoneme that may sound like “s” in “cinder”, or like “k” in “catch”.","pos":[167,268]},{"content":"A written word is an assemblage of phonemes.","pos":[269,313]},{"content":"Changing a phoneme in a word will alter its spelling.","pos":[314,367]},{"content":"A &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; instance generates a PhonemeReached event for each portion of a word that constitutes a phoneme.","pos":[374,521],"source":"       A <xref:System.Speech.Synthesis.SpeechSynthesizer> instance generates a PhonemeReached event for each portion of a word that constitutes a phoneme."},{"content":"For example, for the word “theme” would generate three PhonemeReached events; one for the “th” sound, one for the “e” sound, and one for the “m” sound (me).","pos":[522,678]},{"content":"For an example and information about data associated with the event, see &lt;xref:System.Speech.Synthesis.PhonemeReachedEventArgs&gt;.","pos":[685,813],"source":"       For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>."}]}]},{"pos":[28910,28922],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29308,29416],"content":"Gets or sets the speaking rate of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets the speaking rate of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[30401,30525],"content":"Returns the speaking rate of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, from -10 through 10.","needQuote":true,"needEscape":true,"source":"Returns the speaking rate of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object, from -10 through 10."},{"pos":[31053,31150],"content":"Removes a lexicon from the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Removes a lexicon from the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[31162,31244],"content":"See <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> for an example.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"See &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A&gt; for an example.","pos":[0,82],"source":"See <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> for an example."}]},{"pos":[31377,31414],"content":"The location of the lexicon document.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location of the lexicon document.","pos":[0,37]}]},{"pos":[31883,31990],"content":"Resumes the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object after it has been paused.","needQuote":true,"needEscape":true,"source":"Resumes the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object after it has been paused."},{"pos":[32590,32623],"content":"Selects a specific voice by name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a specific voice by name.","pos":[0,33]}]},{"pos":[32636,34155],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. To select a voice, pass the entire contents of the <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> property as the argument for the SelectVoice method. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that contains `name` in the voice's <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> performs a case-sensitive, substring comparison to determine if the voice matches the `name`.       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.       To select a voice by gender, age, or locale, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names of installed text-to-speech (TTS) voices that you can select.","pos":[0,218],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select."},{"content":"To select a voice, pass the entire contents of the &lt;xref:System.Speech.Synthesis.VoiceInfo.Name%2A&gt; property as the argument for the SelectVoice method.","pos":[219,371],"source":" To select a voice, pass the entire contents of the <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> property as the argument for the SelectVoice method."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object selects the first installed voice that contains <ph id=\"ph1\">`name`</ph> in the voice's &lt;xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName&gt; property.","pos":[372,585],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that contains `name` in the voice's <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName> property."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; performs a case-sensitive, substring comparison to determine if the voice matches the <ph id=\"ph1\">`name`</ph>.","pos":[586,732],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> performs a case-sensitive, substring comparison to determine if the voice matches the `name`."},{"content":"When an application calls &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt;, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.","pos":[739,937],"source":"       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria."},{"content":"For any voice that fails verification, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; sets its &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property to <ph id=\"ph1\">`False`</ph>.","pos":[938,1134],"source":" For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`."},{"content":"An application cannot select a voice whose &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property is <ph id=\"ph1\">`False`</ph>.","pos":[1135,1255],"source":" An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`."},{"content":"Typically, applications will not set a voice’s &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property.","pos":[1256,1369],"source":" Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property."},{"content":"To select a voice by gender, age, or locale, use one of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; methods.","pos":[1376,1515],"source":"       To select a voice by gender, age, or locale, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods."}]},{"pos":[34295,34327],"content":"The name of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the voice to select.","pos":[0,32]}]},{"pos":[34961,35000],"content":"Selects a voice with a specific gender.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a voice with a specific gender.","pos":[0,39]}]},{"pos":[35013,36329],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> property matches the `gender` parameter.       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names of installed text-to-speech (TTS) voices that you can select.","pos":[0,218],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object selects the first installed voice whose &lt;xref:System.Speech.Synthesis.VoiceInfo.Gender%2A&gt; property matches the <ph id=\"ph1\">`gender`</ph> parameter.","pos":[219,410],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> property matches the `gender` parameter."},{"content":"When an application calls &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt;, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.","pos":[417,615],"source":"       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria."},{"content":"For any voice that fails verification, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; sets its &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property to <ph id=\"ph1\">`False`</ph>.","pos":[616,812],"source":" For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`."},{"content":"An application cannot select a voice whose &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property is <ph id=\"ph1\">`False`</ph>.","pos":[813,933],"source":" An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`."},{"content":"Typically, applications will not set a voice’s &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property.","pos":[934,1047],"source":" Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property."},{"content":"To select a voice based on other characteristics, see the other &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; methods.","pos":[1054,1197],"source":"       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods."},{"content":"To select a voice by name, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; method.","pos":[1204,1310],"source":"       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method."}]},{"pos":[36531,36565],"content":"The gender of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the voice to select.","pos":[0,34]}]},{"pos":[37299,37346],"content":"Selects a voice with a specific gender and age.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a voice with a specific gender and age.","pos":[0,47]}]},{"pos":[37359,38738],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters.       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names of installed text-to-speech (TTS) voices that you can select.","pos":[0,218],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object selects the first installed voice whose &lt;xref:System.Speech.Synthesis.VoiceInfo.Gender%2A&gt; and &lt;xref:System.Speech.Synthesis.VoiceInfo.Age%2A&gt; properties match the <ph id=\"ph1\">`gender`</ph> and <ph id=\"ph2\">`age`</ph> parameters.","pos":[219,473],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters."},{"content":"When an application calls &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt;, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.","pos":[480,678],"source":"       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria."},{"content":"For any voice that fails verification, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; sets its &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property to <ph id=\"ph1\">`False`</ph>.","pos":[679,875],"source":" For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`."},{"content":"An application cannot select a voice whose &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property is <ph id=\"ph1\">`False`</ph>.","pos":[876,996],"source":" An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`."},{"content":"Typically, applications will not set a voice’s &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property.","pos":[997,1110],"source":" Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property."},{"content":"To select a voice based on other characteristics, see the other &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; methods.","pos":[1117,1260],"source":"       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods."},{"content":"To select a voice by name, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; method.","pos":[1267,1373],"source":"       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method."}]},{"pos":[38978,39012],"content":"The gender of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the voice to select.","pos":[0,34]}]},{"pos":[39091,39122],"content":"The age of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The age of the voice to select.","pos":[0,31]}]},{"pos":[39900,40002],"content":"Selects a voice with a specific gender and age, based on the position in which the voices are ordered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a voice with a specific gender and age, based on the position in which the voices are ordered.","pos":[0,102]}]},{"pos":[40015,41543],"content":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds installed voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters. The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class to obtain the names of installed text-to-speech (TTS) voices that you can select.","pos":[0,218],"source":"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object finds installed voices whose &lt;xref:System.Speech.Synthesis.VoiceInfo.Gender%2A&gt; and &lt;xref:System.Speech.Synthesis.VoiceInfo.Age%2A&gt; properties match the <ph id=\"ph1\">`gender`</ph> and <ph id=\"ph2\">`age`</ph> parameters.","pos":[219,462],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds installed voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; counts the matches it finds, and returns the voice when the count equals the <ph id=\"ph1\">`voiceAlternate`</ph> parameter.","pos":[463,620],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter."},{"content":"When an application calls &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt;, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.","pos":[627,825],"source":"       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria."},{"content":"For any voice that fails verification, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; sets its &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property to <ph id=\"ph1\">`False`</ph>.","pos":[826,1022],"source":" For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`."},{"content":"An application cannot select a voice whose &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property is <ph id=\"ph1\">`False`</ph>.","pos":[1023,1143],"source":" An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`."},{"content":"Typically, applications will not set a voice’s &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property.","pos":[1144,1257],"source":" Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property."},{"content":"To select a voice based on other characteristics, see the other &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; overloads.","pos":[1264,1409],"source":"       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads."},{"content":"To select a voice by name, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; method.","pos":[1416,1522],"source":"       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method."}]},{"pos":[41803,41837],"content":"The gender of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the voice to select.","pos":[0,34]}]},{"pos":[41916,41947],"content":"The age of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The age of the voice to select.","pos":[0,31]}]},{"pos":[42017,42053],"content":"The position of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the voice to select.","pos":[0,36]}]},{"pos":[42933,43044],"content":"Selects a voice with a specific gender, age, and locale, based on the position in which the voices are ordered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a voice with a specific gender, age, and locale, based on the position in which the voices are ordered.","pos":[0,111]}]},{"pos":[43057,44979],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, and <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> properties match the `gender`, `age`, and `culture` parameters. The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.       Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform text-to-speech using the language specified in the `culture` parameter, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US. English (United States)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object finds voices whose &lt;xref:System.Speech.Synthesis.VoiceInfo.Gender%2A&gt;, &lt;xref:System.Speech.Synthesis.VoiceInfo.Age%2A&gt;, and &lt;xref:System.Speech.Synthesis.VoiceInfo.Culture%2A&gt; properties match the <ph id=\"ph1\">`gender`</ph>, <ph id=\"ph2\">`age`</ph>, and <ph id=\"ph3\">`culture`</ph> parameters.","pos":[0,299],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, and <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> properties match the `gender`, `age`, and `culture` parameters."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; counts the matches it finds, and returns the voice when the count equals the <ph id=\"ph1\">`voiceAlternate`</ph> parameter.","pos":[300,457],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter."},{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes.","pos":[464,548]},{"content":"To perform text-to-speech using the language specified in the <ph id=\"ph1\">`culture`</ph> parameter, a speech synthesis engine that supports that language-country code must be installed.","pos":[549,717],"source":" To perform text-to-speech using the language specified in the `culture` parameter, a speech synthesis engine that supports that language-country code must be installed."},{"content":"The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:      -   en-US.","pos":[718,848]},{"content":"English (United States)      -   zh-CN.","pos":[849,888]},{"content":"Chinese (China)      -   zh-TW.","pos":[889,920]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\" are also permitted.","pos":[921,1002]},{"content":"When an application calls &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt;, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.","pos":[1009,1207],"source":"       When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria."},{"content":"For any voice that fails verification, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; sets its &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property to <ph id=\"ph1\">`False`</ph>.","pos":[1208,1404],"source":" For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`."},{"content":"An application cannot select a voice whose &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property is <ph id=\"ph1\">`False`</ph>.","pos":[1405,1525],"source":" An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`."},{"content":"Typically, applications will not set a voice’s &lt;xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A&gt; property.","pos":[1526,1639],"source":" Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property."},{"content":"To select a voice based on other characteristics, see the other &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; overloads.","pos":[1646,1791],"source":"       To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads."},{"content":"To select a voice by name, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; method.","pos":[1798,1904],"source":"       To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method."}]},{"pos":[45281,45315],"content":"The gender of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The gender of the voice to select.","pos":[0,34]}]},{"pos":[45394,45425],"content":"The age of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The age of the voice to select.","pos":[0,31]}]},{"pos":[45495,45531],"content":"The position of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the voice to select.","pos":[0,36]}]},{"pos":[45614,45648],"content":"The locale of the voice to select.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale of the voice to select.","pos":[0,34]}]},{"pos":[46418,46539],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to append output to an audio stream.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to an audio stream."},{"pos":[46552,47084],"content":"Call <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s  reference to the stream.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s  reference to the stream.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.","pos":[0,530],"nodes":[{"content":"Call &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A&gt; to release the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt;’s  reference to the stream.","pos":[0,164],"source":"Call <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s  reference to the stream."},{"content":"For other output configuration options, see the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A&gt;, and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A&gt; methods.","pos":[171,530],"source":"       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods."}]}]},{"pos":[47332,47379],"content":"The stream to which to append synthesis output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which to append synthesis output.","pos":[0,47]}]},{"pos":[47480,47523],"content":"The format to use for the synthesis output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The format to use for the synthesis output.","pos":[0,43]}]},{"pos":[48116,48244],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to send output to the default audio device.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to send output to the default audio device."},{"pos":[48257,48740],"content":"You can use the  **Sound** window in the Windows **Control Panel** to configure the default audio device for the computer.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use the  <bpt id=\"p1\">**</bpt>Sound<ept id=\"p1\">**</ept> window in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept> to configure the default audio device for the computer.","pos":[0,122],"source":"You can use the  **Sound** window in the Windows **Control Panel** to configure the default audio device for the computer."},{"content":"For other output configuration options, see the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A&gt;, and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A&gt; methods.","pos":[129,481],"source":"       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods."}]},{"pos":[50191,50350],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to not send output from synthesis operations to a device, file, or stream.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to not send output from synthesis operations to a device, file, or stream."},{"pos":[50363,50945],"content":"Use this method to release the <xref:System.Speech.Synthesis.SpeechSynthesizer> ‘s reference to a file or stream. See <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> for an example.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method to release the <xref:System.Speech.Synthesis.SpeechSynthesizer> ‘s reference to a file or stream. See <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> for an example.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.","pos":[0,580],"nodes":[{"content":"Use this method to release the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; ‘s reference to a file or stream.","pos":[0,113],"source":"Use this method to release the <xref:System.Speech.Synthesis.SpeechSynthesizer> ‘s reference to a file or stream."},{"content":"See &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A&gt; for an example.","pos":[114,207],"source":" See <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> for an example."},{"content":"For other output configuration options, see the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A&gt;, and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A&gt; methods.","pos":[214,580],"source":"       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods."}]}]},{"pos":[51604,51752],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to append output to a file that contains Waveform format audio.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to a file that contains Waveform format audio."},{"pos":[51764,51905],"content":"To configure the output and specify the audio format, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To configure the output and specify the audio format, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A&gt; method.","pos":[0,141],"source":"To configure the output and specify the audio format, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method."}]},{"pos":[53898,53919],"content":"The path to the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path to the file.","pos":[0,21]}]},{"pos":[54669,54825],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to append output to a Waveform audio format file in a specified format.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to a Waveform audio format file in a specified format."},{"pos":[56376,56397],"content":"The path to the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path to the file.","pos":[0,21]}]},{"pos":[56498,56527],"content":"The audio format information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The audio format information.","pos":[0,29]}]},{"pos":[57131,57281],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to append output to a stream that contains Waveform format audio.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to a stream that contains Waveform format audio."},{"pos":[57294,57884],"content":"To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s reference to the stream, reconfigure the synthesizer's output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s reference to the stream, reconfigure the synthesizer's output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.","pos":[0,588],"nodes":[{"content":"To release the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt;’s reference to the stream, reconfigure the synthesizer's output, for example, by calling &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A&gt;.","pos":[0,221],"source":"To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s reference to the stream, reconfigure the synthesizer's output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>."},{"content":"For other output configuration options, see the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A&gt;, and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A&gt; methods.","pos":[228,588],"source":"       For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods."}]}]},{"pos":[59465,59512],"content":"The stream to which to append synthesis output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to which to append synthesis output.","pos":[0,47]}]},{"pos":[60066,60164],"content":"Synchronously speaks the contents of a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.Prompt\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Synchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.Prompt\"></xref> object."},{"pos":[60176,60331],"content":"To asynchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To asynchronously speak the contents of a &lt;xref:System.Speech.Synthesis.Prompt&gt; object, use &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;.","pos":[0,155],"source":"To asynchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>."}]},{"pos":[61471,61492],"content":"The content to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content to speak.","pos":[0,21]}]},{"pos":[62065,62170],"content":"Synchronously speaks the contents of a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Synchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[62182,62344],"content":"To asynchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To asynchronously speak the contents of a &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object, use &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;.","pos":[0,162],"source":"To asynchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>."}]},{"pos":[63599,63620],"content":"The content to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content to speak.","pos":[0,21]}]},{"pos":[64124,64170],"content":"Synchronously speaks the contents of a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronously speaks the contents of a string.","pos":[0,46]}]},{"pos":[64182,64447],"content":"To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method. To asynchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method. To asynchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.","pos":[0,265],"nodes":[{"content":"To synchronously speak a string that contains SSML markup, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt; method.","pos":[0,136],"source":"To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method."},{"content":"To asynchronously speak the contents of a string, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt; method.","pos":[137,265],"source":" To asynchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method."}]}]},{"pos":[65416,65434],"content":"The text to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text to speak.","pos":[0,18]}]},{"pos":[65997,66096],"content":"Asynchronously speaks the contents of a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.Prompt\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Asynchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.Prompt\"></xref> object."},{"pos":[66109,66484],"content":"You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.       To synchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.       To synchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.","pos":[0,373],"nodes":[{"content":"You can cancel the asynchronous speaking of a prompt with the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A&gt; or the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A&gt; method.","pos":[0,217],"source":"You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method."},{"content":"To synchronously speak the contents of a &lt;xref:System.Speech.Synthesis.Prompt&gt; object, use &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;.","pos":[224,373],"source":"       To synchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>."}]}]},{"pos":[67604,67625],"content":"The content to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content to speak.","pos":[0,21]}]},{"pos":[68228,68334],"content":"Asynchronously speaks the contents of a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.PromptBuilder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Asynchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object."},{"pos":[68346,68502],"content":"To synchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To synchronously speak the contents of a &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object, use &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;.","pos":[0,156],"source":"To synchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>."}]},{"pos":[69760,69781],"content":"The content to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content to speak.","pos":[0,21]}]},{"pos":[69856,69910],"content":"Returns the object that contains the content to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the object that contains the content to speak.","pos":[0,54]}]},{"pos":[70444,70491],"content":"Asynchronously speaks the contents of a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously speaks the contents of a string.","pos":[0,47]}]},{"pos":[70503,70986],"content":"To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. To synchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method. You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. To synchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method. You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.","pos":[0,483],"nodes":[{"content":"To asynchronously speak a string that contains SSML markup, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; method.","pos":[0,142],"source":"To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method."},{"content":"To synchronously speak the contents of a string, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt; method.","pos":[143,265],"source":" To synchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method."},{"content":"You can cancel the asynchronous speaking of a prompt with the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A&gt; or the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A&gt; method.","pos":[266,483],"source":" You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method."}]}]},{"pos":[71965,71983],"content":"The text to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text to speak.","pos":[0,18]}]},{"pos":[72058,72112],"content":"Returns the object that contains the content to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the object that contains the content to speak.","pos":[0,54]}]},{"pos":[72710,72775],"content":"Cancels the asynchronous synthesis operation for a queued prompt.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the asynchronous synthesis operation for a queued prompt.","pos":[0,65]}]},{"pos":[72788,74078],"content":"You can also use this method to cancel an asynchronous speak operation for the following:      -   The contents of a <xref:System.String> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method.      -   The contents of a <xref:System.Speech.Synthesis.PromptBuilder> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method.      -   The contents of a <xref:System.String> containing SSML specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.       When you call <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech creates a <xref:System.Speech.Synthesis.Prompt> object and populates it with the contents of the method's parameter, and returns the <xref:System.Speech.Synthesis.Prompt> object. If you retain a copy of the returned <xref:System.Speech.Synthesis.Prompt>, you can pass it into SpeakAsyncCancel to cancel speaking content specified in a <xref:System.String> or a <xref:System.Speech.Synthesis.PromptBuilder> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can also use this method to cancel an asynchronous speak operation for the following:      -   The contents of a <xref:System.String> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method.      -   The contents of a <xref:System.Speech.Synthesis.PromptBuilder> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method.      -   The contents of a <xref:System.String> containing SSML specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.       When you call <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech creates a <xref:System.Speech.Synthesis.Prompt> object and populates it with the contents of the method's parameter, and returns the <xref:System.Speech.Synthesis.Prompt> object. If you retain a copy of the returned <xref:System.Speech.Synthesis.Prompt>, you can pass it into SpeakAsyncCancel to cancel speaking content specified in a <xref:System.String> or a <xref:System.Speech.Synthesis.PromptBuilder> object.","pos":[0,1282],"nodes":[{"content":"You can also use this method to cancel an asynchronous speak operation for the following:      -   The contents of a &lt;xref:System.String&gt; specified by a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName&gt; method.","pos":[0,248],"source":"You can also use this method to cancel an asynchronous speak operation for the following:      -   The contents of a <xref:System.String> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method."},{"content":"-   The contents of a &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; specified by a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName&gt; method.","pos":[254,431],"source":"      -   The contents of a <xref:System.Speech.Synthesis.PromptBuilder> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method."},{"content":"-   The contents of a &lt;xref:System.String&gt; containing SSML specified by a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; method.","pos":[437,585],"source":"      -   The contents of a <xref:System.String> containing SSML specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method."},{"content":"When you call &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt;, System.Speech creates a &lt;xref:System.Speech.Synthesis.Prompt&gt; object and populates it with the contents of the method's parameter, and returns the &lt;xref:System.Speech.Synthesis.Prompt&gt; object.","pos":[592,1047],"source":"       When you call <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech creates a <xref:System.Speech.Synthesis.Prompt> object and populates it with the contents of the method's parameter, and returns the <xref:System.Speech.Synthesis.Prompt> object."},{"content":"If you retain a copy of the returned &lt;xref:System.Speech.Synthesis.Prompt&gt;, you can pass it into SpeakAsyncCancel to cancel speaking content specified in a &lt;xref:System.String&gt; or a &lt;xref:System.Speech.Synthesis.PromptBuilder&gt; object.","pos":[1048,1282],"source":" If you retain a copy of the returned <xref:System.Speech.Synthesis.Prompt>, you can pass it into SpeakAsyncCancel to cancel speaking content specified in a <xref:System.String> or a <xref:System.Speech.Synthesis.PromptBuilder> object."}]}]},{"pos":[74268,74318],"content":"The content for which to cancel a speak operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content for which to cancel a speak operation.","pos":[0,50]}]},{"pos":[74855,74917],"content":"Cancels all queued, asynchronous, speech synthesis operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels all queued, asynchronous, speech synthesis operations.","pos":[0,62]}]},{"pos":[78279,78393],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> completes the speaking of a prompt.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> completes the speaking of a prompt."},{"pos":[78406,78912],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises the SpeakCompleted event at the completion of any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> or  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.       The <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> class has no properties, and does not return data from the SpeakCompleted event. It is provided to enable application authors to write event handlers for the SpeakCompleted event.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises the SpeakCompleted event at the completion of any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> or  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.       The <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> class has no properties, and does not return data from the SpeakCompleted event. It is provided to enable application authors to write event handlers for the SpeakCompleted event.","pos":[0,504],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; raises the SpeakCompleted event at the completion of any of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt; or  &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; methods.","pos":[0,259],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises the SpeakCompleted event at the completion of any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> or  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeakCompletedEventArgs&gt; class has no properties, and does not return data from the SpeakCompleted event.","pos":[266,405],"source":"       The <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> class has no properties, and does not return data from the SpeakCompleted event."},{"content":"It is provided to enable application authors to write event handlers for the SpeakCompleted event.","pos":[406,504]}]}]},{"pos":[79140,79152],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[79580,79700],"content":"Raised after the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> speaks each individual word of a prompt.","needQuote":true,"needEscape":true,"source":"Raised after the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> speaks each individual word of a prompt."},{"pos":[79712,80242],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods. For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods. For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.","pos":[0,530],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; raises this event for each new word that it speaks in a prompt using any of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; methods.","pos":[0,397],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods."},{"content":"For an example and more information about data associated with the event, see &lt;xref:System.Speech.Synthesis.SpeakProgressEventArgs&gt;.","pos":[398,530],"source":" For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.SpeakProgressEventArgs>."}]}]},{"pos":[80466,80478],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[80941,81011],"content":"Synchronously speaks a <xref:System.String> that contains SSML markup.","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronously speaks a &lt;xref:System.String&gt; that contains SSML markup.","pos":[0,70],"source":"Synchronously speaks a <xref:System.String> that contains SSML markup."}]},{"pos":[81024,83061],"content":"The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). For more information, see [Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94).       To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> to initiate the synchronous speaking of a string that does not contain SSML markup.       During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Raised when the speaking state of the synthesizer changes.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Raised when the synthesizer begins generating speech.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Raised each time the synthesizer completes speaking a word.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Raised when the synthesizer encounters a bookmark in a prompt.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Raised when the speaking voice for the synthesizer changes.       The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing the SpeakSsml method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The contents of the <ph id=\"ph1\">`textToSpeak`</ph> parameter must include a <ph id=\"ph2\">`speak`</ph> element and must conform to the <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language (SSML) Version 1.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201763)</ept>.","pos":[0,200],"source":"The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language Reference<ept id=\"p1\">](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94)</ept>.","pos":[201,342],"source":" For more information, see [Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94)."},{"content":"To asynchronously speak a string that contains SSML markup, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; method.","pos":[349,491],"source":"       To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method."},{"content":"You can use &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt; to initiate the synchronous speaking of a string that does not contain SSML markup.","pos":[492,645],"source":" You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> to initiate the synchronous speaking of a string that does not contain SSML markup."},{"content":"During a call to this method, the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; can raise the following events:      -   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged&gt;.","pos":[652,838],"source":"       During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>."},{"content":"Raised when the speaking state of the synthesizer changes.","pos":[839,897]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted&gt;.","pos":[903,969],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>."},{"content":"Raised when the synthesizer begins generating speech.","pos":[970,1023]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached&gt;.","pos":[1029,1097],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>."},{"content":"Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.","pos":[1098,1231]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt;.","pos":[1237,1304],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>."},{"content":"Raised each time the synthesizer completes speaking a word.","pos":[1305,1364]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached&gt;.","pos":[1370,1437],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>."},{"content":"Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.","pos":[1438,1561]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached&gt;.","pos":[1567,1636],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>."},{"content":"Raised when the synthesizer encounters a bookmark in a prompt.","pos":[1637,1699]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange&gt;.","pos":[1705,1770],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>."},{"content":"Raised when the speaking voice for the synthesizer changes.","pos":[1771,1830]},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; does not raise the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted&gt; event while processing the SpeakSsml method.","pos":[1837,2017],"source":"       The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing the SpeakSsml method."}]},{"pos":[84252,84277],"content":"The SSML string to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SSML string to speak.","pos":[0,25]}]},{"pos":[84830,84901],"content":"Asynchronously speaks a <xref:System.String> that contains SSML markup.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously speaks a &lt;xref:System.String&gt; that contains SSML markup.","pos":[0,71],"source":"Asynchronously speaks a <xref:System.String> that contains SSML markup."}]},{"pos":[84914,87172],"content":"The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). For more information, see [Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94).       To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method. You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> to initiate the asynchronous speaking of a string that does not contain SSML markup.       During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Raised when the speaking state of the synthesizer changes.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Raised when the synthesizer begins generating speech.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Raised each time the synthesizer completes speaking a word.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Raised when the synthesizer encounters a bookmark in a prompt.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Raised when the speaking voice for the synthesizer changes.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Raised when the synthesizer finishes processing a SpeakSsmlAsync operation.       If your application dos not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The contents of the <ph id=\"ph1\">`textToSpeak`</ph> parameter must include a <ph id=\"ph2\">`speak`</ph> element and must conform to the <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language (SSML) Version 1.0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=201763)</ept>.","pos":[0,200],"source":"The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Speech Synthesis Markup Language Reference<ept id=\"p1\">](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94)</ept>.","pos":[201,342],"source":" For more information, see [Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94)."},{"content":"To synchronously speak a string that contains SSML markup, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt; method.","pos":[349,485],"source":"       To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method."},{"content":"You can use &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt; to initiate the asynchronous speaking of a string that does not contain SSML markup.","pos":[486,645],"source":" You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> to initiate the asynchronous speaking of a string that does not contain SSML markup."},{"content":"During a call to this method, the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; can raise the following events:      -   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged&gt;.","pos":[652,838],"source":"       During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>."},{"content":"Raised when the speaking state of the synthesizer changes.","pos":[839,897]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted&gt;.","pos":[903,969],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>."},{"content":"Raised when the synthesizer begins generating speech.","pos":[970,1023]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached&gt;.","pos":[1029,1097],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>."},{"content":"Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.","pos":[1098,1231]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress&gt;.","pos":[1237,1304],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>."},{"content":"Raised each time the synthesizer completes speaking a word.","pos":[1305,1364]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached&gt;.","pos":[1370,1437],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>."},{"content":"Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.","pos":[1438,1561]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached&gt;.","pos":[1567,1636],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>."},{"content":"Raised when the synthesizer encounters a bookmark in a prompt.","pos":[1637,1699]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange&gt;.","pos":[1705,1770],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>."},{"content":"Raised when the speaking voice for the synthesizer changes.","pos":[1771,1830]},{"content":"-   &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted&gt;.","pos":[1836,1904],"source":"      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>."},{"content":"Raised when the synthesizer finishes processing a SpeakSsmlAsync operation.","pos":[1905,1980]},{"content":"If your application dos not need to perform tasks while speaking, you can use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt; or the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt; method to generate speech synchronously.","pos":[1987,2236],"source":"       If your application dos not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously."}]},{"pos":[88303,88328],"content":"The SMML markup to speak.","needQuote":true,"needEscape":true,"nodes":[{"content":"The SMML markup to speak.","pos":[0,25]}]},{"pos":[88403,88474],"content":"Asynchronously speaks a <xref:System.String> that contains SSML markup.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously speaks a &lt;xref:System.String&gt; that contains SSML markup.","pos":[0,71],"source":"Asynchronously speaks a <xref:System.String> that contains SSML markup."}]},{"pos":[88967,89078],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> begins the speaking of a prompt.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> begins the speaking of a prompt."},{"pos":[89091,89719],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when it begins processing a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.       The <xref:System.Speech.Synthesis.SpeakStartedEventArgs> class has no properties, and does not return data from the SpeakStarted event. It is provided to enable application authors to write event handlers for the SpeakStarted event.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when it begins processing a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.       The <xref:System.Speech.Synthesis.SpeakStartedEventArgs> class has no properties, and does not return data from the SpeakStarted event. It is provided to enable application authors to write event handlers for the SpeakStarted event.","pos":[0,626],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; raises this event when it begins processing a prompt using any of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A&gt;, &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A&gt;, or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A&gt; methods.","pos":[0,387],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when it begins processing a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeakStartedEventArgs&gt; class has no properties, and does not return data from the SpeakStarted event.","pos":[394,529],"source":"       The <xref:System.Speech.Synthesis.SpeakStartedEventArgs> class has no properties, and does not return data from the SpeakStarted event."},{"content":"It is provided to enable application authors to write event handlers for the SpeakStarted event.","pos":[530,626]}]}]},{"pos":[89941,89953],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[90344,90453],"content":"Gets the current speaking state of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the current speaking state of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[90465,90705],"content":"To get the new state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> after it changes, use the <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> property of the <xref:System.Speech.Synthesis.StateChangedEventArgs> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To get the new state of the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; after it changes, use the &lt;xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A&gt; property of the &lt;xref:System.Speech.Synthesis.StateChangedEventArgs&gt; class.","pos":[0,240],"source":"To get the new state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> after it changes, use the <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> property of the <xref:System.Speech.Synthesis.StateChangedEventArgs> class."}]},{"pos":[92598,92710],"content":"Returns the current speaking state of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the current speaking state of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[93194,93294],"content":"Raised when the state of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> changes.","needQuote":true,"needEscape":true,"source":"Raised when the state of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> changes."},{"pos":[93307,93778],"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when its speaking <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> changes. For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.StateChangedEventArgs>.       To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when its speaking <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> changes. For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.StateChangedEventArgs>.       To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.","pos":[0,469],"nodes":[{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; raises this event when its speaking &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A&gt; changes.","pos":[0,155],"source":"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when its speaking <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> changes."},{"content":"For an example and more information about data associated with the event, see &lt;xref:System.Speech.Synthesis.StateChangedEventArgs&gt;.","pos":[156,287],"source":" For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.StateChangedEventArgs>."},{"content":"To pause and resume speech synthesis, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A&gt; and &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A&gt; methods.","pos":[294,469],"source":"       To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods."}]}]},{"pos":[94000,94012],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[94440,94472],"content":"Raised when a viseme is reached.","needQuote":true,"needEscape":true,"nodes":[{"content":"Raised when a viseme is reached.","pos":[0,32]}]},{"pos":[94485,95953],"content":"A viseme is the basic position of the mouth and face when pronouncing a phoneme. Visemes are visual representations of phonemes.       System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes.  VisemeReached events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached. Since some visemes represent more than one phoneme, a VisemeReached event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme. For example, for the spoken words “this zone”, a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event is raised for the “s” in “this” and the “z” in “zone”. However, a VisemeReached event is not raised for the “z” in “zone” because it corresponds to the same viseme as the “s” in “this”.       The following is a list of the 21 SAPI phonemes and phoneme groups that correspond to a viseme in US English.      |Viseme|Phoneme(s)|   |------------|------------------|   |0|silence|   |1|ae, ax, ah|   |2|aa|   |3|ao|   |4|ey, eh, uh|   |5|er|   |6|y, iy, ih, ix|   |7|w, uw|   |8|ow|   |9|aw|   |10|oy|   |11|ay|   |12|h|   |13|r|   |14|l|   |15|s, z|   |16|sh, ch, jh, zh|   |17|th, dh|   |18|f, v|   |19|d, t, n|   |20|k, g, ng|   |21|p, b, m|       For information about data associated with the `VisemeReached` event, see <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A viseme is the basic position of the mouth and face when pronouncing a phoneme.","pos":[0,80]},{"content":"Visemes are visual representations of phonemes.","pos":[81,128]},{"content":"System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes.","pos":[135,235]},{"content":"VisemeReached events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached.","pos":[237,367]},{"content":"Since some visemes represent more than one phoneme, a VisemeReached event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme.","pos":[368,542]},{"content":"For example, for the spoken words “this zone”, a &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached&gt; event is raised for the “s” in “this” and the “z” in “zone”.","pos":[543,716],"source":" For example, for the spoken words “this zone”, a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event is raised for the “s” in “this” and the “z” in “zone”."},{"content":"However, a VisemeReached event is not raised for the “z” in “zone” because it corresponds to the same viseme as the “s” in “this”.","pos":[717,847]},{"content":"The following is a list of the 21 SAPI phonemes and phoneme groups that correspond to a viseme in US English.","pos":[854,963]},{"content":"|Viseme|Phoneme(s)|   |------------|------------------|   |0|silence|   |1|ae, ax, ah|   |2|aa|   |3|ao|   |4|ey, eh, uh|   |5|er|   |6|y, iy, ih, ix|   |7|w, uw|   |8|ow|   |9|aw|   |10|oy|   |11|ay|   |12|h|   |13|r|   |14|l|   |15|s, z|   |16|sh, ch, jh, zh|   |17|th, dh|   |18|f, v|   |19|d, t, n|   |20|k, g, ng|   |21|p, b, m|       For information about data associated with the <ph id=\"ph1\">`VisemeReached`</ph> event, see &lt;xref:System.Speech.Synthesis.VisemeReachedEventArgs&gt;.","pos":[969,1437],"source":"      |Viseme|Phoneme(s)|   |------------|------------------|   |0|silence|   |1|ae, ax, ah|   |2|aa|   |3|ao|   |4|ey, eh, uh|   |5|er|   |6|y, iy, ih, ix|   |7|w, uw|   |8|ow|   |9|aw|   |10|oy|   |11|ay|   |12|h|   |13|r|   |14|l|   |15|s, z|   |16|sh, ch, jh, zh|   |17|th, dh|   |18|f, v|   |19|d, t, n|   |20|k, g, ng|   |21|p, b, m|       For information about data associated with the `VisemeReached` event, see <xref:System.Speech.Synthesis.VisemeReachedEventArgs>."}]},{"pos":[96178,96190],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[96581,96699],"content":"Gets information about the current voice of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets information about the current voice of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[96711,97295],"content":"When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer>, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> object to use one of the installed speech synthesis voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer>, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> object to use one of the installed speech synthesis voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.","pos":[0,584],"nodes":[{"content":"When you initialize a new &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt;, it uses the default system voice.","pos":[0,109],"source":"When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer>, it uses the default system voice."},{"content":"To configure the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object to use one of the installed speech synthesis voices, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; method.","pos":[110,389],"source":" To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> object to use one of the installed speech synthesis voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method."},{"content":"To get information about which voices are installed, use the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A&gt; method and the &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; class.","pos":[390,584],"source":" To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class."}]}]},{"pos":[99661,99782],"content":"Returns information about the current voice of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns information about the current voice of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[100261,100361],"content":"Raised when the voice of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> changes.","needQuote":true,"needEscape":true,"source":"Raised when the voice of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> changes."},{"pos":[100374,100930],"content":"For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.       You can change the voice that the <xref:System.Speech.Synthesis.SpeechSynthesizer> uses with any of the <xref:System.Speech.Synthesis.PromptBuilder>'s <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.       You can change the voice that the <xref:System.Speech.Synthesis.SpeechSynthesizer> uses with any of the <xref:System.Speech.Synthesis.PromptBuilder>'s <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.","pos":[0,554],"nodes":[{"content":"For an example and information about data associated with the event, see &lt;xref:System.Speech.Synthesis.VoiceChangeEventArgs&gt;.","pos":[0,125],"source":"For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.VoiceChangeEventArgs>."},{"content":"You can change the voice that the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; uses with any of the &lt;xref:System.Speech.Synthesis.PromptBuilder&gt;'s &lt;xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A&gt; methods or the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt;'s &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A&gt; or &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A&gt; methods.","pos":[132,554],"source":"       You can change the voice that the <xref:System.Speech.Synthesis.SpeechSynthesizer> uses with any of the <xref:System.Speech.Synthesis.PromptBuilder>'s <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods."}]}]},{"pos":[101149,101161],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[101557,101664],"content":"Get or sets the output volume of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Get or sets the output volume of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object."},{"pos":[103101,103210],"content":"Returns the volume of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, from 0 through 100.","needQuote":true,"needEscape":true,"source":"Returns the volume of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref>, from 0 through 100."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.SpeechSynthesizer\n  id: SpeechSynthesizer\n  children:\n  - System.Speech.Synthesis.SpeechSynthesizer.#ctor\n  - System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached\n  - System.Speech.Synthesis.SpeechSynthesizer.Dispose\n  - System.Speech.Synthesis.SpeechSynthesizer.Finalize\n  - System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt\n  - System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices\n  - System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)\n  - System.Speech.Synthesis.SpeechSynthesizer.Pause\n  - System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached\n  - System.Speech.Synthesis.SpeechSynthesizer.Rate\n  - System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)\n  - System.Speech.Synthesis.SpeechSynthesizer.Resume\n  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)\n  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)\n  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice\n  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull\n  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)\n  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)\n  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)\n  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)\n  - System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted\n  - System.Speech.Synthesis.SpeechSynthesizer.State\n  - System.Speech.Synthesis.SpeechSynthesizer.StateChanged\n  - System.Speech.Synthesis.SpeechSynthesizer.VisemeReached\n  - System.Speech.Synthesis.SpeechSynthesizer.Voice\n  - System.Speech.Synthesis.SpeechSynthesizer.VoiceChange\n  - System.Speech.Synthesis.SpeechSynthesizer.Volume\n  langs:\n  - csharp\n  name: SpeechSynthesizer\n  nameWithType: SpeechSynthesizer\n  fullName: System.Speech.Synthesis.SpeechSynthesizer\n  type: Class\n  summary: Provides access to the functionality of an installed speech synthesis engine.\n  remarks: \"When you create a new SpeechSynthesizer object, it uses the default system voice. To configure the SpeechSynthesizer to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.  \\n  \\n This class also provides control over the following aspects of speech synthesis:  \\n  \\n-   To configure the output for the SpeechSynthesizer object, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.  \\n  \\n-   To generate speech, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. The SpeechSynthesizer can produce speech from text, a <xref:System.Speech.Synthesis.Prompt> or <xref:System.Speech.Synthesis.PromptBuilder> object, or from [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763).  \\n  \\n-   To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.  \\n  \\n-   To add or remove lexicons, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> methods. The SpeechSynthesizer can use one or more lexicons to guide its pronunciation of words.  \\n  \\n-   To modify the delivery of speech output, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> properties.  \\n  \\n The SpeechSynthesizer raises events when it encounters certain features in prompts: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>). It also raises events that report on the start (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) and end (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) of speak operations and on the change of the speaking voice (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).  \\n  \\n> [!NOTE]\\n>  Always call <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> before you release your last reference to the SpeechSynthesizer. Otherwise, the resources it is using will not be freed until the garbage collector calls the SpeechSynthesizer object's <xref:System.Object.Finalize%2A> method.\"\n  example:\n  - \"The following example is part of a console application that initializes a SpeechSynthesizer object and speaks a string.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Speak a string.  \\n      synth.Speak(\\\"This example demonstrates a basic use of Speech Synthesizer\\\");  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: 'public sealed class SpeechSynthesizer : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor\n  id: '#ctor'\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeechSynthesizer()\n  nameWithType: SpeechSynthesizer.SpeechSynthesizer()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeechSynthesizer()\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Initializes a new instance of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> class.\n  remarks: When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.\n  syntax:\n    content: public SpeechSynthesizer ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)\n  id: AddLexicon(System.Uri,System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: AddLexicon(Uri,String)\n  nameWithType: SpeechSynthesizer.AddLexicon(Uri,String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(Uri,String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Adds a lexicon to the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  remarks: \"A pronunciation lexicon is a collection of words or phrases together with their pronunciations, which consist of letters and characters from a supported phonetic alphabet. You can use a lexicon to specify custom pronunciations for specialized vocabulary in your application.  \\n  \\n Pronunciations specified in an external lexicon file take precedence over the pronunciations of the speech synthesizer's internal lexicon or dictionary. However, pronunciations specified inline in prompts created with any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods take precedence over pronunciations specified in any lexicon. Inline pronunciations apply only to a single occurrence of a word. See [Lexicons and Phonetic Alphabets](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) for more information.  \\n  \\n You can add multiple lexicons to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object.Two values are currently supported for the `mediaType` parameter:  \\n  \\n-   The value `application/pls+xml` indicates that the lexicon conforms to the [Pronunciation Lexicon Specification (PLS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201766). This is the preferred format to use.  \\n  \\n-   The value `application/vdn.ms-sapi-lex` indicates that the lexicon format is Uncompressed Lexicon, which is a Microsoft-proprietary format. This is a legacy format and we recommend that you use the PLS format described above.\"\n  example:\n  - \"The following example demonstrates the effect of adding and removing a lexicon that contains a custom pronunciation for the word \\\"blue\\\". The lexicon defines the pronunciation of \\\"blue\\\" to sound like \\\"bleep\\\". While the lexicon is loaded, the speech synthesizer uses the pronunciation defined in the lexicon.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(\\\"My favorite color is blue.\\\");  \\n  \\n        // Add a lexicon that changes the pronunciation of \\\"blue\\\".  \\n        synth.AddLexicon(new Uri(\\\"C:\\\\\\\\test\\\\\\\\Blue.pls\\\"), \\\"application/pls+xml\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(\\\"My favorite color is blue.\\\");  \\n  \\n        // Remove the lexicon.  \\n        synth.RemoveLexicon(new Uri(\\\"C:\\\\\\\\test\\\\\\\\Blue.pls\\\"));  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(\\\"My favorite color is blue.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```  \\n  \\n Following are the contents of the lexicon file Blue.pls:  \\n  \\n```xml  \\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>  \\n  \\n<lexicon version=\\\"1.0\\\"   \\n      xmlns=\\\"http://www.w3.org/2005/01/pronunciation-lexicon\\\"  \\n      alphabet=\\\"x-microsoft-ups\\\" xml:lang=\\\"en-US\\\">  \\n  \\n  <lexeme>  \\n    <grapheme> blue </grapheme>  \\n    <phoneme> B L I P </phoneme>  \\n  </lexeme>  \\n  \\n</lexicon>  \\n```\"\n  syntax:\n    content: public void AddLexicon (Uri uri, string mediaType);\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: The location of the lexicon information.\n    - id: mediaType\n      type: System.String\n      description: The media type of the lexicon. Media type values are not case sensitive.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached\n  id: BookmarkReached\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: BookmarkReached\n  nameWithType: SpeechSynthesizer.BookmarkReached\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> encounters a bookmark in a prompt.\n  remarks: \"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods. For information about data associated with the event, see <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.  \\n  \\n You can add bookmarks using the <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> method.\"\n  example:\n  - \"The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the BookmarkReached event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =  \\n          new System.Media.SoundPlayer(@\\\"C:\\\\test\\\\weather.wav\\\");  \\n  \\n        // Build a prompt and append bookmarks.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.AppendText(  \\n          \\\"The weather forecast for today is partly cloudy with some sun breaks.\\\");  \\n        builder.AppendBookmark(\\\"Daytime forecast\\\");  \\n        builder.AppendText(  \\n          \\\"Tonight's weather will be cloudy with a 30% chance of showers.\\\");  \\n        builder.AppendBookmark(\\\"Nightime forecast\\\");  \\n  \\n        // Add a handler for the BookmarkReached event.  \\n        synth.BookmarkReached +=  \\n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \\n  \\n        // Speak the prompt and play back the output file.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Write the name and position of the bookmark to the console.  \\n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Bookmark ({0}) reached at: {1} \\\",  \\n        e.Bookmark, e.AudioPosition);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs> BookmarkReached;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.BookmarkReachedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose\n  id: Dispose\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SpeechSynthesizer.Dispose()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Dispose()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Disposes the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object and releases resources used during the session.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize\n  id: Finalize\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SpeechSynthesizer.Finalize()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Finalize()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Acts as a safeguard to clean up resources in the event that the <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*> method is not called.\n  syntax:\n    content: ~SpeechSynthesizer ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt\n  id: GetCurrentlySpokenPrompt\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: GetCurrentlySpokenPrompt()\n  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the prompt that the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> is speaking.\n  remarks: ''\n  example:\n  - \"```c#  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();\n    parameters: []\n    return:\n      type: System.Speech.Synthesis.Prompt\n      description: Returns the prompt object that is currently being spoken.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices\n  id: GetInstalledVoices\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: GetInstalledVoices()\n  nameWithType: SpeechSynthesizer.GetInstalledVoices()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Returns all of the installed speech synthesis (text-to-speech) voices.\n  remarks: A voice is an engine for speech synthesis (text-to-speech or TTS) that is installed on the system.\n  example:\n  - \"The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Output information about all of the installed voices.   \\n        Console.WriteLine(\\\"Installed voices -\\\");  \\n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \\n        {  \\n          VoiceInfo info = voice.VoiceInfo;  \\n          string AudioFormats = \\\"\\\";  \\n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \\n          {  \\n            AudioFormats += String.Format(\\\"{0}\\\\n\\\",  \\n            fmt.EncodingFormat.ToString());  \\n          }  \\n  \\n          Console.WriteLine(\\\" Name:          \\\" + info.Name);  \\n          Console.WriteLine(\\\" Culture:       \\\" + info.Culture);  \\n          Console.WriteLine(\\\" Age:           \\\" + info.Age);  \\n          Console.WriteLine(\\\" Gender:        \\\" + info.Gender);  \\n          Console.WriteLine(\\\" Description:   \\\" + info.Description);  \\n          Console.WriteLine(\\\" ID:            \\\" + info.Id);  \\n          Console.WriteLine(\\\" Enabled:       \\\" + voice.Enabled);  \\n          if (info.SupportedAudioFormats.Count != 0)  \\n          {  \\n            Console.WriteLine( \\\" Audio formats: \\\" + AudioFormats);  \\n          }  \\n          else  \\n          {  \\n            Console.WriteLine(\\\" No supported audio formats found\\\");  \\n          }  \\n  \\n          string AdditionalInfo = \\\"\\\";  \\n          foreach (string key in info.AdditionalInfo.Keys)  \\n          {  \\n            AdditionalInfo += String.Format(\\\"  {0}: {1}\\\\n\\\", key, info.AdditionalInfo[key]);  \\n          }  \\n  \\n          Console.WriteLine(\\\" Additional Info - \\\" + AdditionalInfo);  \\n          Console.WriteLine();  \\n        }  \\n      }  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice> GetInstalledVoices ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}\n      description: Returns a read-only collection of the voices currently installed on the system.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)\n  id: GetInstalledVoices(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: GetInstalledVoices(CultureInfo)\n  nameWithType: SpeechSynthesizer.GetInstalledVoices(CultureInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(CultureInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Returns all of the installed speech synthesis  (text-to-speech) voices that support a specific locale.\n  remarks: \"If none of the installed voices support the specified locale, this method returns an empty collection.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform text-to-speech using the language specified in the Culture property, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.\"\n  example:\n  - \"The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices that support the en-US locale.  \\n  \\n```c#  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the speech synthesizer.  \\n      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Output information about all of the installed voices that  \\n        // support the en-US locacale.   \\n        Console.WriteLine(\\\"Installed voices for the en-US locale:\\\");  \\n        foreach (InstalledVoice voice in  \\n          synthesizer.GetInstalledVoices(new CultureInfo(\\\"en-US\\\")))  \\n        {  \\n          VoiceInfo info = voice.VoiceInfo;  \\n          OutputVoiceInfo(info);  \\n        }  \\n  \\n        // Output information about the current voice.  \\n        Console.WriteLine();  \\n        Console.WriteLine(\\\"Current voice:\\\");  \\n        OutputVoiceInfo(synthesizer.Voice);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Display information about a synthesizer voice.  \\n    private static void OutputVoiceInfo(VoiceInfo info)  \\n    {  \\n      Console.WriteLine(\\\"  Name: {0}, culture: {1}, gender: {2}, age: {3}.\\\",  \\n        info.Name, info.Culture, info.Gender, info.Age);  \\n      Console.WriteLine(\\\"    Description: {0}\\\", info.Description);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice> GetInstalledVoices (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The locale that the voice must support.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}\n      description: Returns a read-only collection of the voices currently installed on the system that support the specified locale.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause\n  id: Pause\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Pause()\n  nameWithType: SpeechSynthesizer.Pause()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Pause()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Pauses the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  syntax:\n    content: public void Pause ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Pause*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached\n  id: PhonemeReached\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: PhonemeReached\n  nameWithType: SpeechSynthesizer.PhonemeReached\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when a phoneme is reached.\n  remarks: \"A phoneme is a basic component of written language, typically a letter of an alphabet (or the combination of two letters) that represents one or more distinct sounds. For example, the letter “c” is a phoneme that may sound like “s” in “cinder”, or like “k” in “catch”. A written word is an assemblage of phonemes. Changing a phoneme in a word will alter its spelling.  \\n  \\n A <xref:System.Speech.Synthesis.SpeechSynthesizer> instance generates a PhonemeReached event for each portion of a word that constitutes a phoneme. For example, for the word “theme” would generate three PhonemeReached events; one for the “th” sound, one for the “e” sound, and one for the “m” sound (me).  \\n  \\n For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs> PhonemeReached;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.PhonemeReachedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate\n  id: Rate\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Rate\n  nameWithType: SpeechSynthesizer.Rate\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Rate\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets or sets the speaking rate of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example speaks a string with the speaking rate set to -2.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Set a value for the speaking rate.  \\n      synth.Rate = -2;  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Speak a text string synchronously.  \\n      synth.Speak(\\\"This example speaks a string with the speaking rate set to -2.\\\");  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }     \\n  }    \\n}  \\n```\"\n  syntax:\n    content: public int Rate { get; set; }\n    return:\n      type: System.Int32\n      description: Returns the speaking rate of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object, from -10 through 10.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Rate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)\n  id: RemoveLexicon(System.Uri)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: RemoveLexicon(Uri)\n  nameWithType: SpeechSynthesizer.RemoveLexicon(Uri)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(Uri)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Removes a lexicon from the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  remarks: See <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> for an example.\n  syntax:\n    content: public void RemoveLexicon (Uri uri);\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: The location of the lexicon document.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume\n  id: Resume\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Resume()\n  nameWithType: SpeechSynthesizer.Resume()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Resume()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Resumes the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object after it has been paused.\n  syntax:\n    content: public void Resume ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Resume*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)\n  id: SelectVoice(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SelectVoice(String)\n  nameWithType: SpeechSynthesizer.SelectVoice(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Selects a specific voice by name.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. To select a voice, pass the entire contents of the <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> property as the argument for the SelectVoice method. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that contains `name` in the voice's <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName> property. The <xref:System.Speech.Synthesis.SpeechSynthesizer> performs a case-sensitive, substring comparison to determine if the voice matches the `name`.  \\n  \\n When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.  \\n  \\n To select a voice by gender, age, or locale, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.\"\n  syntax:\n    content: public void SelectVoice (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the voice to select.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)\n  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SelectVoiceByHints(VoiceGender)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Selects a voice with a specific gender.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> property matches the `gender` parameter.  \\n  \\n When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.  \\n  \\n To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.  \\n  \\n To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.\"\n  syntax:\n    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the voice to select.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SelectVoiceByHints(VoiceGender,VoiceAge)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Selects a voice with a specific gender and age.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters.  \\n  \\n When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.  \\n  \\n To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.  \\n  \\n To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.\"\n  syntax:\n    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the voice to select.\n    - id: age\n      type: System.Speech.Synthesis.VoiceAge\n      description: The age of the voice to select.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Selects a voice with a specific gender and age, based on the position in which the voices are ordered.\n  remarks: \"Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds installed voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters. The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.  \\n  \\n When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.  \\n  \\n To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.  \\n  \\n To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.\"\n  syntax:\n    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the voice to select.\n    - id: age\n      type: System.Speech.Synthesis.VoiceAge\n      description: The age of the voice to select.\n    - id: voiceAlternate\n      type: System.Int32\n      description: The position of the voice to select.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)\n  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Selects a voice with a specific gender, age, and locale, based on the position in which the voices are ordered.\n  remarks: \"The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, and <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> properties match the `gender`, `age`, and `culture` parameters. The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.  \\n  \\n Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform text-to-speech using the language specified in the `culture` parameter, a speech synthesis engine that supports that language-country code must be installed. The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:  \\n  \\n-   en-US. English (United States)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\" are also permitted.  \\n  \\n When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria. For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`. An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`. Typically, applications will not set a voice’s <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.  \\n  \\n To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.  \\n  \\n To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.\"\n  syntax:\n    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: gender\n      type: System.Speech.Synthesis.VoiceGender\n      description: The gender of the voice to select.\n    - id: age\n      type: System.Speech.Synthesis.VoiceAge\n      description: The age of the voice to select.\n    - id: voiceAlternate\n      type: System.Int32\n      description: The position of the voice to select.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The locale of the voice to select.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  id: SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)\n  nameWithType: SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to an audio stream.\n  remarks: \"Call <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s  reference to the stream.  \\n  \\n For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.\"\n  syntax:\n    content: public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);\n    parameters:\n    - id: audioDestination\n      type: System.IO.Stream\n      description: The stream to which to append synthesis output.\n    - id: formatInfo\n      type: System.Speech.AudioFormat.SpeechAudioFormatInfo\n      description: The format to use for the synthesis output.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice\n  id: SetOutputToDefaultAudioDevice\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SetOutputToDefaultAudioDevice()\n  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to send output to the default audio device.\n  remarks: \"You can use the  **Sound** window in the Windows **Control Panel** to configure the default audio device for the computer.  \\n  \\n For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.\"\n  example:\n  - \"The following example uses the synthesizer to speak a phrase to the default audio output.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the speech synthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the synthesizer to send output to the default audio device.  \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Speak a phrase.  \\n        synth.Speak(\\\"This is sample text-to-speech output.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SetOutputToDefaultAudioDevice ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull\n  id: SetOutputToNull\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SetOutputToNull()\n  nameWithType: SpeechSynthesizer.SetOutputToNull()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to not send output from synthesis operations to a device, file, or stream.\n  remarks: \"Use this method to release the <xref:System.Speech.Synthesis.SpeechSynthesizer> ‘s reference to a file or stream. See <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> for an example.  \\n  \\n For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.\"\n  syntax:\n    content: public void SetOutputToNull ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)\n  id: SetOutputToWaveFile(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SetOutputToWaveFile(String)\n  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to a file that contains Waveform format audio.\n  remarks: To configure the output and specify the audio format, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.\n  example:\n  - \"The following example uses an instance of <xref:System.Media.SoundPlayer> to play a prompt that has been output to a .wav file. Because the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> call is asynchronous, the <xref:System.Media.SoundPlayer> instance is created (and the <xref:System.Media.SoundPlayer.Play%2A> method invoked) in the handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToWaveFile(@\\\"C:\\\\Test\\\\Sample.wav\\\");  \\n  \\n      // Register for the SpeakCompleted event.  \\n      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  \\n  \\n      // Build a prompt.  \\n      PromptBuilder builder = new PromptBuilder();  \\n      builder.AppendText(\\\"This sample asynchronously speaks a prompt to a WAVE file.\\\");  \\n  \\n      // Speak the string asynchronously.  \\n      synth.SpeakAsync(builder);  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeakCompleted event.  \\n    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  \\n    {  \\n  \\n      // Create a SoundPlayer instance to play the output audio file.  \\n      System.Media.SoundPlayer m_SoundPlayer =  \\n        new System.Media.SoundPlayer(@\\\"C:\\\\Test\\\\Sample.wav\\\");  \\n  \\n      //  Play the output file.  \\n      m_SoundPlayer.Play();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void SetOutputToWaveFile (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path to the file.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  id: SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SetOutputToWaveFile(String,SpeechAudioFormatInfo)\n  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to a Waveform audio format file in a specified format.\n  remarks: ''\n  example:\n  - \"The following example specifies the format of the output of speech synthesis and sends it to a WAV file.  \\n  \\n```c#  \\nusing System;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\temp\\\\test.wav\\\",   \\n          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \\n  \\n        // Create a SoundPlayer instance to play output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =   \\n          new System.Media.SoundPlayer(@\\\"C:\\\\temp\\\\test.wav\\\");  \\n  \\n        // Build a prompt.  \\n        PromptBuilder builder = new PromptBuilder();  \\n        builder.AppendText(\\\"This is sample output to a WAVE file.\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path to the file.\n    - id: formatInfo\n      type: System.Speech.AudioFormat.SpeechAudioFormatInfo\n      description: The audio format information.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)\n  id: SetOutputToWaveStream(System.IO.Stream)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SetOutputToWaveStream(Stream)\n  nameWithType: SpeechSynthesizer.SetOutputToWaveStream(Stream)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(Stream)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Configures the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object to append output to a stream that contains Waveform format audio.\n  remarks: \"To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>’s reference to the stream, reconfigure the synthesizer's output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  \\n  \\n For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.\"\n  example:\n  - \"The following example outputs a phrase to a WAV stream.  \\n  \\n```c#  \\nusing System;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the speech synthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      using (MemoryStream stream = new MemoryStream())  \\n      {  \\n  \\n        // Create a SoundPlayer instance to play the output audio file.  \\n        MemoryStream streamAudio = new MemoryStream();  \\n        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  \\n  \\n        // Configure the synthesizer to output to an audio stream.  \\n        synth.SetOutputToWaveStream(streamAudio);  \\n  \\n        // Speak a phrase.  \\n        synth.Speak(\\\"This is sample text-to-speech output.\\\");  \\n        streamAudio.Position = 0;  \\n        m_SoundPlayer.Stream = streamAudio;  \\n        m_SoundPlayer.Play();  \\n  \\n        // Set the synthesizer output to null to release the stream.   \\n        synth.SetOutputToNull();  \\n  \\n        // Insert code to persist or process the stream contents here.  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SetOutputToWaveStream (System.IO.Stream audioDestination);\n    parameters:\n    - id: audioDestination\n      type: System.IO.Stream\n      description: The stream to which to append synthesis output.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)\n  id: Speak(System.Speech.Synthesis.Prompt)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Speak(Prompt)\n  nameWithType: SpeechSynthesizer.Speak(Prompt)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(Prompt)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Synchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.Prompt\"></xref> object.\n  remarks: To asynchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the Speak method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a prompt from a string.  \\n        Prompt color = new Prompt(\\\"What is your favorite color?\\\");  \\n  \\n        // Speak the contents of the prompt synchronously.  \\n        synth.Speak(color);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void Speak (System.Speech.Synthesis.Prompt prompt);\n    parameters:\n    - id: prompt\n      type: System.Speech.Synthesis.Prompt\n      description: The content to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)\n  id: Speak(System.Speech.Synthesis.PromptBuilder)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Speak(PromptBuilder)\n  nameWithType: SpeechSynthesizer.Speak(PromptBuilder)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(PromptBuilder)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Synchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: To asynchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the Speak method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Create a PromptBuilder object and append a text string.  \\n        PromptBuilder song = new PromptBuilder();  \\n        song.AppendText(\\\"Say the name of the song you want to hear\\\");  \\n  \\n        // Speak the contents of the prompt synchronously.  \\n        synth.Speak(song);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);\n    parameters:\n    - id: promptBuilder\n      type: System.Speech.Synthesis.PromptBuilder\n      description: The content to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)\n  id: Speak(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Speak(String)\n  nameWithType: SpeechSynthesizer.Speak(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Synchronously speaks the contents of a string.\n  remarks: To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method. To asynchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.\n  example:\n  - \"As shown in the following example, the Speak method provides the simplest means to generate speech output synchronously.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Speak a string synchronously.  \\n        synth.Speak(\\\"What is your favorite color?\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void Speak (string textToSpeak);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: The text to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)\n  id: SpeakAsync(System.Speech.Synthesis.Prompt)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakAsync(Prompt)\n  nameWithType: SpeechSynthesizer.SpeakAsync(Prompt)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(Prompt)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Asynchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.Prompt\"></xref> object.\n  remarks: \"You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.  \\n  \\n To synchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.\"\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the SpeakAsync method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Create a prompt from a string.  \\n      Prompt color = new Prompt(\\\"What is your favorite color?\\\");  \\n  \\n      // Speak the contents of the prompt asynchronously.  \\n      synth.SpeakAsync(color);  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);\n    parameters:\n    - id: prompt\n      type: System.Speech.Synthesis.Prompt\n      description: The content to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)\n  id: SpeakAsync(System.Speech.Synthesis.PromptBuilder)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakAsync(PromptBuilder)\n  nameWithType: SpeechSynthesizer.SpeakAsync(PromptBuilder)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(PromptBuilder)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Asynchronously speaks the contents of a <xref href=\"System.Speech.Synthesis.PromptBuilder\"></xref> object.\n  remarks: To synchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.\n  example:\n  - \"The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the SpeakAsync method.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Create a PromptBuilder object and append a text string.  \\n      PromptBuilder song = new PromptBuilder();  \\n      song.AppendText(\\\"Say the name of the song you want to hear\\\");  \\n  \\n      // Speak the contents of the prompt asynchronously.  \\n      synth.SpeakAsync(song);  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);\n    parameters:\n    - id: promptBuilder\n      type: System.Speech.Synthesis.PromptBuilder\n      description: The content to speak.\n    return:\n      type: System.Speech.Synthesis.Prompt\n      description: Returns the object that contains the content to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)\n  id: SpeakAsync(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakAsync(String)\n  nameWithType: SpeechSynthesizer.SpeakAsync(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Asynchronously speaks the contents of a string.\n  remarks: To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. To synchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method. You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.\n  example:\n  - \"As shown in the following example, the SpeakAsync method provides the simplest means to generate speech output asynchronously.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Speak a string asynchronously.  \\n      synth.SpeakAsync(\\\"What is your favorite color?\\\");  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: The text to speak.\n    return:\n      type: System.Speech.Synthesis.Prompt\n      description: Returns the object that contains the content to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)\n  id: SpeakAsyncCancel(System.Speech.Synthesis.Prompt)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakAsyncCancel(Prompt)\n  nameWithType: SpeechSynthesizer.SpeakAsyncCancel(Prompt)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(Prompt)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Cancels the asynchronous synthesis operation for a queued prompt.\n  remarks: \"You can also use this method to cancel an asynchronous speak operation for the following:  \\n  \\n-   The contents of a <xref:System.String> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method.  \\n  \\n-   The contents of a <xref:System.Speech.Synthesis.PromptBuilder> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> method.  \\n  \\n-   The contents of a <xref:System.String> containing SSML specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.  \\n  \\n When you call <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech creates a <xref:System.Speech.Synthesis.Prompt> object and populates it with the contents of the method's parameter, and returns the <xref:System.Speech.Synthesis.Prompt> object. If you retain a copy of the returned <xref:System.Speech.Synthesis.Prompt>, you can pass it into SpeakAsyncCancel to cancel speaking content specified in a <xref:System.String> or a <xref:System.Speech.Synthesis.PromptBuilder> object.\"\n  syntax:\n    content: public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);\n    parameters:\n    - id: prompt\n      type: System.Speech.Synthesis.Prompt\n      description: The content for which to cancel a speak operation.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll\n  id: SpeakAsyncCancelAll\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakAsyncCancelAll()\n  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Cancels all queued, asynchronous, speech synthesis operations.\n  remarks: ''\n  example:\n  - \"The following example show a use of SpeakAsyncCancelAll to cancel the asynchronous speaking of a prompt, so that a new prompt can be spoken. Note that the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event fires when a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation is cancelled.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\nusing System.Threading;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Subscribe to the StateChanged event.  \\n      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  \\n  \\n      // Subscribe to the SpeakProgress event.  \\n      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \\n  \\n      // Subscribe to the SpeakCompleted event.  \\n      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  \\n  \\n      // Begin speaking a text string asynchronously.  \\n      synth.SpeakAsync(\\\"Speech is an effective and natural way for people to interact with applications, \\\" +  \\n        \\\"complementing or even replacing the use of mice, keyboards, controllers, and gestures.\\\");  \\n  \\n      // Speak for four seconds.  \\n      Thread.Sleep(4000);  \\n  \\n      // Cancel the SpeakAsync operation and wait one second.  \\n      synth.SpeakAsyncCancelAll();  \\n      Thread.Sleep(1000);  \\n  \\n      // Speak a new text string.  \\n      synth.Speak(\\\"An urgent email message has arrived. Do you want to hear it?\\\");  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Write to the console when the SpeakAsync operation has been cancelled.  \\n    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"\\\\nThe SpeakAsync operation was cancelled!!\\\");  \\n    }  \\n  \\n    // When it changes, write the state of the SpeechSynthesizer to the console.  \\n    static void synth_StateChanged(object sender, StateChangedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"\\\\nSynthesizer State: {0}    Previous State: {1}\\\\n\\\", e.State, e.PreviousState);  \\n    }  \\n  \\n    // Write the text being spoken by the SpeechSynthesizer to the console.  \\n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \\n    {  \\n      Console.WriteLine(e.Text);  \\n    }      \\n  }    \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SpeakAsyncCancelAll ();\n    parameters: []\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted\n  id: SpeakCompleted\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakCompleted\n  nameWithType: SpeechSynthesizer.SpeakCompleted\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> completes the speaking of a prompt.\n  remarks: \"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises the SpeakCompleted event at the completion of any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> or  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.  \\n  \\n The <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> class has no properties, and does not return data from the SpeakCompleted event. It is provided to enable application authors to write event handlers for the SpeakCompleted event.\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs> SpeakCompleted;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.SpeakCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\n  id: SpeakProgress\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakProgress\n  nameWithType: SpeechSynthesizer.SpeakProgress\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised after the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> speaks each individual word of a prompt.\n  remarks: The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods. For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs> SpeakProgress;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.SpeakProgressEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)\n  id: SpeakSsml(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakSsml(String)\n  nameWithType: SpeechSynthesizer.SpeakSsml(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Synchronously speaks a <xref:System.String> that contains SSML markup.\n  remarks: \"The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). For more information, see [Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94).  \\n  \\n To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> to initiate the synchronous speaking of a string that does not contain SSML markup.  \\n  \\n During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Raised when the speaking state of the synthesizer changes.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Raised when the synthesizer begins generating speech.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Raised each time the synthesizer completes speaking a word.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Raised when the synthesizer encounters a bookmark in a prompt.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Raised when the speaking voice for the synthesizer changes.  \\n  \\n The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing the SpeakSsml method.\"\n  example:\n  - \"The following example renders the date 1/29/2009 as a date, in month, day, year order.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Build an SSML prompt in a string.  \\n      string str = \\\"<speak version=\\\\\\\"1.0\\\\\\\"\\\";  \\n      str += \\\" xmlns=\\\\\\\"http://www.w3.org/2001/10/synthesis\\\\\\\"\\\";  \\n      str += \\\" xml:lang=\\\\\\\"en-US\\\\\\\">\\\";  \\n      str += \\\"<say-as type=\\\\\\\"date:mdy\\\\\\\"> 1/29/2009 </say-as>\\\";  \\n      str += \\\"</speak>\\\";  \\n  \\n      // Speak the contents of the prompt asynchronously.  \\n      synth.SpeakSsml(str);  \\n  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void SpeakSsml (string textToSpeak);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: The SSML string to speak.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)\n  id: SpeakSsmlAsync(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakSsmlAsync(String)\n  nameWithType: SpeechSynthesizer.SpeakSsmlAsync(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Asynchronously speaks a <xref:System.String> that contains SSML markup.\n  remarks: \"The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). For more information, see [Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94).  \\n  \\n To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method. You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> to initiate the asynchronous speaking of a string that does not contain SSML markup.  \\n  \\n During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Raised when the speaking state of the synthesizer changes.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Raised when the synthesizer begins generating speech.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Raised each time the synthesizer completes speaking a word.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Raised when the synthesizer encounters a bookmark in a prompt.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Raised when the speaking voice for the synthesizer changes.  \\n  \\n-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Raised when the synthesizer finishes processing a SpeakSsmlAsync operation.  \\n  \\n If your application dos not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously.\"\n  example:\n  - \"```  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer();  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Build an SSML prompt in a string.  \\n      string str = \\\"<speak version=\\\\\\\"1.0\\\\\\\"\\\";  \\n      str += \\\" xmlns=\\\\\\\"http://www.w3.org/2001/10/synthesis\\\\\\\"\\\";  \\n      str += \\\" xml:lang=\\\\\\\"en-US\\\\\\\">\\\";  \\n      str += \\\"<say-as type=\\\\\\\"date:mdy\\\\\\\"> 1/29/2009 </say-as>\\\";  \\n      str += \\\"</speak>\\\";  \\n  \\n      // Speak the contents of the prompt asynchronously.  \\n      synth.SpeakSsmlAsync(str);  \\n  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);\n    parameters:\n    - id: textToSpeak\n      type: System.String\n      description: The SMML markup to speak.\n    return:\n      type: System.Speech.Synthesis.Prompt\n      description: Asynchronously speaks a <xref:System.String> that contains SSML markup.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted\n  id: SpeakStarted\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: SpeakStarted\n  nameWithType: SpeechSynthesizer.SpeakStarted\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> begins the speaking of a prompt.\n  remarks: \"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when it begins processing a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.  \\n  \\n The <xref:System.Speech.Synthesis.SpeakStartedEventArgs> class has no properties, and does not return data from the SpeakStarted event. It is provided to enable application authors to write event handlers for the SpeakStarted event.\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs> SpeakStarted;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.SpeakStartedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.State\n  id: State\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: State\n  nameWithType: SpeechSynthesizer.State\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.State\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the current speaking state of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  remarks: To get the new state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> after it changes, use the <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> property of the <xref:System.Speech.Synthesis.StateChangedEventArgs> class.\n  example:\n  - \"The following example illustrates the state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> before, during, and after speaking a prompt.  \\n  \\n```c#  \\nusing System;  \\nusing System.Threading;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      SpeechSynthesizer synth = new SpeechSynthesizer() ;  \\n  \\n      // Configure the audio output.   \\n      synth.SetOutputToDefaultAudioDevice();  \\n  \\n      // Subscribe to the SpeakProgress event.         \\n      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \\n  \\n      // Write the state of the SpeechSynthesizer to the console.  \\n      Console.WriteLine(\\\"Current Synthesizer state: \\\" + synth.State + \\\"\\\\n\\\");  \\n  \\n      // Speak a string asynchronously.  \\n      synth.SpeakAsync(\\\"What is your favorite color?\\\");  \\n  \\n      // Write the state of the SpeechSynthesizer to the console while it is speaking.  \\n      Thread.Sleep(1000);  \\n      Console.WriteLine(\\\"\\\\n - Current Synthesizer state: \\\" + synth.State + \\\" - \\\\n\\\");  \\n  \\n      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  \\n      Thread.Sleep(2000);  \\n      Console.WriteLine(\\\"\\\\nCurrent Synthesizer state: \\\" + synth.State);  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \\n    {  \\n      Console.WriteLine(e.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Synthesis.SynthesizerState State { get; }\n    return:\n      type: System.Speech.Synthesis.SynthesizerState\n      description: Returns the current speaking state of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.StateChanged\n  id: StateChanged\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: StateChanged\n  nameWithType: SpeechSynthesizer.StateChanged\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.StateChanged\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when the state of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> changes.\n  remarks: \"The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when its speaking <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> changes. For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.StateChangedEventArgs>.  \\n  \\n To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.StateChangedEventArgs> StateChanged;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.StateChangedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached\n  id: VisemeReached\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: VisemeReached\n  nameWithType: SpeechSynthesizer.VisemeReached\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when a viseme is reached.\n  remarks: \"A viseme is the basic position of the mouth and face when pronouncing a phoneme. Visemes are visual representations of phonemes.  \\n  \\n System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes.  VisemeReached events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached. Since some visemes represent more than one phoneme, a VisemeReached event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme. For example, for the spoken words “this zone”, a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event is raised for the “s” in “this” and the “z” in “zone”. However, a VisemeReached event is not raised for the “z” in “zone” because it corresponds to the same viseme as the “s” in “this”.  \\n  \\n The following is a list of the 21 SAPI phonemes and phoneme groups that correspond to a viseme in US English.  \\n  \\n|Viseme|Phoneme(s)|  \\n|------------|------------------|  \\n|0|silence|  \\n|1|ae, ax, ah|  \\n|2|aa|  \\n|3|ao|  \\n|4|ey, eh, uh|  \\n|5|er|  \\n|6|y, iy, ih, ix|  \\n|7|w, uw|  \\n|8|ow|  \\n|9|aw|  \\n|10|oy|  \\n|11|ay|  \\n|12|h|  \\n|13|r|  \\n|14|l|  \\n|15|s, z|  \\n|16|sh, ch, jh, zh|  \\n|17|th, dh|  \\n|18|f, v|  \\n|19|d, t, n|  \\n|20|k, g, ng|  \\n|21|p, b, m|  \\n  \\n For information about data associated with the `VisemeReached` event, see <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs> VisemeReached;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.VisemeReachedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice\n  id: Voice\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Voice\n  nameWithType: SpeechSynthesizer.Voice\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Voice\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets information about the current voice of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  remarks: When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer>, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> object to use one of the installed speech synthesis voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.\n  example:\n  - \"The following example initializes an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>and gets information about the current voice.  \\n  \\n```c#  \\nusing System;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Get information about supported audio formats.  \\n        string AudioFormats = \\\"\\\";  \\n        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  \\n        {  \\n          AudioFormats += String.Format(\\\"{0}\\\\n\\\",  \\n          fmt.EncodingFormat.ToString());  \\n        }  \\n  \\n        // Write information about the voice to the console.  \\n        Console.WriteLine(\\\" Name:          \\\" + synth.Voice.Name);  \\n        Console.WriteLine(\\\" Culture:       \\\" + synth.Voice.Culture);  \\n        Console.WriteLine(\\\" Age:           \\\" + synth.Voice.Age);  \\n        Console.WriteLine(\\\" Gender:        \\\" + synth.Voice.Gender);  \\n        Console.WriteLine(\\\" Description:   \\\" + synth.Voice.Description);  \\n        Console.WriteLine(\\\" ID:            \\\" + synth.Voice.Id);  \\n        if (synth.Voice.SupportedAudioFormats.Count != 0)  \\n        {  \\n          Console.WriteLine(\\\" Audio formats: \\\" + AudioFormats);  \\n        }  \\n        else  \\n        {  \\n          Console.WriteLine(\\\" No supported audio formats found\\\");  \\n        }  \\n  \\n        // Get additional information about the voice.  \\n        string AdditionalInfo = \\\"\\\";  \\n        foreach (string key in synth.Voice.AdditionalInfo.Keys)  \\n        {  \\n          AdditionalInfo += String.Format(\\\"  {0}: {1}\\\\n\\\",  \\n            key, synth.Voice.AdditionalInfo[key]);  \\n        }  \\n  \\n        Console.WriteLine(\\\" Additional Info - \\\" + AdditionalInfo);  \\n        Console.WriteLine();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Synthesis.VoiceInfo Voice { get; }\n    return:\n      type: System.Speech.Synthesis.VoiceInfo\n      description: Returns information about the current voice of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Voice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange\n  id: VoiceChange\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: VoiceChange\n  nameWithType: SpeechSynthesizer.VoiceChange\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Raised when the voice of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> changes.\n  remarks: \"For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.  \\n  \\n You can change the voice that the <xref:System.Speech.Synthesis.SpeechSynthesizer> uses with any of the <xref:System.Speech.Synthesis.PromptBuilder>'s <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.\"\n  syntax:\n    content: public event EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs> VoiceChange;\n    return:\n      type: System.EventHandler{System.Speech.Synthesis.VoiceChangeEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume\n  id: Volume\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  langs:\n  - csharp\n  name: Volume\n  nameWithType: SpeechSynthesizer.Volume\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Volume\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Get or sets the output volume of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example sets the volume of the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s audio output for the synthesized voice and the WAV file.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToDefaultAudioDevice();  \\n  \\n        // Set the volume of the SpeechSynthesizer's ouput.  \\n        synth.Volume = 60;  \\n  \\n        // Build a prompt containing recorded audio and synthesized speech.  \\n        PromptBuilder builder = new PromptBuilder(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\"));  \\n        builder.AppendAudio(\\\"C:\\\\\\\\Test\\\\\\\\WelcomeToContosoRadio.wav\\\");  \\n        builder.AppendText(  \\n          \\\"The weather forecast for today is partly cloudy with some sun breaks.\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public int Volume { get; set; }\n    return:\n      type: System.Int32\n      description: Returns the volume of the <xref href=\"System.Speech.Synthesis.SpeechSynthesizer\"></xref>, from 0 through 100.\n  overload: System.Speech.Synthesis.SpeechSynthesizer.Volume*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeechSynthesizer()\n  nameWithType: SpeechSynthesizer.SpeechSynthesizer()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeechSynthesizer()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: AddLexicon(Uri,String)\n  nameWithType: SpeechSynthesizer.AddLexicon(Uri,String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(Uri,String)\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: BookmarkReached\n  nameWithType: SpeechSynthesizer.BookmarkReached\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached\n- uid: System.EventHandler{System.Speech.Synthesis.BookmarkReachedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<BookmarkReachedEventArgs>\n  nameWithType: EventHandler<BookmarkReachedEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.BookmarkReachedEventArgs\n    name: BookmarkReachedEventArgs\n    nameWithType: BookmarkReachedEventArgs\n    fullName: BookmarkReachedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Dispose()\n  nameWithType: SpeechSynthesizer.Dispose()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Dispose()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Finalize()\n  nameWithType: SpeechSynthesizer.Finalize()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Finalize()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: GetCurrentlySpokenPrompt()\n  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt()\n- uid: System.Speech.Synthesis.Prompt\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: Prompt\n  nameWithType: Prompt\n  fullName: System.Speech.Synthesis.Prompt\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: GetInstalledVoices()\n  nameWithType: SpeechSynthesizer.GetInstalledVoices()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<InstalledVoice>\n  nameWithType: ReadOnlyCollection<InstalledVoice>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.InstalledVoice\n    name: InstalledVoice\n    nameWithType: InstalledVoice\n    fullName: InstalledVoice\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: GetInstalledVoices(CultureInfo)\n  nameWithType: SpeechSynthesizer.GetInstalledVoices(CultureInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(CultureInfo)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Pause()\n  nameWithType: SpeechSynthesizer.Pause()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Pause()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: PhonemeReached\n  nameWithType: SpeechSynthesizer.PhonemeReached\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached\n- uid: System.EventHandler{System.Speech.Synthesis.PhonemeReachedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<PhonemeReachedEventArgs>\n  nameWithType: EventHandler<PhonemeReachedEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.PhonemeReachedEventArgs\n    name: PhonemeReachedEventArgs\n    nameWithType: PhonemeReachedEventArgs\n    fullName: PhonemeReachedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Rate\n  nameWithType: SpeechSynthesizer.Rate\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Rate\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: RemoveLexicon(Uri)\n  nameWithType: SpeechSynthesizer.RemoveLexicon(Uri)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(Uri)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Resume()\n  nameWithType: SpeechSynthesizer.Resume()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Resume()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoice(String)\n  nameWithType: SpeechSynthesizer.SelectVoice(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(String)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoiceByHints(VoiceGender)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender)\n- uid: System.Speech.Synthesis.VoiceGender\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceGender\n  nameWithType: VoiceGender\n  fullName: System.Speech.Synthesis.VoiceGender\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoiceByHints(VoiceGender,VoiceAge)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)\n- uid: System.Speech.Synthesis.VoiceAge\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceAge\n  nameWithType: VoiceAge\n  fullName: System.Speech.Synthesis.VoiceAge\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)\n  nameWithType: SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: SpeechAudioFormatInfo\n  nameWithType: SpeechAudioFormatInfo\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToDefaultAudioDevice()\n  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToNull()\n  nameWithType: SpeechSynthesizer.SetOutputToNull()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToWaveFile(String)\n  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToWaveFile(String,SpeechAudioFormatInfo)\n  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToWaveStream(Stream)\n  nameWithType: SpeechSynthesizer.SetOutputToWaveStream(Stream)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(Stream)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Speak(Prompt)\n  nameWithType: SpeechSynthesizer.Speak(Prompt)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(Prompt)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Speak(PromptBuilder)\n  nameWithType: SpeechSynthesizer.Speak(PromptBuilder)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(PromptBuilder)\n- uid: System.Speech.Synthesis.PromptBuilder\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: PromptBuilder\n  nameWithType: PromptBuilder\n  fullName: System.Speech.Synthesis.PromptBuilder\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Speak(String)\n  nameWithType: SpeechSynthesizer.Speak(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(String)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsync(Prompt)\n  nameWithType: SpeechSynthesizer.SpeakAsync(Prompt)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(Prompt)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsync(PromptBuilder)\n  nameWithType: SpeechSynthesizer.SpeakAsync(PromptBuilder)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(PromptBuilder)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsync(String)\n  nameWithType: SpeechSynthesizer.SpeakAsync(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(String)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsyncCancel(Prompt)\n  nameWithType: SpeechSynthesizer.SpeakAsyncCancel(Prompt)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(Prompt)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsyncCancelAll()\n  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll()\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll()\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakCompleted\n  nameWithType: SpeechSynthesizer.SpeakCompleted\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted\n- uid: System.EventHandler{System.Speech.Synthesis.SpeakCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeakCompletedEventArgs>\n  nameWithType: EventHandler<SpeakCompletedEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.SpeakCompletedEventArgs\n    name: SpeakCompletedEventArgs\n    nameWithType: SpeakCompletedEventArgs\n    fullName: SpeakCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakProgress\n  nameWithType: SpeechSynthesizer.SpeakProgress\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress\n- uid: System.EventHandler{System.Speech.Synthesis.SpeakProgressEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeakProgressEventArgs>\n  nameWithType: EventHandler<SpeakProgressEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.SpeakProgressEventArgs\n    name: SpeakProgressEventArgs\n    nameWithType: SpeakProgressEventArgs\n    fullName: SpeakProgressEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakSsml(String)\n  nameWithType: SpeechSynthesizer.SpeakSsml(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(String)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakSsmlAsync(String)\n  nameWithType: SpeechSynthesizer.SpeakSsmlAsync(String)\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(String)\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakStarted\n  nameWithType: SpeechSynthesizer.SpeakStarted\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted\n- uid: System.EventHandler{System.Speech.Synthesis.SpeakStartedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeakStartedEventArgs>\n  nameWithType: EventHandler<SpeakStartedEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.SpeakStartedEventArgs\n    name: SpeakStartedEventArgs\n    nameWithType: SpeakStartedEventArgs\n    fullName: SpeakStartedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.State\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: State\n  nameWithType: SpeechSynthesizer.State\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.State\n- uid: System.Speech.Synthesis.SynthesizerState\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: SynthesizerState\n  nameWithType: SynthesizerState\n  fullName: System.Speech.Synthesis.SynthesizerState\n- uid: System.Speech.Synthesis.SpeechSynthesizer.StateChanged\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: StateChanged\n  nameWithType: SpeechSynthesizer.StateChanged\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.StateChanged\n- uid: System.EventHandler{System.Speech.Synthesis.StateChangedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<StateChangedEventArgs>\n  nameWithType: EventHandler<StateChangedEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.StateChangedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.StateChangedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.StateChangedEventArgs\n    name: StateChangedEventArgs\n    nameWithType: StateChangedEventArgs\n    fullName: StateChangedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: VisemeReached\n  nameWithType: SpeechSynthesizer.VisemeReached\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached\n- uid: System.EventHandler{System.Speech.Synthesis.VisemeReachedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<VisemeReachedEventArgs>\n  nameWithType: EventHandler<VisemeReachedEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.VisemeReachedEventArgs\n    name: VisemeReachedEventArgs\n    nameWithType: VisemeReachedEventArgs\n    fullName: VisemeReachedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Voice\n  nameWithType: SpeechSynthesizer.Voice\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Voice\n- uid: System.Speech.Synthesis.VoiceInfo\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceInfo\n  nameWithType: VoiceInfo\n  fullName: System.Speech.Synthesis.VoiceInfo\n- uid: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: VoiceChange\n  nameWithType: SpeechSynthesizer.VoiceChange\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange\n- uid: System.EventHandler{System.Speech.Synthesis.VoiceChangeEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<VoiceChangeEventArgs>\n  nameWithType: EventHandler<VoiceChangeEventArgs>\n  fullName: System.EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Synthesis.VoiceChangeEventArgs\n    name: VoiceChangeEventArgs\n    nameWithType: VoiceChangeEventArgs\n    fullName: VoiceChangeEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Volume\n  nameWithType: SpeechSynthesizer.Volume\n  fullName: System.Speech.Synthesis.SpeechSynthesizer.Volume\n- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeechSynthesizer\n  nameWithType: SpeechSynthesizer.SpeechSynthesizer\n- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: AddLexicon\n  nameWithType: SpeechSynthesizer.AddLexicon\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Dispose\n  nameWithType: SpeechSynthesizer.Dispose\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Finalize\n  nameWithType: SpeechSynthesizer.Finalize\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: GetCurrentlySpokenPrompt\n  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt\n- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: GetInstalledVoices\n  nameWithType: SpeechSynthesizer.GetInstalledVoices\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Pause\n  nameWithType: SpeechSynthesizer.Pause\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Rate\n  nameWithType: SpeechSynthesizer.Rate\n- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: RemoveLexicon\n  nameWithType: SpeechSynthesizer.RemoveLexicon\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Resume\n  nameWithType: SpeechSynthesizer.Resume\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoice\n  nameWithType: SpeechSynthesizer.SelectVoice\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SelectVoiceByHints\n  nameWithType: SpeechSynthesizer.SelectVoiceByHints\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToAudioStream\n  nameWithType: SpeechSynthesizer.SetOutputToAudioStream\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToDefaultAudioDevice\n  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToNull\n  nameWithType: SpeechSynthesizer.SetOutputToNull\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToWaveFile\n  nameWithType: SpeechSynthesizer.SetOutputToWaveFile\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SetOutputToWaveStream\n  nameWithType: SpeechSynthesizer.SetOutputToWaveStream\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Speak\n  nameWithType: SpeechSynthesizer.Speak\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsync\n  nameWithType: SpeechSynthesizer.SpeakAsync\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsyncCancel\n  nameWithType: SpeechSynthesizer.SpeakAsyncCancel\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakAsyncCancelAll\n  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakSsml\n  nameWithType: SpeechSynthesizer.SpeakSsml\n- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: SpeakSsmlAsync\n  nameWithType: SpeechSynthesizer.SpeakSsmlAsync\n- uid: System.Speech.Synthesis.SpeechSynthesizer.State*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: State\n  nameWithType: SpeechSynthesizer.State\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Voice\n  nameWithType: SpeechSynthesizer.Voice\n- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume*\n  parent: System.Speech.Synthesis.SpeechSynthesizer\n  isExternal: false\n  name: Volume\n  nameWithType: SpeechSynthesizer.Volume\n"}