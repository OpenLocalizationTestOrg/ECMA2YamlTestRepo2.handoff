{"nodes":[{"pos":[3971,3983],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5659,5671],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6683,6695],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6784,6796],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7661,7673],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7724,7736],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8425,8437],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8496,8508],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9257,9269],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9330,9342],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9987,9999],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10776,10788],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11478,11490],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11547,11559],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12277,12289],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12335,12347],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13048,13060],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13930,13942],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15729,15741],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16667,16679],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16738,16750],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17702,17714],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17764,17776],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18733,18745],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18791,18803],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19732,19744],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20736,20748],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20809,20821],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21747,21759],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22658,22670],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23633,23645],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24534,24546],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24603,24615],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26288,26300],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26359,26371],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27273,27285],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27342,27354],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28304,28316],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28378,28390],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29256,29268],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30133,30145],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31058,31070],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31128,31140],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32033,32045],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32943,32955],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  id: SynchronizedReadOnlyCollection`1\n  children:\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection<T>\n  nameWithType: SynchronizedReadOnlyCollection<T>\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class SynchronizedReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IList<T>\n  - System.Collections.IList\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection()\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public SynchronizedReadOnlyCollection ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object syncRoot);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection(Object,IEnumerable<T>)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object syncRoot, System.Collections.Generic.IEnumerable<T> list);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: To be added.\n    - id: list\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  id: '#ctor(System.Object,`0[])'\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: SynchronizedReadOnlyCollection(Object,T[])\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public SynchronizedReadOnlyCollection (object syncRoot, T[] list);\n    parameters:\n    - id: syncRoot\n      type: System.Object\n      description: To be added.\n    - id: list\n      type: T[]\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Contains (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  id: Count\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SynchronizedReadOnlyCollection<T>.Count\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{T}\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int IndexOf (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  id: Items\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: Items\n  nameWithType: SynchronizedReadOnlyCollection<T>.Items\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: protected System.Collections.Generic.IList<T> Items { get; }\n    return:\n      type: System.Collections.Generic.IList{T}\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  id: System#Collections#Generic#ICollection{T}#Add(`0)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<T>.Add (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  id: System#Collections#Generic#ICollection{T}#Clear\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<T>.Clear ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  id: System#Collections#Generic#ICollection{T}#Remove(`0)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<T>.Remove (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32,T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList<T>.Insert (int index, T value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: value\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  id: System#Collections#Generic#IList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList<T>.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Clear()\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList.Clear ();\n    parameters: []\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.RemoveAt(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection()\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection(Object,IEnumerable<T>)\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection(Object,T[])\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])\n- uid: T[]\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: SynchronizedReadOnlyCollection<T>.Count\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Items\n  nameWithType: SynchronizedReadOnlyCollection<T>.Items\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items\n- uid: System.Collections.Generic.IList{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32,T)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Clear()\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.RemoveAt(Int32)\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)\n  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: SynchronizedReadOnlyCollection<T>\n  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Contains\n  nameWithType: SynchronizedReadOnlyCollection<T>.Contains\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: SynchronizedReadOnlyCollection<T>.Count\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Item\n  nameWithType: SynchronizedReadOnlyCollection<T>.Item\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: Items\n  nameWithType: SynchronizedReadOnlyCollection<T>.Items\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.Add\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.Clear\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.Remove\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList<T>.Insert\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList<T>.Item\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IList<T>.RemoveAt\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Clear\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove\n- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*\n  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1\n  isExternal: false\n  name: System.Collections.IList.RemoveAt\n  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt\n"}