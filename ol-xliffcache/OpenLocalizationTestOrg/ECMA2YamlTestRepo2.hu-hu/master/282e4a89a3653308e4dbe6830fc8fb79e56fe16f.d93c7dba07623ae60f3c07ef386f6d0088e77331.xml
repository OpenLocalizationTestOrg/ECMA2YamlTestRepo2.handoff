{"nodes":[{"pos":[597,666],"content":"Provides a way to synchronously or asynchronously execute a delegate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a way to synchronously or asynchronously execute a delegate.","pos":[0,69]}]},{"pos":[3421,3497],"content":"Asynchronously executes the delegate on the thread that created this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously executes the delegate on the thread that created this object.","pos":[0,76]}]},{"pos":[3510,4055],"content":"The `method` delegate is executed on the thread that created the object, instead of the thread on which BeginInvoke was called.       The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.       If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which BeginInvoke was called.","pos":[0,127],"source":"The `method` delegate is executed on the thread that created the object, instead of the thread on which BeginInvoke was called."},{"content":"The delegate is called asynchronously, and this method returns immediately.","pos":[134,209]},{"content":"You can call this method from any thread.","pos":[210,251]},{"content":"If you need the return value from a process started with this method, call &lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt; to get the value.","pos":[252,405],"source":" If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value."},{"content":"If you need to call the delegate synchronously, use the &lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt; method instead.","pos":[412,541],"source":"       If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead."}]},{"pos":[4226,4342],"content":"A &lt;xref:System.Delegate&gt; to a method that takes parameters of the same number and type that are contained in <ph id=\"ph1\">`args`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Delegate> to a method that takes parameters of the same number and type that are contained in `args`."},{"pos":[4405,4585],"content":"An array of type <xref:System.Object> to pass as arguments to the given method. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no arguments are needed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Object&gt; to pass as arguments to the given method.","pos":[0,79],"source":"An array of type <xref:System.Object> to pass as arguments to the given method."},{"content":"This can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no arguments are needed.","pos":[80,180],"source":" This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no arguments are needed."}]},{"pos":[4649,4763],"content":"An <xref:System.IAsyncResult> interface that represents the asynchronous operation started by calling this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; interface that represents the asynchronous operation started by calling this method.","pos":[0,114],"source":"An <xref:System.IAsyncResult> interface that represents the asynchronous operation started by calling this method."}]},{"pos":[5311,5478],"content":"Waits until the process started by calling <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*> completes, and then returns the value generated by the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits until the process started by calling &lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*&gt; completes, and then returns the value generated by the process.","pos":[0,167],"source":"Waits until the process started by calling <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*> completes, and then returns the value generated by the process."}]},{"pos":[5490,5727],"content":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.","pos":[0,237],"nodes":[{"content":"This method gets the return value of the asynchronous operation represented by the &lt;xref:System.IAsyncResult&gt; passed by this interface.","pos":[0,135],"source":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface."},{"content":"If the asynchronous operation has not completed, this method will wait until the result is available.","pos":[136,237]}]}]},{"pos":[5882,6045],"content":"An <xref:System.IAsyncResult> interface that represents the asynchronous operation started by calling <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; interface that represents the asynchronous operation started by calling &lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*&gt;.","pos":[0,163],"source":"An <xref:System.IAsyncResult> interface that represents the asynchronous operation started by calling <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>."}]},{"pos":[6103,6200],"content":"An <xref:System.Object> that represents the return value generated by the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; that represents the return value generated by the asynchronous operation.","pos":[0,97],"source":"An <xref:System.Object> that represents the return value generated by the asynchronous operation."}]},{"pos":[6770,6890],"content":"Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.","pos":[0,120]}]},{"pos":[6903,7254],"content":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.       Use this method when calling a method from a different thread to marshal the call to the proper thread.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.       Use this method when calling a method from a different thread to marshal the call to the proper thread.","pos":[0,349],"nodes":[{"content":"Unlike &lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;, this method operates synchronously, that is, it waits until the process completes before returning.","pos":[0,170],"source":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning."},{"content":"Exceptions raised during the call are propagated back to the caller.","pos":[171,239]},{"content":"Use this method when calling a method from a different thread to marshal the call to the proper thread.","pos":[246,349]}]}]},{"pos":[7414,7516],"content":"A <xref:System.Delegate> that contains a method to call, in the context of the thread for the control.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Delegate&gt; that contains a method to call, in the context of the thread for the control.","pos":[0,102],"source":"A <xref:System.Delegate> that contains a method to call, in the context of the thread for the control."}]},{"pos":[7579,7776],"content":"An array of type <xref:System.Object> that represents the arguments to pass to the given method. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no arguments are needed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Object&gt; that represents the arguments to pass to the given method.","pos":[0,96],"source":"An array of type <xref:System.Object> that represents the arguments to pass to the given method."},{"content":"This can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no arguments are needed.","pos":[97,197],"source":" This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no arguments are needed."}]},{"pos":[7834,8024],"content":"An &lt;xref:System.Object&gt; that represents the return value from the delegate being invoked, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the delegate has no return value.","needQuote":true,"needEscape":true,"source":"An <xref:System.Object> that represents the return value from the delegate being invoked, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the delegate has no return value."},{"pos":[8510,8673],"content":"Gets a value indicating whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*> when calling an object that implements this interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the caller must call &lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke*&gt; when calling an object that implements this interface.","pos":[0,163],"source":"Gets a value indicating whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*> when calling an object that implements this interface."}]},{"pos":[8685,9112],"content":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.","pos":[0,427],"nodes":[{"content":"This property determines whether the caller must call &lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt; when making method calls to an object that implements this interface.","pos":[0,181],"source":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface."},{"content":"Such objects are bound to a specific thread and are not thread-safe.","pos":[182,250]},{"content":"If you are calling a method from a different thread, you must use the &lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt; method to marshal the call to the proper thread.","pos":[251,427],"source":" If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread."}]}]},{"pos":[9230,9446],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the caller must call &lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke*&gt;; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ISynchronizeInvoke\n  id: ISynchronizeInvoke\n  children:\n  - System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  - System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  - System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  - System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  langs:\n  - csharp\n  name: ISynchronizeInvoke\n  nameWithType: ISynchronizeInvoke\n  fullName: System.ComponentModel.ISynchronizeInvoke\n  type: Interface\n  summary: Provides a way to synchronously or asynchronously execute a delegate.\n  remarks: \"The ISynchronizeInvoke interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.  \\n  \\n The ISynchronizeInvoke class provides two ways to invoke a process:  \\n  \\n1.  Asynchronously, by using the [BeginInvoke(Delegate, Object\\\\[\\\\])](assetId:///M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])?qualifyHint=False&autoUpgrade=True) method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.  \\n  \\n2.  Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource> &#124; <xref:System.Security.Permissions.HostProtectionResource>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public interface ISynchronizeInvoke\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  id: BeginInvoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: BeginInvoke(Delegate,Object[])\n  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])\n  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Asynchronously executes the delegate on the thread that created this object.\n  remarks: \"The `method` delegate is executed on the thread that created the object, instead of the thread on which BeginInvoke was called.  \\n  \\n The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.  \\n  \\n If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (Delegate method, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A <xref:System.Delegate> to a method that takes parameters of the same number and type that are contained in `args`.\n    - id: args\n      type: System.Object[]\n      description: An array of type <xref:System.Object> to pass as arguments to the given method. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no arguments are needed.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> interface that represents the asynchronous operation started by calling this method.\n  overload: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  id: EndInvoke(System.IAsyncResult)\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: EndInvoke(IAsyncResult)\n  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)\n  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Waits until the process started by calling <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*> completes, and then returns the value generated by the process.\n  remarks: This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.\n  syntax:\n    content: public object EndInvoke (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> interface that represents the asynchronous operation started by calling <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>.\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that represents the return value generated by the asynchronous operation.\n  overload: System.ComponentModel.ISynchronizeInvoke.EndInvoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  id: Invoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: Invoke(Delegate,Object[])\n  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])\n  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.\n  remarks: \"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.  \\n  \\n Use this method when calling a method from a different thread to marshal the call to the proper thread.\"\n  syntax:\n    content: public object Invoke (Delegate method, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A <xref:System.Delegate> that contains a method to call, in the context of the thread for the control.\n    - id: args\n      type: System.Object[]\n      description: An array of type <xref:System.Object> that represents the arguments to pass to the given method. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no arguments are needed.\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that represents the return value from the delegate being invoked, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the delegate has no return value.\n  overload: System.ComponentModel.ISynchronizeInvoke.Invoke*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  id: InvokeRequired\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: InvokeRequired\n  nameWithType: ISynchronizeInvoke.InvokeRequired\n  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*> when calling an object that implements this interface.\n  remarks: This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.\n  syntax:\n    content: public bool InvokeRequired { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: BeginInvoke(Delegate,Object[])\n  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])\n  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: EndInvoke(IAsyncResult)\n  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)\n  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: Invoke(Delegate,Object[])\n  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])\n  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])\n- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: InvokeRequired\n  nameWithType: ISynchronizeInvoke.InvokeRequired\n  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: BeginInvoke\n  nameWithType: ISynchronizeInvoke.BeginInvoke\n- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: EndInvoke\n  nameWithType: ISynchronizeInvoke.EndInvoke\n- uid: System.ComponentModel.ISynchronizeInvoke.Invoke*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: Invoke\n  nameWithType: ISynchronizeInvoke.Invoke\n- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: InvokeRequired\n  nameWithType: ISynchronizeInvoke.InvokeRequired\n"}