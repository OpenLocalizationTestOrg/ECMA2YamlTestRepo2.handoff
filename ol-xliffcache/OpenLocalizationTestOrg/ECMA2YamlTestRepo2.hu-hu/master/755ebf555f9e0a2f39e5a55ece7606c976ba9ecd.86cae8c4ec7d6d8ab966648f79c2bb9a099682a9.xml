{"nodes":[{"pos":[915,1039],"content":"Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.","pos":[0,124]}]},{"pos":[1728,1892],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specific handle to a parent window.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"></xref> class with the specific handle to a parent window."},{"pos":[2034,2062],"content":"A handle to a parent window.","needQuote":true,"needEscape":true,"nodes":[{"content":"A handle to a parent window.","pos":[0,28]}]},{"pos":[2671,2716],"content":"Gets or sets the handle of the parent window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the handle of the parent window.","pos":[0,45]}]},{"pos":[2837,2866],"content":"Returns <xref:System.IntPtr>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.IntPtr&gt;.","pos":[0,29],"source":"Returns <xref:System.IntPtr>."}]},{"pos":[3697,3754],"content":"Registers the specified delegate for event notifications.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers the specified delegate for event notifications.","pos":[0,57]}]},{"pos":[4003,4057],"content":"The delegate to be registered for event notifications.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate to be registered for event notifications.","pos":[0,54]}]},{"pos":[4116,4283],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is successful; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation is successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4493,4579],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>callback</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5281,5340],"content":"Assigns the window to be the owner of the specified window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Assigns the window to be the owner of the specified window.","pos":[0,59]}]},{"pos":[5562,5584],"content":"The owner of <ph id=\"ph1\">`target`</ph>.","needQuote":true,"needEscape":true,"source":"The owner of `target`."},{"pos":[5655,5698],"content":"The window that is to be owned by <ph id=\"ph1\">`source`</ph>.","needQuote":true,"needEscape":true,"source":"The window that is to be owned by `source`."},{"pos":[5757,5924],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is successful; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation is successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6766,6825],"content":"Unregisters the specified delegate for event notifications.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unregisters the specified delegate for event notifications.","pos":[0,59]}]},{"pos":[7076,7128],"content":"The delegate to be removed from event notifications.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate to be removed from event notifications.","pos":[0,52]}]},{"pos":[7187,7354],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is successful; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation is successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Presentation.Hosting.WindowHelperService\n  id: WindowHelperService\n  children:\n  - System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  - System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  - System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  - System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  - System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  langs:\n  - csharp\n  name: WindowHelperService\n  nameWithType: WindowHelperService\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService\n  type: Class\n  summary: Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.\n  syntax:\n    content: public class WindowHelperService\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: WindowHelperService(IntPtr)\n  nameWithType: WindowHelperService.WindowHelperService(IntPtr)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.WindowHelperService(IntPtr)\n  type: Constructor\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"></xref> class with the specific handle to a parent window.\n  syntax:\n    content: public WindowHelperService (IntPtr hwnd);\n    parameters:\n    - id: hwnd\n      type: System.IntPtr\n      description: A handle to a parent window.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  id: ParentWindowHwnd\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: ParentWindowHwnd\n  nameWithType: WindowHelperService.ParentWindowHwnd\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  type: Property\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Gets or sets the handle of the parent window.\n  syntax:\n    content: public IntPtr ParentWindowHwnd { get; }\n    return:\n      type: System.IntPtr\n      description: Returns <xref:System.IntPtr>.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  id: RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: RegisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Registers the specified delegate for event notifications.\n  syntax:\n    content: public bool RegisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);\n    parameters:\n    - id: callback\n      type: System.Activities.Presentation.Hosting.WindowMessage\n      description: The delegate to be registered for event notifications.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation is successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>callback</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  id: TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: TrySetWindowOwner(DependencyObject,Window)\n  nameWithType: WindowHelperService.TrySetWindowOwner(DependencyObject,Window)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(DependencyObject,Window)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Assigns the window to be the owner of the specified window.\n  syntax:\n    content: public bool TrySetWindowOwner (System.Windows.DependencyObject source, System.Windows.Window target);\n    parameters:\n    - id: source\n      type: System.Windows.DependencyObject\n      description: The owner of `target`.\n    - id: target\n      type: System.Windows.Window\n      description: The window that is to be owned by `source`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation is successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  id: UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: UnregisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Unregisters the specified delegate for event notifications.\n  syntax:\n    content: public bool UnregisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);\n    parameters:\n    - id: callback\n      type: System.Activities.Presentation.Hosting.WindowMessage\n      description: The delegate to be removed from event notifications.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation is successful; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: WindowHelperService(IntPtr)\n  nameWithType: WindowHelperService.WindowHelperService(IntPtr)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.WindowHelperService(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: ParentWindowHwnd\n  nameWithType: WindowHelperService.ParentWindowHwnd\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: RegisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Presentation.Hosting.WindowMessage\n  parent: System.Activities.Presentation.Hosting\n  isExternal: false\n  name: WindowMessage\n  nameWithType: WindowMessage\n  fullName: System.Activities.Presentation.Hosting.WindowMessage\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: TrySetWindowOwner(DependencyObject,Window)\n  nameWithType: WindowHelperService.TrySetWindowOwner(DependencyObject,Window)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(DependencyObject,Window)\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.Window\n  parent: System.Windows\n  isExternal: false\n  name: Window\n  nameWithType: Window\n  fullName: System.Windows.Window\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: UnregisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.#ctor*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: WindowHelperService\n  nameWithType: WindowHelperService.WindowHelperService\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: ParentWindowHwnd\n  nameWithType: WindowHelperService.ParentWindowHwnd\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: RegisterWindowMessageHandler\n  nameWithType: WindowHelperService.RegisterWindowMessageHandler\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: TrySetWindowOwner\n  nameWithType: WindowHelperService.TrySetWindowOwner\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: UnregisterWindowMessageHandler\n  nameWithType: WindowHelperService.UnregisterWindowMessageHandler\n"}