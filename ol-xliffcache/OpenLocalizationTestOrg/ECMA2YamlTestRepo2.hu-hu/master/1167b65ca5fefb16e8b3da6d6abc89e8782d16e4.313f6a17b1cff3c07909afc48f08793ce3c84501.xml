{"nodes":[{"pos":[8153,8378],"content":"Visits each element of an expression tree from a given root expression. If any element changes, the tree is rebuilt back to the root and the new root expression is returned; otherwise the original root expression is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Visits each element of an expression tree from a given root expression. If any element changes, the tree is rebuilt back to the root and the new root expression is returned; otherwise the original root expression is returned.","pos":[0,225],"nodes":[{"content":"Visits each element of an expression tree from a given root expression.","pos":[0,71]},{"content":"If any element changes, the tree is rebuilt back to the root and the new root expression is returned; otherwise the original root expression is returned.","pos":[72,225]}]}]},{"pos":[9179,9297],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.CommandTrees.DefaultExpressionVisitor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Common.CommandTrees.DefaultExpressionVisitor\"></xref> class."},{"pos":[10281,10383],"content":"Represents an event when entering the scope for the expression visitor with specified scope variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an event when entering the scope for the expression visitor with specified scope variables.","pos":[0,102]}]},{"pos":[10737,10771],"content":"The collection of scope variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection of scope variables.","pos":[0,34]}]},{"pos":[11344,11387],"content":"Exits the scope for the expression visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exits the scope for the expression visitor.","pos":[0,43]}]},{"pos":[12342,12411],"content":"Replaces an old expression with a new one for the expression visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Replaces an old expression with a new one for the expression visitor.","pos":[0,69]}]},{"pos":[12717,12736],"content":"The old expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The old expression.","pos":[0,19]}]},{"pos":[12837,12856],"content":"The new expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new expression.","pos":[0,19]}]},{"pos":[13894,13970],"content":"Represents an event when the variable is rebound for the expression visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an event when the variable is rebound for the expression visitor.","pos":[0,76]}]},{"pos":[14313,14342],"content":"The location of the variable.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location of the variable.","pos":[0,29]}]},{"pos":[14455,14507],"content":"The reference of the variable where it is rebounded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reference of the variable where it is rebounded.","pos":[0,52]}]},{"pos":[15198,15260],"content":"Implements the visitor pattern for the logical AND expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the logical AND expression.","pos":[0,62]}]},{"pos":[15529,15556],"content":"The logical AND expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The logical AND expression.","pos":[0,27]}]},{"pos":[15645,15669],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[16358,16478],"content":"Implements the visitor pattern for the invocation of the specified function for each element in the specified input set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the invocation of the specified function for each element in the specified input set.","pos":[0,120]}]},{"pos":[16751,16772],"content":"The APPLY expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The APPLY expression.","pos":[0,21]}]},{"pos":[16861,16885],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[17599,17688],"content":"Implements the visitor pattern for the arithmetic operation applied to numeric arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the arithmetic operation applied to numeric arguments.","pos":[0,89]}]},{"pos":[17971,17997],"content":"The arithmetic expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The arithmetic expression.","pos":[0,26]}]},{"pos":[18086,18110],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[18794,18862],"content":"Implements the visitor pattern for the When, Then, and Else clauses.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the When, Then, and Else clauses.","pos":[0,68]}]},{"pos":[19133,19153],"content":"The case expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The case expression.","pos":[0,20]}]},{"pos":[19242,19266],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[19950,20048],"content":"Implements the visitor pattern for the type conversion of a single argument to the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the type conversion of a single argument to the specified type.","pos":[0,98]}]},{"pos":[20319,20339],"content":"The cast expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cast expression.","pos":[0,20]}]},{"pos":[20428,20452],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[21166,21251],"content":"Implements the visitor pattern for the comparison operation applied to two arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the comparison operation applied to two arguments.","pos":[0,85]}]},{"pos":[21534,21554],"content":"The cast expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cast expression.","pos":[0,20]}]},{"pos":[21643,21667],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[22371,22439],"content":"Implements the visitor pattern for the different kinds of constants.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the different kinds of constants.","pos":[0,68]}]},{"pos":[22718,22742],"content":"The constant expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The constant expression.","pos":[0,24]}]},{"pos":[22831,22855],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[23564,23671],"content":"Implements the visitor pattern for the unconditional join operation between the given collection arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the unconditional join operation between the given collection arguments.","pos":[0,107]}]},{"pos":[23952,23972],"content":"The join expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The join expression.","pos":[0,20]}]},{"pos":[24061,24085],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[24774,24882],"content":"Implements the visitor pattern for the expression that retrieves an entity based on the specified reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the expression that retrieves an entity based on the specified reference.","pos":[0,108]}]},{"pos":[25155,25176],"content":"The DEREF expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DEREF expression.","pos":[0,21]}]},{"pos":[25265,25289],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[25993,26091],"content":"Implements the visitor pattern for the removed duplicate elements from the specified set argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the removed duplicate elements from the specified set argument.","pos":[0,98]}]},{"pos":[26370,26394],"content":"The distinct expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distinct expression.","pos":[0,24]}]},{"pos":[26483,26507],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[27206,27361],"content":"Implements the visitor pattern for the conversion of the specified set argument to a singleton the conversion of the specified set argument to a singleton.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the conversion of the specified set argument to a singleton the conversion of the specified set argument to a singleton.","pos":[0,155]}]},{"pos":[27638,27661],"content":"The element expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element expression.","pos":[0,23]}]},{"pos":[27750,27774],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[28483,28595],"content":"Implements the visitor pattern for the expression that extracts a reference from the underlying entity instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the expression that extracts a reference from the underlying entity instance.","pos":[0,112]}]},{"pos":[28876,28908],"content":"The entity reference expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The entity reference expression.","pos":[0,32]}]},{"pos":[28997,29021],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[29715,29816],"content":"Implements the visitor pattern for the set subtraction operation between the left and right operands.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the set subtraction operation between the left and right operands.","pos":[0,101]}]},{"pos":[30091,30106],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[30195,30219],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[30883,30971],"content":"Implements the visitor pattern for the basic functionality required by expression types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the basic functionality required by expression types.","pos":[0,88]}]},{"pos":[31234,31249],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[31338,31362],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[32056,32134],"content":"Implements the visitor pattern for a predicate applied to filter an input set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a predicate applied to filter an input set.","pos":[0,78]}]},{"pos":[32409,32431],"content":"The filter expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The filter expression.","pos":[0,22]}]},{"pos":[32520,32544],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[33248,33311],"content":"Implements the visitor pattern for an invocation of a function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for an invocation of a function.","pos":[0,63]}]},{"pos":[33590,33614],"content":"The function expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function expression.","pos":[0,24]}]},{"pos":[33703,33727],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[34426,34482],"content":"Implements the visitor pattern for a group by operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a group by operation.","pos":[0,56]}]},{"pos":[34759,34774],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[34863,34887],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[35596,35698],"content":"Implements the visitor pattern for the set intersection operation between the left and right operands.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the set intersection operation between the left and right operands.","pos":[0,102]}]},{"pos":[35979,35994],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[36083,36107],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[36806,36901],"content":"Implements the visitor pattern for an empty set determination applied to a single set argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for an empty set determination applied to a single set argument.","pos":[0,95]}]},{"pos":[37178,37193],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[37282,37306],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[38000,38087],"content":"Implements the visitor pattern for the null determination applied to a single argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the null determination applied to a single argument.","pos":[0,87]}]},{"pos":[38362,38377],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[38466,38490],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[39174,39277],"content":"Implements the visitor pattern for the type comparison of a single argument against the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the type comparison of a single argument against the specified type.","pos":[0,103]}]},{"pos":[39548,39563],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[39652,39676],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[40360,40517],"content":"Implements the visitor pattern for an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.","pos":[0,157]}]},{"pos":[40788,40803],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[40892,40916],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[41610,41731],"content":"Implements the visitor pattern for the application of a lambda function to arguments represented by DbExpression objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the application of a lambda function to arguments represented by DbExpression objects.","pos":[0,121]}]},{"pos":[42006,42021],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[42110,42134],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[42818,42934],"content":"Implements the visitor pattern for a string comparison against the specified pattern with an optional escape string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a string comparison against the specified pattern with an optional escape string.","pos":[0,116]}]},{"pos":[43205,43220],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[43309,43333],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[44022,44155],"content":"Implements the visitor pattern for the restriction of the number of elements in the argument collection to the specified limit value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the restriction of the number of elements in the argument collection to the specified limit value.","pos":[0,133]}]},{"pos":[44428,44443],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[44532,44556],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[45275,45393],"content":"Implements the visitor pattern for the construction of a new instance of a given type, including set and record types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the construction of a new instance of a given type, including set and record types.","pos":[0,118]}]},{"pos":[45678,45693],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[45782,45806],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[46485,46565],"content":"Implements the visitor pattern for the logical NOT of a single Boolean argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the logical NOT of a single Boolean argument.","pos":[0,80]}]},{"pos":[46834,46849],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[46938,46962],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[47646,47717],"content":"Implements the visitor pattern for a reference to a typed null literal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a reference to a typed null literal.","pos":[0,71]}]},{"pos":[47988,48003],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[48092,48116],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[48810,48921],"content":"Implements the visitor pattern for the retrieval of elements of the specified type from the given set argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the retrieval of elements of the specified type from the given set argument.","pos":[0,111]}]},{"pos":[49196,49211],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[49300,49324],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[49998,50073],"content":"Implements the visitor pattern for the logical OR of two Boolean arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the logical OR of two Boolean arguments.","pos":[0,75]}]},{"pos":[50340,50355],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[50444,50468],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[51222,51343],"content":"Implements the visitor pattern for a reference to a parameter declared on the command tree that contains this expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a reference to a parameter declared on the command tree that contains this expression.","pos":[0,121]}]},{"pos":[51642,51657],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[51746,51770],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[52469,52570],"content":"Implements the visitor pattern for the projection of a given input set over the specified expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the projection of a given input set over the specified expression.","pos":[0,101]}]},{"pos":[52847,52862],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[52951,52975],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[53679,53746],"content":"Implements the visitor pattern for retrieving an instance property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for retrieving an instance property.","pos":[0,67]}]},{"pos":[54025,54040],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[54129,54153],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[54867,54992],"content":"Implements the visitor pattern for a quantifier operation of the specified kind over the elements of the specified input set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a quantifier operation of the specified kind over the elements of the specified input set.","pos":[0,125]}]},{"pos":[55275,55290],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[55379,55403],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[56082,56188],"content":"Implements the visitor pattern for a strongly typed reference to a specific instance within an entity set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a strongly typed reference to a specific instance within an entity set.","pos":[0,106]}]},{"pos":[56457,56472],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[56561,56585],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[57279,57381],"content":"Implements the visitor pattern for the retrieval of the key value from the underlying reference value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the retrieval of the key value from the underlying reference value.","pos":[0,102]}]},{"pos":[57656,57671],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[57760,57784],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[58558,58626],"content":"Implements the visitor pattern for the navigation of a relationship.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the navigation of a relationship.","pos":[0,68]}]},{"pos":[58933,58948],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[59037,59061],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[59745,59863],"content":"Implements the visitor pattern for a scan over an entity set or relationship set, as indicated by the Target property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a scan over an entity set or relationship set, as indicated by the Target property.","pos":[0,118]}]},{"pos":[60134,60149],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[60238,60262],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[60946,61001],"content":"Implements the visitor pattern for the skip expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the skip expression.","pos":[0,55]}]},{"pos":[61272,61287],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[61376,61400],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[62084,62173],"content":"Implements the visitor pattern for a sort key that can be used as part of the sort order.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a sort key that can be used as part of the sort order.","pos":[0,89]}]},{"pos":[62444,62459],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[62548,62572],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[63261,63358],"content":"Implements the visitor pattern for a type conversion operation applied to a polymorphic argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a type conversion operation applied to a polymorphic argument.","pos":[0,97]}]},{"pos":[63631,63646],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[63735,63759],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[64463,64558],"content":"Implements the visitor pattern for the set union operation between the left and right operands.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the set union operation between the left and right operands.","pos":[0,95]}]},{"pos":[64837,64852],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[64941,64965],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[65714,65802],"content":"Implements the visitor pattern for a reference to a variable that is currently in scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for a reference to a variable that is currently in scope.","pos":[0,88]}]},{"pos":[66099,66114],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[66203,66227],"content":"The implemented visitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor.","pos":[0,24]}]},{"pos":[66931,66980],"content":"Implements the visitor pattern for the aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the aggregate.","pos":[0,49]}]},{"pos":[67249,67263],"content":"The aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The aggregate.","pos":[0,14]}]},{"pos":[67351,67383],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[68092,68142],"content":"Implements the visitor pattern for the entity set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the entity set.","pos":[0,50]}]},{"pos":[68396,68411],"content":"The entity set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The entity set.","pos":[0,15]}]},{"pos":[68494,68526],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[69249,69299],"content":"Implements the visitor pattern for the expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the expression.","pos":[0,50]}]},{"pos":[69574,69589],"content":"The expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression.","pos":[0,15]}]},{"pos":[69678,69710],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[70504,70558],"content":"Implements the visitor pattern for expression binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for expression binding.","pos":[0,54]}]},{"pos":[70855,70878],"content":"The expression binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression binding.","pos":[0,23]}]},{"pos":[70974,71006],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[71916,71979],"content":"Implements the visitor pattern for the expression binding list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the expression binding list.","pos":[0,63]}]},{"pos":[72376,72404],"content":"The expression binding list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression binding list.","pos":[0,28]}]},{"pos":[72534,72566],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[73410,73465],"content":"Implements the visitor pattern for the expression list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the expression list.","pos":[0,55]}]},{"pos":[73834,73854],"content":"The expression list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression list.","pos":[0,20]}]},{"pos":[73977,74009],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[74708,74756],"content":"Implements the visitor pattern for the function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the function.","pos":[0,48]}]},{"pos":[75017,75039],"content":"The function metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"The function metadata.","pos":[0,22]}]},{"pos":[75120,75152],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[75944,76002],"content":"Implements the visitor pattern for the function aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the function aggregate.","pos":[0,58]}]},{"pos":[76303,76317],"content":"The aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The aggregate.","pos":[0,14]}]},{"pos":[76413,76445],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[77216,77271],"content":"Implements the visitor pattern for the group aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the group aggregate.","pos":[0,55]}]},{"pos":[77560,77574],"content":"The aggregate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The aggregate.","pos":[0,14]}]},{"pos":[77667,77699],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[78547,78611],"content":"Implements the visitor pattern for the group expression binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the group expression binding.","pos":[0,64]}]},{"pos":[78928,78940],"content":"The binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The binding.","pos":[0,12]}]},{"pos":[79041,79073],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[79769,79824],"content":"Implements the visitor pattern for the Lambda function.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the Lambda function.","pos":[0,55]}]},{"pos":[80075,80095],"content":"The lambda function.","needQuote":true,"needEscape":true,"nodes":[{"content":"The lambda function.","pos":[0,20]}]},{"pos":[80180,80212],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[80932,80983],"content":"Implements the visitor pattern for the sort clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the sort clause.","pos":[0,51]}]},{"pos":[81250,81266],"content":"The sort clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"The sort clause.","pos":[0,16]}]},{"pos":[81355,81387],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[82195,82245],"content":"Implements the visitor pattern for the sort order.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the sort order.","pos":[0,50]}]},{"pos":[82619,82634],"content":"The sort order.","needQuote":true,"needEscape":true,"nodes":[{"content":"The sort order.","pos":[0,15]}]},{"pos":[82757,82789],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[83443,83487],"content":"Implements the visitor pattern for the type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the type.","pos":[0,44]}]},{"pos":[83708,83717],"content":"The type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type.","pos":[0,9]}]},{"pos":[83794,83826],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]},{"pos":[84510,84560],"content":"Implements the visitor pattern for the type usage.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the visitor pattern for the type usage.","pos":[0,50]}]},{"pos":[84792,84801],"content":"The type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type.","pos":[0,9]}]},{"pos":[84880,84912],"content":"The implemented visitor pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implemented visitor pattern.","pos":[0,32]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  id: DefaultExpressionVisitor\n  children:\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Common.CommandTrees.DbAggregate)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Common.CommandTrees.DbExpression)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Common.CommandTrees.DbExpressionBinding)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding})\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression})\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Metadata.Edm.EdmFunction)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Common.CommandTrees.DbFunctionAggregate)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Common.CommandTrees.DbGroupAggregate)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Common.CommandTrees.DbGroupExpressionBinding)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Common.CommandTrees.DbLambda)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Common.CommandTrees.DbSortClause)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Metadata.Edm.EdmType)\n  - System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)\n  langs:\n  - csharp\n  name: DefaultExpressionVisitor\n  nameWithType: DefaultExpressionVisitor\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  type: Class\n  summary: Visits each element of an expression tree from a given root expression. If any element changes, the tree is rebuilt back to the root and the new root expression is returned; otherwise the original root expression is returned.\n  syntax:\n    content: 'public class DefaultExpressionVisitor : System.Data.Common.CommandTrees.DbExpressionVisitor<System.Data.Common.CommandTrees.DbExpression>'\n  inheritance:\n  - System.Object\n  - System.Data.Common.CommandTrees.DbExpressionVisitor`1\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: DefaultExpressionVisitor()\n  nameWithType: DefaultExpressionVisitor.DefaultExpressionVisitor()\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.DefaultExpressionVisitor()\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.CommandTrees.DefaultExpressionVisitor\"></xref> class.\n  syntax:\n    content: protected DefaultExpressionVisitor ();\n    parameters: []\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})\n  id: OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: OnEnterScope(IEnumerable<DbVariableReferenceExpression>)\n  nameWithType: DefaultExpressionVisitor.OnEnterScope(IEnumerable<DbVariableReferenceExpression>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(IEnumerable<DbVariableReferenceExpression>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Represents an event when entering the scope for the expression visitor with specified scope variables.\n  syntax:\n    content: protected virtual void OnEnterScope (System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbVariableReferenceExpression> scopeVariables);\n    parameters:\n    - id: scopeVariables\n      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression}\n      description: The collection of scope variables.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope\n  id: OnExitScope\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: OnExitScope()\n  nameWithType: DefaultExpressionVisitor.OnExitScope()\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Exits the scope for the expression visitor.\n  syntax:\n    content: protected virtual void OnExitScope ();\n    parameters: []\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  id: OnExpressionReplaced(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: OnExpressionReplaced(DbExpression,DbExpression)\n  nameWithType: DefaultExpressionVisitor.OnExpressionReplaced(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(DbExpression,DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Replaces an old expression with a new one for the expression visitor.\n  syntax:\n    content: protected virtual void OnExpressionReplaced (System.Data.Common.CommandTrees.DbExpression oldExpression, System.Data.Common.CommandTrees.DbExpression newExpression);\n    parameters:\n    - id: oldExpression\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The old expression.\n    - id: newExpression\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The new expression.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  id: OnVariableRebound(System.Data.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: OnVariableRebound(DbVariableReferenceExpression,DbVariableReferenceExpression)\n  nameWithType: DefaultExpressionVisitor.OnVariableRebound(DbVariableReferenceExpression,DbVariableReferenceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(DbVariableReferenceExpression,DbVariableReferenceExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Represents an event when the variable is rebound for the expression visitor.\n  syntax:\n    content: protected virtual void OnVariableRebound (System.Data.Common.CommandTrees.DbVariableReferenceExpression fromVarRef, System.Data.Common.CommandTrees.DbVariableReferenceExpression toVarRef);\n    parameters:\n    - id: fromVarRef\n      type: System.Data.Common.CommandTrees.DbVariableReferenceExpression\n      description: The location of the variable.\n    - id: toVarRef\n      type: System.Data.Common.CommandTrees.DbVariableReferenceExpression\n      description: The reference of the variable where it is rebounded.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbAndExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbAndExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbAndExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbAndExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the logical AND expression.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbAndExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbAndExpression\n      description: The logical AND expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbApplyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbApplyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbApplyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbApplyExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the invocation of the specified function for each element in the specified input set.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbApplyExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbApplyExpression\n      description: The APPLY expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbArithmeticExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbArithmeticExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbArithmeticExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the arithmetic operation applied to numeric arguments.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbArithmeticExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbArithmeticExpression\n      description: The arithmetic expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbCaseExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbCaseExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbCaseExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbCaseExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the When, Then, and Else clauses.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbCaseExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbCaseExpression\n      description: The case expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbCastExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbCastExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbCastExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbCastExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the type conversion of a single argument to the specified type.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbCastExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbCastExpression\n      description: The cast expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbComparisonExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbComparisonExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbComparisonExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbComparisonExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the comparison operation applied to two arguments.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbComparisonExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbComparisonExpression\n      description: The cast expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbConstantExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbConstantExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbConstantExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbConstantExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the different kinds of constants.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbConstantExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbConstantExpression\n      description: The constant expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbCrossJoinExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbCrossJoinExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbCrossJoinExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the unconditional join operation between the given collection arguments.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbCrossJoinExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbCrossJoinExpression\n      description: The join expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbDerefExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbDerefExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbDerefExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbDerefExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the expression that retrieves an entity based on the specified reference.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbDerefExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbDerefExpression\n      description: The DEREF expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbDistinctExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbDistinctExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbDistinctExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbDistinctExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the removed duplicate elements from the specified set argument.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbDistinctExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbDistinctExpression\n      description: The distinct expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbElementExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbElementExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbElementExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbElementExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the conversion of the specified set argument to a singleton the conversion of the specified set argument to a singleton.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbElementExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbElementExpression\n      description: The element expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbEntityRefExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbEntityRefExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbEntityRefExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the expression that extracts a reference from the underlying entity instance.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbEntityRefExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbEntityRefExpression\n      description: The entity reference expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbExceptExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbExceptExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbExceptExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbExceptExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the set subtraction operation between the left and right operands.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbExceptExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbExceptExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the basic functionality required by expression types.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbFilterExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbFilterExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbFilterExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbFilterExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a predicate applied to filter an input set.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbFilterExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbFilterExpression\n      description: The filter expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbFunctionExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbFunctionExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbFunctionExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbFunctionExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for an invocation of a function.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbFunctionExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbFunctionExpression\n      description: The function expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbGroupByExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbGroupByExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbGroupByExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbGroupByExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a group by operation.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbGroupByExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbGroupByExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbIntersectExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbIntersectExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIntersectExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIntersectExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the set intersection operation between the left and right operands.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbIntersectExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbIntersectExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbIsEmptyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIsEmptyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIsEmptyExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for an empty set determination applied to a single set argument.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbIsEmptyExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbIsEmptyExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbIsNullExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbIsNullExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIsNullExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIsNullExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the null determination applied to a single argument.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbIsNullExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbIsNullExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbIsOfExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbIsOfExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIsOfExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIsOfExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the type comparison of a single argument against the specified type.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbIsOfExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbIsOfExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbJoinExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbJoinExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbJoinExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbJoinExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbJoinExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbJoinExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbLambdaExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbLambdaExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbLambdaExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbLambdaExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the application of a lambda function to arguments represented by DbExpression objects.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbLambdaExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbLambdaExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbLikeExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbLikeExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbLikeExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbLikeExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a string comparison against the specified pattern with an optional escape string.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbLikeExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbLikeExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbLimitExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbLimitExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbLimitExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbLimitExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the restriction of the number of elements in the argument collection to the specified limit value.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbLimitExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbLimitExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbNewInstanceExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbNewInstanceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbNewInstanceExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the construction of a new instance of a given type, including set and record types.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbNewInstanceExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbNewInstanceExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbNotExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbNotExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbNotExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbNotExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the logical NOT of a single Boolean argument.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbNotExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbNotExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbNullExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbNullExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbNullExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbNullExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a reference to a typed null literal.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbNullExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbNullExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbOfTypeExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbOfTypeExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbOfTypeExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the retrieval of elements of the specified type from the given set argument.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbOfTypeExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbOfTypeExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbOrExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbOrExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbOrExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbOrExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the logical OR of two Boolean arguments.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbOrExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbOrExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbParameterReferenceExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbParameterReferenceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbParameterReferenceExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a reference to a parameter declared on the command tree that contains this expression.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbParameterReferenceExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbParameterReferenceExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbProjectExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbProjectExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbProjectExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbProjectExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the projection of a given input set over the specified expression.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbProjectExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbProjectExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbPropertyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbPropertyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbPropertyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbPropertyExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for retrieving an instance property.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbPropertyExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbPropertyExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbQuantifierExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbQuantifierExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbQuantifierExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a quantifier operation of the specified kind over the elements of the specified input set.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbQuantifierExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbQuantifierExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbRefExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbRefExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbRefExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbRefExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a strongly typed reference to a specific instance within an entity set.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbRefExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbRefExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbRefKeyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbRefKeyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbRefKeyExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the retrieval of the key value from the underlying reference value.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbRefKeyExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbRefKeyExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbRelationshipNavigationExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbRelationshipNavigationExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbRelationshipNavigationExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the navigation of a relationship.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbRelationshipNavigationExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbScanExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbScanExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbScanExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbScanExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a scan over an entity set or relationship set, as indicated by the Target property.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbScanExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbScanExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbSkipExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbSkipExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbSkipExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbSkipExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the skip expression.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbSkipExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbSkipExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbSortExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbSortExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbSortExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbSortExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a sort key that can be used as part of the sort order.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbSortExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbSortExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbTreatExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbTreatExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbTreatExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbTreatExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a type conversion operation applied to a polymorphic argument.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbTreatExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbTreatExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbUnionAllExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbUnionAllExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbUnionAllExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the set union operation between the left and right operands.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbUnionAllExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbUnionAllExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  id: Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: Visit(DbVariableReferenceExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbVariableReferenceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbVariableReferenceExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for a reference to a variable that is currently in scope.\n  syntax:\n    content: public override System.Data.Common.CommandTrees.DbExpression Visit (System.Data.Common.CommandTrees.DbVariableReferenceExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbVariableReferenceExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Common.CommandTrees.DbAggregate)\n  id: VisitAggregate(System.Data.Common.CommandTrees.DbAggregate)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitAggregate(DbAggregate)\n  nameWithType: DefaultExpressionVisitor.VisitAggregate(DbAggregate)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(DbAggregate)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the aggregate.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbAggregate VisitAggregate (System.Data.Common.CommandTrees.DbAggregate aggregate);\n    parameters:\n    - id: aggregate\n      type: System.Data.Common.CommandTrees.DbAggregate\n      description: The aggregate.\n    return:\n      type: System.Data.Common.CommandTrees.DbAggregate\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)\n  id: VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitEntitySet(EntitySetBase)\n  nameWithType: DefaultExpressionVisitor.VisitEntitySet(EntitySetBase)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(EntitySetBase)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the entity set.\n  syntax:\n    content: protected virtual System.Data.Metadata.Edm.EntitySetBase VisitEntitySet (System.Data.Metadata.Edm.EntitySetBase entitySet);\n    parameters:\n    - id: entitySet\n      type: System.Data.Metadata.Edm.EntitySetBase\n      description: The entity set.\n    return:\n      type: System.Data.Metadata.Edm.EntitySetBase\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Common.CommandTrees.DbExpression)\n  id: VisitExpression(System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitExpression(DbExpression)\n  nameWithType: DefaultExpressionVisitor.VisitExpression(DbExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(DbExpression)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the expression.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbExpression VisitExpression (System.Data.Common.CommandTrees.DbExpression expression);\n    parameters:\n    - id: expression\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The expression.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpression\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Common.CommandTrees.DbExpressionBinding)\n  id: VisitExpressionBinding(System.Data.Common.CommandTrees.DbExpressionBinding)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitExpressionBinding(DbExpressionBinding)\n  nameWithType: DefaultExpressionVisitor.VisitExpressionBinding(DbExpressionBinding)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(DbExpressionBinding)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for expression binding.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbExpressionBinding VisitExpressionBinding (System.Data.Common.CommandTrees.DbExpressionBinding binding);\n    parameters:\n    - id: binding\n      type: System.Data.Common.CommandTrees.DbExpressionBinding\n      description: The expression binding.\n    return:\n      type: System.Data.Common.CommandTrees.DbExpressionBinding\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding})\n  id: VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitExpressionBindingList(IList<DbExpressionBinding>)\n  nameWithType: DefaultExpressionVisitor.VisitExpressionBindingList(IList<DbExpressionBinding>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(IList<DbExpressionBinding>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the expression binding list.\n  syntax:\n    content: protected virtual System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbExpressionBinding> VisitExpressionBindingList (System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbExpressionBinding> list);\n    parameters:\n    - id: list\n      type: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding}\n      description: The expression binding list.\n    return:\n      type: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding}\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression})\n  id: VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitExpressionList(IList<DbExpression>)\n  nameWithType: DefaultExpressionVisitor.VisitExpressionList(IList<DbExpression>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(IList<DbExpression>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the expression list.\n  syntax:\n    content: protected virtual System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbExpression> VisitExpressionList (System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbExpression> list);\n    parameters:\n    - id: list\n      type: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression}\n      description: The expression list.\n    return:\n      type: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression}\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Metadata.Edm.EdmFunction)\n  id: VisitFunction(System.Data.Metadata.Edm.EdmFunction)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitFunction(EdmFunction)\n  nameWithType: DefaultExpressionVisitor.VisitFunction(EdmFunction)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(EdmFunction)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the function.\n  syntax:\n    content: protected virtual System.Data.Metadata.Edm.EdmFunction VisitFunction (System.Data.Metadata.Edm.EdmFunction functionMetadata);\n    parameters:\n    - id: functionMetadata\n      type: System.Data.Metadata.Edm.EdmFunction\n      description: The function metadata.\n    return:\n      type: System.Data.Metadata.Edm.EdmFunction\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Common.CommandTrees.DbFunctionAggregate)\n  id: VisitFunctionAggregate(System.Data.Common.CommandTrees.DbFunctionAggregate)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitFunctionAggregate(DbFunctionAggregate)\n  nameWithType: DefaultExpressionVisitor.VisitFunctionAggregate(DbFunctionAggregate)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(DbFunctionAggregate)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the function aggregate.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbFunctionAggregate VisitFunctionAggregate (System.Data.Common.CommandTrees.DbFunctionAggregate aggregate);\n    parameters:\n    - id: aggregate\n      type: System.Data.Common.CommandTrees.DbFunctionAggregate\n      description: The aggregate.\n    return:\n      type: System.Data.Common.CommandTrees.DbFunctionAggregate\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Common.CommandTrees.DbGroupAggregate)\n  id: VisitGroupAggregate(System.Data.Common.CommandTrees.DbGroupAggregate)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitGroupAggregate(DbGroupAggregate)\n  nameWithType: DefaultExpressionVisitor.VisitGroupAggregate(DbGroupAggregate)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(DbGroupAggregate)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the group aggregate.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbGroupAggregate VisitGroupAggregate (System.Data.Common.CommandTrees.DbGroupAggregate aggregate);\n    parameters:\n    - id: aggregate\n      type: System.Data.Common.CommandTrees.DbGroupAggregate\n      description: The aggregate.\n    return:\n      type: System.Data.Common.CommandTrees.DbGroupAggregate\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Common.CommandTrees.DbGroupExpressionBinding)\n  id: VisitGroupExpressionBinding(System.Data.Common.CommandTrees.DbGroupExpressionBinding)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitGroupExpressionBinding(DbGroupExpressionBinding)\n  nameWithType: DefaultExpressionVisitor.VisitGroupExpressionBinding(DbGroupExpressionBinding)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(DbGroupExpressionBinding)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the group expression binding.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbGroupExpressionBinding VisitGroupExpressionBinding (System.Data.Common.CommandTrees.DbGroupExpressionBinding binding);\n    parameters:\n    - id: binding\n      type: System.Data.Common.CommandTrees.DbGroupExpressionBinding\n      description: The binding.\n    return:\n      type: System.Data.Common.CommandTrees.DbGroupExpressionBinding\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Common.CommandTrees.DbLambda)\n  id: VisitLambda(System.Data.Common.CommandTrees.DbLambda)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitLambda(DbLambda)\n  nameWithType: DefaultExpressionVisitor.VisitLambda(DbLambda)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(DbLambda)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the Lambda function.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbLambda VisitLambda (System.Data.Common.CommandTrees.DbLambda lambda);\n    parameters:\n    - id: lambda\n      type: System.Data.Common.CommandTrees.DbLambda\n      description: The lambda function.\n    return:\n      type: System.Data.Common.CommandTrees.DbLambda\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Common.CommandTrees.DbSortClause)\n  id: VisitSortClause(System.Data.Common.CommandTrees.DbSortClause)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitSortClause(DbSortClause)\n  nameWithType: DefaultExpressionVisitor.VisitSortClause(DbSortClause)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(DbSortClause)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the sort clause.\n  syntax:\n    content: protected virtual System.Data.Common.CommandTrees.DbSortClause VisitSortClause (System.Data.Common.CommandTrees.DbSortClause clause);\n    parameters:\n    - id: clause\n      type: System.Data.Common.CommandTrees.DbSortClause\n      description: The sort clause.\n    return:\n      type: System.Data.Common.CommandTrees.DbSortClause\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})\n  id: VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitSortOrder(IList<DbSortClause>)\n  nameWithType: DefaultExpressionVisitor.VisitSortOrder(IList<DbSortClause>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(IList<DbSortClause>)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the sort order.\n  syntax:\n    content: protected virtual System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbSortClause> VisitSortOrder (System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbSortClause> sortOrder);\n    parameters:\n    - id: sortOrder\n      type: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause}\n      description: The sort order.\n    return:\n      type: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause}\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Metadata.Edm.EdmType)\n  id: VisitType(System.Data.Metadata.Edm.EdmType)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitType(EdmType)\n  nameWithType: DefaultExpressionVisitor.VisitType(EdmType)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(EdmType)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the type.\n  syntax:\n    content: protected virtual System.Data.Metadata.Edm.EdmType VisitType (System.Data.Metadata.Edm.EdmType type);\n    parameters:\n    - id: type\n      type: System.Data.Metadata.Edm.EdmType\n      description: The type.\n    return:\n      type: System.Data.Metadata.Edm.EdmType\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)\n  id: VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  langs:\n  - csharp\n  name: VisitTypeUsage(TypeUsage)\n  nameWithType: DefaultExpressionVisitor.VisitTypeUsage(TypeUsage)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(TypeUsage)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common.CommandTrees\n  summary: Implements the visitor pattern for the type usage.\n  syntax:\n    content: protected virtual System.Data.Metadata.Edm.TypeUsage VisitTypeUsage (System.Data.Metadata.Edm.TypeUsage type);\n    parameters:\n    - id: type\n      type: System.Data.Metadata.Edm.TypeUsage\n      description: The type.\n    return:\n      type: System.Data.Metadata.Edm.TypeUsage\n      description: The implemented visitor pattern.\n  overload: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.CommandTrees.DbExpressionVisitor`1\n  isExternal: false\n  name: System.Data.Common.CommandTrees.DbExpressionVisitor<System.Data.Common.CommandTrees.DbExpression>\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: DefaultExpressionVisitor()\n  nameWithType: DefaultExpressionVisitor.DefaultExpressionVisitor()\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.DefaultExpressionVisitor()\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnEnterScope(IEnumerable<DbVariableReferenceExpression>)\n  nameWithType: DefaultExpressionVisitor.OnEnterScope(IEnumerable<DbVariableReferenceExpression>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(IEnumerable<DbVariableReferenceExpression>)\n- uid: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<DbVariableReferenceExpression>\n  nameWithType: IEnumerable<DbVariableReferenceExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbVariableReferenceExpression>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Data.Common.CommandTrees.DbVariableReferenceExpression>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Common.CommandTrees.DbVariableReferenceExpression\n    name: DbVariableReferenceExpression\n    nameWithType: DbVariableReferenceExpression\n    fullName: DbVariableReferenceExpression\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnExitScope()\n  nameWithType: DefaultExpressionVisitor.OnExitScope()\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope()\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnExpressionReplaced(DbExpression,DbExpression)\n  nameWithType: DefaultExpressionVisitor.OnExpressionReplaced(DbExpression,DbExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(DbExpression,DbExpression)\n- uid: System.Data.Common.CommandTrees.DbExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbExpression\n  nameWithType: DbExpression\n  fullName: System.Data.Common.CommandTrees.DbExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnVariableRebound(DbVariableReferenceExpression,DbVariableReferenceExpression)\n  nameWithType: DefaultExpressionVisitor.OnVariableRebound(DbVariableReferenceExpression,DbVariableReferenceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(DbVariableReferenceExpression,DbVariableReferenceExpression)\n- uid: System.Data.Common.CommandTrees.DbVariableReferenceExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbVariableReferenceExpression\n  nameWithType: DbVariableReferenceExpression\n  fullName: System.Data.Common.CommandTrees.DbVariableReferenceExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbAndExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbAndExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbAndExpression)\n- uid: System.Data.Common.CommandTrees.DbAndExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbAndExpression\n  nameWithType: DbAndExpression\n  fullName: System.Data.Common.CommandTrees.DbAndExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbApplyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbApplyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbApplyExpression)\n- uid: System.Data.Common.CommandTrees.DbApplyExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbApplyExpression\n  nameWithType: DbApplyExpression\n  fullName: System.Data.Common.CommandTrees.DbApplyExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbArithmeticExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbArithmeticExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbArithmeticExpression)\n- uid: System.Data.Common.CommandTrees.DbArithmeticExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbArithmeticExpression\n  nameWithType: DbArithmeticExpression\n  fullName: System.Data.Common.CommandTrees.DbArithmeticExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbCaseExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbCaseExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbCaseExpression)\n- uid: System.Data.Common.CommandTrees.DbCaseExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbCaseExpression\n  nameWithType: DbCaseExpression\n  fullName: System.Data.Common.CommandTrees.DbCaseExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbCastExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbCastExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbCastExpression)\n- uid: System.Data.Common.CommandTrees.DbCastExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbCastExpression\n  nameWithType: DbCastExpression\n  fullName: System.Data.Common.CommandTrees.DbCastExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbComparisonExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbComparisonExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbComparisonExpression)\n- uid: System.Data.Common.CommandTrees.DbComparisonExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbComparisonExpression\n  nameWithType: DbComparisonExpression\n  fullName: System.Data.Common.CommandTrees.DbComparisonExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbConstantExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbConstantExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbConstantExpression)\n- uid: System.Data.Common.CommandTrees.DbConstantExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbConstantExpression\n  nameWithType: DbConstantExpression\n  fullName: System.Data.Common.CommandTrees.DbConstantExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbCrossJoinExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbCrossJoinExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbCrossJoinExpression)\n- uid: System.Data.Common.CommandTrees.DbCrossJoinExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbCrossJoinExpression\n  nameWithType: DbCrossJoinExpression\n  fullName: System.Data.Common.CommandTrees.DbCrossJoinExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbDerefExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbDerefExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbDerefExpression)\n- uid: System.Data.Common.CommandTrees.DbDerefExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbDerefExpression\n  nameWithType: DbDerefExpression\n  fullName: System.Data.Common.CommandTrees.DbDerefExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbDistinctExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbDistinctExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbDistinctExpression)\n- uid: System.Data.Common.CommandTrees.DbDistinctExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbDistinctExpression\n  nameWithType: DbDistinctExpression\n  fullName: System.Data.Common.CommandTrees.DbDistinctExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbElementExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbElementExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbElementExpression)\n- uid: System.Data.Common.CommandTrees.DbElementExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbElementExpression\n  nameWithType: DbElementExpression\n  fullName: System.Data.Common.CommandTrees.DbElementExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbEntityRefExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbEntityRefExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbEntityRefExpression)\n- uid: System.Data.Common.CommandTrees.DbEntityRefExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbEntityRefExpression\n  nameWithType: DbEntityRefExpression\n  fullName: System.Data.Common.CommandTrees.DbEntityRefExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbExceptExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbExceptExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbExceptExpression)\n- uid: System.Data.Common.CommandTrees.DbExceptExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbExceptExpression\n  nameWithType: DbExceptExpression\n  fullName: System.Data.Common.CommandTrees.DbExceptExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbExpression)\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbFilterExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbFilterExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbFilterExpression)\n- uid: System.Data.Common.CommandTrees.DbFilterExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbFilterExpression\n  nameWithType: DbFilterExpression\n  fullName: System.Data.Common.CommandTrees.DbFilterExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbFunctionExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbFunctionExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbFunctionExpression)\n- uid: System.Data.Common.CommandTrees.DbFunctionExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbFunctionExpression\n  nameWithType: DbFunctionExpression\n  fullName: System.Data.Common.CommandTrees.DbFunctionExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbGroupByExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbGroupByExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbGroupByExpression)\n- uid: System.Data.Common.CommandTrees.DbGroupByExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbGroupByExpression\n  nameWithType: DbGroupByExpression\n  fullName: System.Data.Common.CommandTrees.DbGroupByExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbIntersectExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIntersectExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIntersectExpression)\n- uid: System.Data.Common.CommandTrees.DbIntersectExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbIntersectExpression\n  nameWithType: DbIntersectExpression\n  fullName: System.Data.Common.CommandTrees.DbIntersectExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbIsEmptyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIsEmptyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIsEmptyExpression)\n- uid: System.Data.Common.CommandTrees.DbIsEmptyExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbIsEmptyExpression\n  nameWithType: DbIsEmptyExpression\n  fullName: System.Data.Common.CommandTrees.DbIsEmptyExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbIsNullExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIsNullExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIsNullExpression)\n- uid: System.Data.Common.CommandTrees.DbIsNullExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbIsNullExpression\n  nameWithType: DbIsNullExpression\n  fullName: System.Data.Common.CommandTrees.DbIsNullExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbIsOfExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbIsOfExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbIsOfExpression)\n- uid: System.Data.Common.CommandTrees.DbIsOfExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbIsOfExpression\n  nameWithType: DbIsOfExpression\n  fullName: System.Data.Common.CommandTrees.DbIsOfExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbJoinExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbJoinExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbJoinExpression)\n- uid: System.Data.Common.CommandTrees.DbJoinExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbJoinExpression\n  nameWithType: DbJoinExpression\n  fullName: System.Data.Common.CommandTrees.DbJoinExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbLambdaExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbLambdaExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbLambdaExpression)\n- uid: System.Data.Common.CommandTrees.DbLambdaExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbLambdaExpression\n  nameWithType: DbLambdaExpression\n  fullName: System.Data.Common.CommandTrees.DbLambdaExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbLikeExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbLikeExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbLikeExpression)\n- uid: System.Data.Common.CommandTrees.DbLikeExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbLikeExpression\n  nameWithType: DbLikeExpression\n  fullName: System.Data.Common.CommandTrees.DbLikeExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbLimitExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbLimitExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbLimitExpression)\n- uid: System.Data.Common.CommandTrees.DbLimitExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbLimitExpression\n  nameWithType: DbLimitExpression\n  fullName: System.Data.Common.CommandTrees.DbLimitExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbNewInstanceExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbNewInstanceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbNewInstanceExpression)\n- uid: System.Data.Common.CommandTrees.DbNewInstanceExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbNewInstanceExpression\n  nameWithType: DbNewInstanceExpression\n  fullName: System.Data.Common.CommandTrees.DbNewInstanceExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbNotExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbNotExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbNotExpression)\n- uid: System.Data.Common.CommandTrees.DbNotExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbNotExpression\n  nameWithType: DbNotExpression\n  fullName: System.Data.Common.CommandTrees.DbNotExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbNullExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbNullExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbNullExpression)\n- uid: System.Data.Common.CommandTrees.DbNullExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbNullExpression\n  nameWithType: DbNullExpression\n  fullName: System.Data.Common.CommandTrees.DbNullExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbOfTypeExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbOfTypeExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbOfTypeExpression)\n- uid: System.Data.Common.CommandTrees.DbOfTypeExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbOfTypeExpression\n  nameWithType: DbOfTypeExpression\n  fullName: System.Data.Common.CommandTrees.DbOfTypeExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbOrExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbOrExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbOrExpression)\n- uid: System.Data.Common.CommandTrees.DbOrExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbOrExpression\n  nameWithType: DbOrExpression\n  fullName: System.Data.Common.CommandTrees.DbOrExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbParameterReferenceExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbParameterReferenceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbParameterReferenceExpression)\n- uid: System.Data.Common.CommandTrees.DbParameterReferenceExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbParameterReferenceExpression\n  nameWithType: DbParameterReferenceExpression\n  fullName: System.Data.Common.CommandTrees.DbParameterReferenceExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbProjectExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbProjectExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbProjectExpression)\n- uid: System.Data.Common.CommandTrees.DbProjectExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbProjectExpression\n  nameWithType: DbProjectExpression\n  fullName: System.Data.Common.CommandTrees.DbProjectExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbPropertyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbPropertyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbPropertyExpression)\n- uid: System.Data.Common.CommandTrees.DbPropertyExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbPropertyExpression\n  nameWithType: DbPropertyExpression\n  fullName: System.Data.Common.CommandTrees.DbPropertyExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbQuantifierExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbQuantifierExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbQuantifierExpression)\n- uid: System.Data.Common.CommandTrees.DbQuantifierExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbQuantifierExpression\n  nameWithType: DbQuantifierExpression\n  fullName: System.Data.Common.CommandTrees.DbQuantifierExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbRefExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbRefExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbRefExpression)\n- uid: System.Data.Common.CommandTrees.DbRefExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbRefExpression\n  nameWithType: DbRefExpression\n  fullName: System.Data.Common.CommandTrees.DbRefExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbRefKeyExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbRefKeyExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbRefKeyExpression)\n- uid: System.Data.Common.CommandTrees.DbRefKeyExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbRefKeyExpression\n  nameWithType: DbRefKeyExpression\n  fullName: System.Data.Common.CommandTrees.DbRefKeyExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbRelationshipNavigationExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbRelationshipNavigationExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbRelationshipNavigationExpression)\n- uid: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbRelationshipNavigationExpression\n  nameWithType: DbRelationshipNavigationExpression\n  fullName: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbScanExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbScanExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbScanExpression)\n- uid: System.Data.Common.CommandTrees.DbScanExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbScanExpression\n  nameWithType: DbScanExpression\n  fullName: System.Data.Common.CommandTrees.DbScanExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbSkipExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbSkipExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbSkipExpression)\n- uid: System.Data.Common.CommandTrees.DbSkipExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbSkipExpression\n  nameWithType: DbSkipExpression\n  fullName: System.Data.Common.CommandTrees.DbSkipExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbSortExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbSortExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbSortExpression)\n- uid: System.Data.Common.CommandTrees.DbSortExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbSortExpression\n  nameWithType: DbSortExpression\n  fullName: System.Data.Common.CommandTrees.DbSortExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbTreatExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbTreatExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbTreatExpression)\n- uid: System.Data.Common.CommandTrees.DbTreatExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbTreatExpression\n  nameWithType: DbTreatExpression\n  fullName: System.Data.Common.CommandTrees.DbTreatExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbUnionAllExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbUnionAllExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbUnionAllExpression)\n- uid: System.Data.Common.CommandTrees.DbUnionAllExpression\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbUnionAllExpression\n  nameWithType: DbUnionAllExpression\n  fullName: System.Data.Common.CommandTrees.DbUnionAllExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit(DbVariableReferenceExpression)\n  nameWithType: DefaultExpressionVisitor.Visit(DbVariableReferenceExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(DbVariableReferenceExpression)\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Common.CommandTrees.DbAggregate)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitAggregate(DbAggregate)\n  nameWithType: DefaultExpressionVisitor.VisitAggregate(DbAggregate)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(DbAggregate)\n- uid: System.Data.Common.CommandTrees.DbAggregate\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbAggregate\n  nameWithType: DbAggregate\n  fullName: System.Data.Common.CommandTrees.DbAggregate\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitEntitySet(EntitySetBase)\n  nameWithType: DefaultExpressionVisitor.VisitEntitySet(EntitySetBase)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(EntitySetBase)\n- uid: System.Data.Metadata.Edm.EntitySetBase\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EntitySetBase\n  nameWithType: EntitySetBase\n  fullName: System.Data.Metadata.Edm.EntitySetBase\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Common.CommandTrees.DbExpression)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpression(DbExpression)\n  nameWithType: DefaultExpressionVisitor.VisitExpression(DbExpression)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(DbExpression)\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Common.CommandTrees.DbExpressionBinding)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpressionBinding(DbExpressionBinding)\n  nameWithType: DefaultExpressionVisitor.VisitExpressionBinding(DbExpressionBinding)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(DbExpressionBinding)\n- uid: System.Data.Common.CommandTrees.DbExpressionBinding\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbExpressionBinding\n  nameWithType: DbExpressionBinding\n  fullName: System.Data.Common.CommandTrees.DbExpressionBinding\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpressionBindingList(IList<DbExpressionBinding>)\n  nameWithType: DefaultExpressionVisitor.VisitExpressionBindingList(IList<DbExpressionBinding>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(IList<DbExpressionBinding>)\n- uid: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<DbExpressionBinding>\n  nameWithType: IList<DbExpressionBinding>\n  fullName: System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbExpressionBinding>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Data.Common.CommandTrees.DbExpressionBinding>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Common.CommandTrees.DbExpressionBinding\n    name: DbExpressionBinding\n    nameWithType: DbExpressionBinding\n    fullName: DbExpressionBinding\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpressionList(IList<DbExpression>)\n  nameWithType: DefaultExpressionVisitor.VisitExpressionList(IList<DbExpression>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(IList<DbExpression>)\n- uid: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<DbExpression>\n  nameWithType: IList<DbExpression>\n  fullName: System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbExpression>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Data.Common.CommandTrees.DbExpression>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Common.CommandTrees.DbExpression\n    name: DbExpression\n    nameWithType: DbExpression\n    fullName: DbExpression\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Metadata.Edm.EdmFunction)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitFunction(EdmFunction)\n  nameWithType: DefaultExpressionVisitor.VisitFunction(EdmFunction)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(EdmFunction)\n- uid: System.Data.Metadata.Edm.EdmFunction\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EdmFunction\n  nameWithType: EdmFunction\n  fullName: System.Data.Metadata.Edm.EdmFunction\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Common.CommandTrees.DbFunctionAggregate)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitFunctionAggregate(DbFunctionAggregate)\n  nameWithType: DefaultExpressionVisitor.VisitFunctionAggregate(DbFunctionAggregate)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(DbFunctionAggregate)\n- uid: System.Data.Common.CommandTrees.DbFunctionAggregate\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbFunctionAggregate\n  nameWithType: DbFunctionAggregate\n  fullName: System.Data.Common.CommandTrees.DbFunctionAggregate\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Common.CommandTrees.DbGroupAggregate)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitGroupAggregate(DbGroupAggregate)\n  nameWithType: DefaultExpressionVisitor.VisitGroupAggregate(DbGroupAggregate)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(DbGroupAggregate)\n- uid: System.Data.Common.CommandTrees.DbGroupAggregate\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbGroupAggregate\n  nameWithType: DbGroupAggregate\n  fullName: System.Data.Common.CommandTrees.DbGroupAggregate\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Common.CommandTrees.DbGroupExpressionBinding)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitGroupExpressionBinding(DbGroupExpressionBinding)\n  nameWithType: DefaultExpressionVisitor.VisitGroupExpressionBinding(DbGroupExpressionBinding)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(DbGroupExpressionBinding)\n- uid: System.Data.Common.CommandTrees.DbGroupExpressionBinding\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbGroupExpressionBinding\n  nameWithType: DbGroupExpressionBinding\n  fullName: System.Data.Common.CommandTrees.DbGroupExpressionBinding\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Common.CommandTrees.DbLambda)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitLambda(DbLambda)\n  nameWithType: DefaultExpressionVisitor.VisitLambda(DbLambda)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(DbLambda)\n- uid: System.Data.Common.CommandTrees.DbLambda\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbLambda\n  nameWithType: DbLambda\n  fullName: System.Data.Common.CommandTrees.DbLambda\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Common.CommandTrees.DbSortClause)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitSortClause(DbSortClause)\n  nameWithType: DefaultExpressionVisitor.VisitSortClause(DbSortClause)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(DbSortClause)\n- uid: System.Data.Common.CommandTrees.DbSortClause\n  parent: System.Data.Common.CommandTrees\n  isExternal: false\n  name: DbSortClause\n  nameWithType: DbSortClause\n  fullName: System.Data.Common.CommandTrees.DbSortClause\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitSortOrder(IList<DbSortClause>)\n  nameWithType: DefaultExpressionVisitor.VisitSortOrder(IList<DbSortClause>)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(IList<DbSortClause>)\n- uid: System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<DbSortClause>\n  nameWithType: IList<DbSortClause>\n  fullName: System.Collections.Generic.IList<System.Data.Common.CommandTrees.DbSortClause>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.Data.Common.CommandTrees.DbSortClause>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Common.CommandTrees.DbSortClause\n    name: DbSortClause\n    nameWithType: DbSortClause\n    fullName: DbSortClause\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Metadata.Edm.EdmType)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitType(EdmType)\n  nameWithType: DefaultExpressionVisitor.VisitType(EdmType)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(EdmType)\n- uid: System.Data.Metadata.Edm.EdmType\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EdmType\n  nameWithType: EdmType\n  fullName: System.Data.Metadata.Edm.EdmType\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitTypeUsage(TypeUsage)\n  nameWithType: DefaultExpressionVisitor.VisitTypeUsage(TypeUsage)\n  fullName: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(TypeUsage)\n- uid: System.Data.Metadata.Edm.TypeUsage\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: TypeUsage\n  nameWithType: TypeUsage\n  fullName: System.Data.Metadata.Edm.TypeUsage\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: DefaultExpressionVisitor\n  nameWithType: DefaultExpressionVisitor.DefaultExpressionVisitor\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnEnterScope\n  nameWithType: DefaultExpressionVisitor.OnEnterScope\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnExitScope\n  nameWithType: DefaultExpressionVisitor.OnExitScope\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnExpressionReplaced\n  nameWithType: DefaultExpressionVisitor.OnExpressionReplaced\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: OnVariableRebound\n  nameWithType: DefaultExpressionVisitor.OnVariableRebound\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: Visit\n  nameWithType: DefaultExpressionVisitor.Visit\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitAggregate\n  nameWithType: DefaultExpressionVisitor.VisitAggregate\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitEntitySet\n  nameWithType: DefaultExpressionVisitor.VisitEntitySet\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpression\n  nameWithType: DefaultExpressionVisitor.VisitExpression\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpressionBinding\n  nameWithType: DefaultExpressionVisitor.VisitExpressionBinding\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpressionBindingList\n  nameWithType: DefaultExpressionVisitor.VisitExpressionBindingList\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitExpressionList\n  nameWithType: DefaultExpressionVisitor.VisitExpressionList\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitFunction\n  nameWithType: DefaultExpressionVisitor.VisitFunction\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitFunctionAggregate\n  nameWithType: DefaultExpressionVisitor.VisitFunctionAggregate\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitGroupAggregate\n  nameWithType: DefaultExpressionVisitor.VisitGroupAggregate\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitGroupExpressionBinding\n  nameWithType: DefaultExpressionVisitor.VisitGroupExpressionBinding\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitLambda\n  nameWithType: DefaultExpressionVisitor.VisitLambda\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitSortClause\n  nameWithType: DefaultExpressionVisitor.VisitSortClause\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitSortOrder\n  nameWithType: DefaultExpressionVisitor.VisitSortOrder\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitType\n  nameWithType: DefaultExpressionVisitor.VisitType\n- uid: System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage*\n  parent: System.Data.Common.CommandTrees.DefaultExpressionVisitor\n  isExternal: false\n  name: VisitTypeUsage\n  nameWithType: DefaultExpressionVisitor.VisitTypeUsage\n"}