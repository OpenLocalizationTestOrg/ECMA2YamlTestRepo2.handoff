{"nodes":[{"pos":[709,788],"content":"Provides properties and methods for defining how a URL maps to a physical file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides properties and methods for defining how a URL maps to a physical file.","pos":[0,79]}]},{"pos":[800,1085],"content":"You pass an instance of PageRouteHandler to the <xref:System.Web.Routing.Route> constructor in order to map a URL of a physical file. The PageRouteHandler object specifies the virtual path of the physical file and determines whether authorization rules for the physical URL is checked.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You pass an instance of PageRouteHandler to the <xref:System.Web.Routing.Route> constructor in order to map a URL of a physical file. The PageRouteHandler object specifies the virtual path of the physical file and determines whether authorization rules for the physical URL is checked.","pos":[0,285],"nodes":[{"content":"You pass an instance of PageRouteHandler to the &lt;xref:System.Web.Routing.Route&gt; constructor in order to map a URL of a physical file.","pos":[0,133],"source":"You pass an instance of PageRouteHandler to the <xref:System.Web.Routing.Route> constructor in order to map a URL of a physical file."},{"content":"The PageRouteHandler object specifies the virtual path of the physical file and determines whether authorization rules for the physical URL is checked.","pos":[134,285]}]}]},{"pos":[1721,1818],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Routing.PageRouteHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Routing.PageRouteHandler\"></xref> class."},{"pos":[1830,1960],"content":"When you use this constructor, the &lt;xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A&gt; property is set to <ph id=\"ph1\">`true`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"When you use this constructor, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is set to `true`."},{"pos":[2113,2312],"content":"The virtual path of the physical file for this <xref:System.Web.Routing.RouteData.Route*> object. The file must be located in the current application. Therefore, the path must begin with a tilde (~).","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the physical file for this <xref:System.Web.Routing.RouteData.Route*> object. The file must be located in the current application. Therefore, the path must begin with a tilde (~).","pos":[0,199],"nodes":[{"content":"The virtual path of the physical file for this &lt;xref:System.Web.Routing.RouteData.Route*&gt; object.","pos":[0,97],"source":"The virtual path of the physical file for this <xref:System.Web.Routing.RouteData.Route*> object."},{"content":"The file must be located in the current application.","pos":[98,150]},{"content":"Therefore, the path must begin with a tilde (~).","pos":[151,199]}]}]},{"pos":[2476,2629],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">virtualPath</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or is an empty string or does not start with \"~/\".","needQuote":true,"needEscape":true,"source":"The <code>virtualPath</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string or does not start with \"~/\"."},{"pos":[3122,3219],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Routing.PageRouteHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Routing.PageRouteHandler\"></xref> class."},{"pos":[3231,3578],"content":"By default, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is `true`. Therefore, if you want authorization rules to be applied to both the URL of the physical page and to the route URL, you can use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> constructor instead of this constructor.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, the &lt;xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A&gt; property is <ph id=\"ph1\">`true`</ph>.","pos":[0,104],"source":"By default, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is `true`."},{"content":"Therefore, if you want authorization rules to be applied to both the URL of the physical page and to the route URL, you can use the &lt;xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29&gt; constructor instead of this constructor.","pos":[105,347],"source":" Therefore, if you want authorization rules to be applied to both the URL of the physical page and to the route URL, you can use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> constructor instead of this constructor."}]},{"pos":[3760,3958],"content":"The virtual path of the physical file of this <xref:System.Web.Routing.RouteData.Route*> object. The file must be located in the current application. Therefore, the path must begin with a tilde (~).","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the physical file of this <xref:System.Web.Routing.RouteData.Route*> object. The file must be located in the current application. Therefore, the path must begin with a tilde (~).","pos":[0,198],"nodes":[{"content":"The virtual path of the physical file of this &lt;xref:System.Web.Routing.RouteData.Route*&gt; object.","pos":[0,96],"source":"The virtual path of the physical file of this <xref:System.Web.Routing.RouteData.Route*> object."},{"content":"The file must be located in the current application.","pos":[97,149]},{"content":"Therefore, the path must begin with a tilde (~).","pos":[150,198]}]}]},{"pos":[4038,4410],"content":"If this property is set to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, authorization rules will be applied to the request URL and not to the URL of the physical page. If this property is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, authorization rules will be applied to both the request URL and to the URL of the physical page.","needQuote":true,"needEscape":true,"nodes":[{"content":"If this property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, authorization rules will be applied to the request URL and not to the URL of the physical page.","pos":[0,186],"source":"If this property is set to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, authorization rules will be applied to the request URL and not to the URL of the physical page."},{"content":"If this property is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, authorization rules will be applied to both the request URL and to the URL of the physical page.","pos":[187,372],"source":" If this property is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, authorization rules will be applied to both the request URL and to the URL of the physical page."}]},{"pos":[4574,4727],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">virtualPath</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or is an empty string or does not start with \"~/\".","needQuote":true,"needEscape":true,"source":"The <code>virtualPath</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string or does not start with \"~/\"."},{"pos":[5159,5255],"content":"Gets a value that determines whether authorization rules are applied to the physical file's URL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that determines whether authorization rules are applied to the physical file's URL.","pos":[0,96]}]},{"pos":[5268,7311],"content":"You can set the CheckPhysicalUrlAccess property when you use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> constructor.       The value of the CheckPhysicalUrlAccess property determines whether the <xref:System.Web.Routing.PageRouteHandler> object will check security permissions only for the route URL or for both the physical page and the route URL.       When the CheckPhysicalUrlAccess property is set to `true` (which is its default value), a user must have permission to access both the route URL and the physical URL. When the CheckPhysicalUrlAccess property is set to `false`, a user requires only permission to access the route URL, and permissions for the physical URL are not checked.       Permissions are defined in the Web.config file, as shown in the following example:      ```   <configuration>     <location path=\"categoriespage.aspx\">       <system.web>         <authorization>           <allow roles=\"admin\"/>           <deny users=\"*\"/>         </authorization>       </system.web>     </location>     <location path=\"category\">       <system.web>         <authorization>           <allow users=\"*\"/>         </authorization>       </system.web>     </location>   </configuration>   ```       For a request URL that contains `Category/food/show` after the domain name, if the route URL pattern is `Category/{action}/{categoryName}` and the physical page is Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] applies the permissions defined in the previous example in one of the following ways:      -   If the CheckPhysicalUrlAccess property is `false`, all users are granted access, because all users are granted access to the URL pattern that starts with `category`.      -   If the CheckPhysicalUrlAccess property is `true`, only `admin` users are granted access. All users have access to the URL pattern that begins with `category`, but only `admin` users have access to the physical page Categoriespage.aspx.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can set the CheckPhysicalUrlAccess property when you use the &lt;xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29&gt; constructor.","pos":[0,164],"source":"You can set the CheckPhysicalUrlAccess property when you use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> constructor."},{"content":"The value of the CheckPhysicalUrlAccess property determines whether the &lt;xref:System.Web.Routing.PageRouteHandler&gt; object will check security permissions only for the route URL or for both the physical page and the route URL.","pos":[171,396],"source":"       The value of the CheckPhysicalUrlAccess property determines whether the <xref:System.Web.Routing.PageRouteHandler> object will check security permissions only for the route URL or for both the physical page and the route URL."},{"content":"When the CheckPhysicalUrlAccess property is set to <ph id=\"ph1\">`true`</ph> (which is its default value), a user must have permission to access both the route URL and the physical URL.","pos":[403,569],"source":"       When the CheckPhysicalUrlAccess property is set to `true` (which is its default value), a user must have permission to access both the route URL and the physical URL."},{"content":"When the CheckPhysicalUrlAccess property is set to <ph id=\"ph1\">`false`</ph>, a user requires only permission to access the route URL, and permissions for the physical URL are not checked.","pos":[570,740],"source":" When the CheckPhysicalUrlAccess property is set to `false`, a user requires only permission to access the route URL, and permissions for the physical URL are not checked."},{"content":"Permissions are defined in the Web.config file, as shown in the following example:      <ph id=\"ph1\">```   &lt;configuration&gt;     &lt;location path=\"categoriespage.aspx\"&gt;       &lt;system.web&gt;         &lt;authorization&gt;           &lt;allow roles=\"admin\"/&gt;           &lt;deny users=\"*\"/&gt;         &lt;/authorization&gt;       &lt;/system.web&gt;     &lt;/location&gt;     &lt;location path=\"category\"&gt;       &lt;system.web&gt;         &lt;authorization&gt;           &lt;allow users=\"*\"/&gt;         &lt;/authorization&gt;       &lt;/system.web&gt;     &lt;/location&gt;   &lt;/configuration&gt;   ```</ph>       For a request URL that contains <ph id=\"ph2\">`Category/food/show`</ph> after the domain name, if the route URL pattern is <ph id=\"ph3\">`Category/{action}/{categoryName}`</ph> and the physical page is Categoriespage.aspx, <ph id=\"ph4\">[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]</ph> applies the permissions defined in the previous example in one of the following ways:      -   If the CheckPhysicalUrlAccess property is <ph id=\"ph5\">`false`</ph>, all users are granted access, because all users are granted access to the URL pattern that starts with <ph id=\"ph6\">`category`</ph>.","pos":[747,1756],"source":"       Permissions are defined in the Web.config file, as shown in the following example:      ```   <configuration>     <location path=\"categoriespage.aspx\">       <system.web>         <authorization>           <allow roles=\"admin\"/>           <deny users=\"*\"/>         </authorization>       </system.web>     </location>     <location path=\"category\">       <system.web>         <authorization>           <allow users=\"*\"/>         </authorization>       </system.web>     </location>   </configuration>   ```       For a request URL that contains `Category/food/show` after the domain name, if the route URL pattern is `Category/{action}/{categoryName}` and the physical page is Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] applies the permissions defined in the previous example in one of the following ways:      -   If the CheckPhysicalUrlAccess property is `false`, all users are granted access, because all users are granted access to the URL pattern that starts with `category`."},{"content":"-   If the CheckPhysicalUrlAccess property is <ph id=\"ph1\">`true`</ph>, only <ph id=\"ph2\">`admin`</ph> users are granted access.","pos":[1762,1854],"source":"      -   If the CheckPhysicalUrlAccess property is `true`, only `admin` users are granted access."},{"content":"All users have access to the URL pattern that begins with <ph id=\"ph1\">`category`</ph>, but only <ph id=\"ph2\">`admin`</ph> users have access to the physical page Categoriespage.aspx.","pos":[1855,2001],"source":" All users have access to the URL pattern that begins with `category`, but only `admin` users have access to the physical page Categoriespage.aspx."}]},{"pos":[7438,7746],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authorization is checked for the URL of the physical file that is associated with the route; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if authorization is checked for the URL of the physical file that is associated with the route; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,231],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authorization is checked for the URL of the physical file that is associated with the route; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[232,308],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[8343,8389],"content":"Returns the object that processes the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the object that processes the request.","pos":[0,46]}]},{"pos":[8625,8683],"content":"An object that encapsulates information about the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that encapsulates information about the request.","pos":[0,58]}]},{"pos":[8751,8789],"content":"The object that processes the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that processes the request.","pos":[0,38]}]},{"pos":[8970,9076],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestContext</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>requestContext</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9639,9767],"content":"Returns the virtual path of the physical file for the route after substitutions have been applied to any replacement parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the virtual path of the physical file for the route after substitutions have been applied to any replacement parameters.","pos":[0,128]}]},{"pos":[9779,10029],"content":"If the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> value does not contain any replacement parameters, the GetSubstitutedVirtualPath method returns the same value as the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the &lt;xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A&gt; value does not contain any replacement parameters, the GetSubstitutedVirtualPath method returns the same value as the &lt;xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A&gt; property.","pos":[0,250],"source":"If the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> value does not contain any replacement parameters, the GetSubstitutedVirtualPath method returns the same value as the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> property."}]},{"pos":[10251,10309],"content":"An object that encapsulates information about the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that encapsulates information about the request.","pos":[0,58]}]},{"pos":[10367,10428],"content":"The URL of the physical file that was generated from a route.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL of the physical file that was generated from a route.","pos":[0,61]}]},{"pos":[10620,10726],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestContext</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>requestContext</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11103,11176],"content":"Gets the virtual path of the Web page that is associated with this route.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the virtual path of the Web page that is associated with this route.","pos":[0,73]}]},{"pos":[11188,11420],"content":"You set the VirtualPath property in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> constructor or in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> constructor.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You set the VirtualPath property in the &lt;xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName&gt; constructor or in the &lt;xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName&gt; constructor.","pos":[0,232],"source":"You set the VirtualPath property in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> constructor or in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> constructor."}]},{"pos":[11536,11631],"content":"The URL of the Web page, before substitutions have been applied for any replacement parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL of the Web page, before substitutions have been applied for any replacement parameters.","pos":[0,95]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Routing.PageRouteHandler\n  id: PageRouteHandler\n  children:\n  - System.Web.Routing.PageRouteHandler.#ctor(System.String)\n  - System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)\n  - System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\n  - System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)\n  - System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)\n  - System.Web.Routing.PageRouteHandler.VirtualPath\n  langs:\n  - csharp\n  name: PageRouteHandler\n  nameWithType: PageRouteHandler\n  fullName: System.Web.Routing.PageRouteHandler\n  type: Class\n  summary: Provides properties and methods for defining how a URL maps to a physical file.\n  remarks: You pass an instance of PageRouteHandler to the <xref:System.Web.Routing.Route> constructor in order to map a URL of a physical file. The PageRouteHandler object specifies the virtual path of the physical file and determines whether authorization rules for the physical URL is checked.\n  syntax:\n    content: 'public class PageRouteHandler : System.Web.Routing.IRouteHandler'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Web.Routing.IRouteHandler\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Web.Routing.PageRouteHandler\n  langs:\n  - csharp\n  name: PageRouteHandler(String)\n  nameWithType: PageRouteHandler.PageRouteHandler(String)\n  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Initializes a new instance of the <xref href=\"System.Web.Routing.PageRouteHandler\"></xref> class.\n  remarks: When you use this constructor, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is set to `true`.\n  syntax:\n    content: public PageRouteHandler (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path of the physical file for this <xref:System.Web.Routing.RouteData.Route*> object. The file must be located in the current application. Therefore, the path must begin with a tilde (~).\n  overload: System.Web.Routing.PageRouteHandler.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>virtualPath</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string or does not start with \"~/\".\n  platform:\n  - net462\n- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)\n  id: '#ctor(System.String,System.Boolean)'\n  parent: System.Web.Routing.PageRouteHandler\n  langs:\n  - csharp\n  name: PageRouteHandler(String,Boolean)\n  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)\n  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Initializes a new instance of the <xref href=\"System.Web.Routing.PageRouteHandler\"></xref> class.\n  remarks: By default, the <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> property is `true`. Therefore, if you want authorization rules to be applied to both the URL of the physical page and to the route URL, you can use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> constructor instead of this constructor.\n  syntax:\n    content: public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path of the physical file of this <xref:System.Web.Routing.RouteData.Route*> object. The file must be located in the current application. Therefore, the path must begin with a tilde (~).\n    - id: checkPhysicalUrlAccess\n      type: System.Boolean\n      description: If this property is set to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, authorization rules will be applied to the request URL and not to the URL of the physical page. If this property is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, authorization rules will be applied to both the request URL and to the URL of the physical page.\n  overload: System.Web.Routing.PageRouteHandler.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>virtualPath</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string or does not start with \"~/\".\n  platform:\n  - net462\n- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\n  id: CheckPhysicalUrlAccess\n  parent: System.Web.Routing.PageRouteHandler\n  langs:\n  - csharp\n  name: CheckPhysicalUrlAccess\n  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess\n  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Gets a value that determines whether authorization rules are applied to the physical file's URL.\n  remarks: \"You can set the CheckPhysicalUrlAccess property when you use the <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> constructor.  \\n  \\n The value of the CheckPhysicalUrlAccess property determines whether the <xref:System.Web.Routing.PageRouteHandler> object will check security permissions only for the route URL or for both the physical page and the route URL.  \\n  \\n When the CheckPhysicalUrlAccess property is set to `true` (which is its default value), a user must have permission to access both the route URL and the physical URL. When the CheckPhysicalUrlAccess property is set to `false`, a user requires only permission to access the route URL, and permissions for the physical URL are not checked.  \\n  \\n Permissions are defined in the Web.config file, as shown in the following example:  \\n  \\n```  \\n<configuration>  \\n  <location path=\\\"categoriespage.aspx\\\">  \\n    <system.web>  \\n      <authorization>  \\n        <allow roles=\\\"admin\\\"/>  \\n        <deny users=\\\"*\\\"/>  \\n      </authorization>  \\n    </system.web>  \\n  </location>  \\n  <location path=\\\"category\\\">  \\n    <system.web>  \\n      <authorization>  \\n        <allow users=\\\"*\\\"/>  \\n      </authorization>  \\n    </system.web>  \\n  </location>  \\n</configuration>  \\n```  \\n  \\n For a request URL that contains `Category/food/show` after the domain name, if the route URL pattern is `Category/{action}/{categoryName}` and the physical page is Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] applies the permissions defined in the previous example in one of the following ways:  \\n  \\n-   If the CheckPhysicalUrlAccess property is `false`, all users are granted access, because all users are granted access to the URL pattern that starts with `category`.  \\n  \\n-   If the CheckPhysicalUrlAccess property is `true`, only `admin` users are granted access. All users have access to the URL pattern that begins with `category`, but only `admin` users have access to the physical page Categoriespage.aspx.\"\n  syntax:\n    content: public bool CheckPhysicalUrlAccess { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authorization is checked for the URL of the physical file that is associated with the route; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)\n  id: GetHttpHandler(System.Web.Routing.RequestContext)\n  parent: System.Web.Routing.PageRouteHandler\n  langs:\n  - csharp\n  name: GetHttpHandler(RequestContext)\n  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)\n  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Returns the object that processes the request.\n  syntax:\n    content: public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);\n    parameters:\n    - id: requestContext\n      type: System.Web.Routing.RequestContext\n      description: An object that encapsulates information about the request.\n    return:\n      type: System.Web.IHttpHandler\n      description: The object that processes the request.\n  overload: System.Web.Routing.PageRouteHandler.GetHttpHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestContext</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)\n  id: GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)\n  parent: System.Web.Routing.PageRouteHandler\n  langs:\n  - csharp\n  name: GetSubstitutedVirtualPath(RequestContext)\n  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)\n  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Returns the virtual path of the physical file for the route after substitutions have been applied to any replacement parameters.\n  remarks: If the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> value does not contain any replacement parameters, the GetSubstitutedVirtualPath method returns the same value as the <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> property.\n  syntax:\n    content: public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);\n    parameters:\n    - id: requestContext\n      type: System.Web.Routing.RequestContext\n      description: An object that encapsulates information about the request.\n    return:\n      type: System.String\n      description: The URL of the physical file that was generated from a route.\n  overload: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestContext</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.Routing.PageRouteHandler.VirtualPath\n  id: VirtualPath\n  parent: System.Web.Routing.PageRouteHandler\n  langs:\n  - csharp\n  name: VirtualPath\n  nameWithType: PageRouteHandler.VirtualPath\n  fullName: System.Web.Routing.PageRouteHandler.VirtualPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Routing\n  summary: Gets the virtual path of the Web page that is associated with this route.\n  remarks: You set the VirtualPath property in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> constructor or in the <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> constructor.\n  syntax:\n    content: public string VirtualPath { get; }\n    return:\n      type: System.String\n      description: The URL of the Web page, before substitutions have been applied for any replacement parameters.\n  overload: System.Web.Routing.PageRouteHandler.VirtualPath*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: PageRouteHandler(String)\n  nameWithType: PageRouteHandler.PageRouteHandler(String)\n  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: PageRouteHandler(String,Boolean)\n  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)\n  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: CheckPhysicalUrlAccess\n  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess\n  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess\n- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: GetHttpHandler(RequestContext)\n  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)\n  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)\n- uid: System.Web.IHttpHandler\n  parent: System.Web\n  isExternal: false\n  name: IHttpHandler\n  nameWithType: IHttpHandler\n  fullName: System.Web.IHttpHandler\n- uid: System.Web.Routing.RequestContext\n  parent: System.Web.Routing\n  isExternal: true\n  name: RequestContext\n  nameWithType: RequestContext\n  fullName: System.Web.Routing.RequestContext\n- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: GetSubstitutedVirtualPath(RequestContext)\n  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)\n  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)\n- uid: System.Web.Routing.PageRouteHandler.VirtualPath\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: VirtualPath\n  nameWithType: PageRouteHandler.VirtualPath\n  fullName: System.Web.Routing.PageRouteHandler.VirtualPath\n- uid: System.Web.Routing.PageRouteHandler.#ctor*\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: PageRouteHandler\n  nameWithType: PageRouteHandler.PageRouteHandler\n- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: CheckPhysicalUrlAccess\n  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess\n- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler*\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: GetHttpHandler\n  nameWithType: PageRouteHandler.GetHttpHandler\n- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: GetSubstitutedVirtualPath\n  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath\n- uid: System.Web.Routing.PageRouteHandler.VirtualPath*\n  parent: System.Web.Routing.PageRouteHandler\n  isExternal: false\n  name: VirtualPath\n  nameWithType: PageRouteHandler.VirtualPath\n"}