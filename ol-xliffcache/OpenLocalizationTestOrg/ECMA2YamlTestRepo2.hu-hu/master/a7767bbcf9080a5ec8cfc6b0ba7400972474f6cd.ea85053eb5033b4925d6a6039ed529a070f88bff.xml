{"nodes":[{"pos":[559,632],"content":"Provides the abstract base class for implementing a custom type resolver.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the abstract base class for implementing a custom type resolver.","pos":[0,73]}]},{"pos":[645,2148],"content":"The JavaScriptTypeResolver class provides the services for:      -   Converting managed type information to a string value through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> method.      -   Resolving a string value back to the appropriate managed type through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> method.       When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> object serializes custom types, it can optionally include in the serialized JavaScript Object Notation (JSON) string a value that contains type information. During deserialization, <xref:System.Web.Script.Serialization.JavaScriptSerializer> can then reference this string value to determine the appropriate managed type to which the JSON string will be converted.       If you provide a type resolver to the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer will use the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> and <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> methods to map between the managed type and the string value during the serialization and deserialization process, respectively.       The JavaScriptTypeResolver class is the base class for the <xref:System.Web.Script.Serialization.SimpleTypeResolver> class, which provides an implementation of a type resolver that uses the managed type assembly-qualified name.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The JavaScriptTypeResolver class provides the services for:      -   Converting managed type information to a string value through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> method.      -   Resolving a string value back to the appropriate managed type through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> method.       When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> object serializes custom types, it can optionally include in the serialized JavaScript Object Notation (JSON) string a value that contains type information. During deserialization, <xref:System.Web.Script.Serialization.JavaScriptSerializer> can then reference this string value to determine the appropriate managed type to which the JSON string will be converted.       If you provide a type resolver to the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer will use the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> and <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> methods to map between the managed type and the string value during the serialization and deserialization process, respectively.       The JavaScriptTypeResolver class is the base class for the <xref:System.Web.Script.Serialization.SimpleTypeResolver> class, which provides an implementation of a type resolver that uses the managed type assembly-qualified name.","pos":[0,1493],"nodes":[{"content":"The JavaScriptTypeResolver class provides the services for:      -   Converting managed type information to a string value through the &lt;xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A&gt; method.","pos":[0,221],"source":"The JavaScriptTypeResolver class provides the services for:      -   Converting managed type information to a string value through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> method."},{"content":"-   Resolving a string value back to the appropriate managed type through the &lt;xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A&gt; method.","pos":[227,389],"source":"      -   Resolving a string value back to the appropriate managed type through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> method."},{"content":"When the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; object serializes custom types, it can optionally include in the serialized JavaScript Object Notation (JSON) string a value that contains type information.","pos":[396,621],"source":"       When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> object serializes custom types, it can optionally include in the serialized JavaScript Object Notation (JSON) string a value that contains type information."},{"content":"During deserialization, &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; can then reference this string value to determine the appropriate managed type to which the JSON string will be converted.","pos":[622,828],"source":" During deserialization, <xref:System.Web.Script.Serialization.JavaScriptSerializer> can then reference this string value to determine the appropriate managed type to which the JSON string will be converted."},{"content":"If you provide a type resolver to the &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance, the serializer will use the &lt;xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A&gt; and &lt;xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A&gt; methods to map between the managed type and the string value during the serialization and deserialization process, respectively.","pos":[835,1259],"source":"       If you provide a type resolver to the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer will use the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> and <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> methods to map between the managed type and the string value during the serialization and deserialization process, respectively."},{"content":"The JavaScriptTypeResolver class is the base class for the &lt;xref:System.Web.Script.Serialization.SimpleTypeResolver&gt; class, which provides an implementation of a type resolver that uses the managed type assembly-qualified name.","pos":[1266,1493],"source":"       The JavaScriptTypeResolver class is the base class for the <xref:System.Web.Script.Serialization.SimpleTypeResolver> class, which provides an implementation of a type resolver that uses the managed type assembly-qualified name."}]}]},{"pos":[3125,3241],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Script.Serialization.JavaScriptTypeResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Script.Serialization.JavaScriptTypeResolver\"></xref> class."},{"pos":[3927,4049],"content":"When overridden in a derived class, returns the <xref:System.Type> object that is associated with the specified type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, returns the &lt;xref:System.Type&gt; object that is associated with the specified type name.","pos":[0,122],"source":"When overridden in a derived class, returns the <xref:System.Type> object that is associated with the specified type name."}]},{"pos":[4061,4337],"content":"When a type resolver is associated with a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer uses the ResolveType method when it iterates through a JSON string to determine the specific managed type to which the JSON type should be converted.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a type resolver is associated with a &lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt; instance, the serializer uses the ResolveType method when it iterates through a JSON string to determine the specific managed type to which the JSON type should be converted.","pos":[0,276],"source":"When a type resolver is associated with a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer uses the ResolveType method when it iterates through a JSON string to determine the specific managed type to which the JSON type should be converted."}]},{"pos":[4481,4510],"content":"The name of the managed type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the managed type.","pos":[0,29]}]},{"pos":[4566,4644],"content":"The <xref:System.Type> object that is associated with the specified type name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; object that is associated with the specified type name.","pos":[0,78],"source":"The <xref:System.Type> object that is associated with the specified type name."}]},{"pos":[5257,5359],"content":"When overridden in a derived class, returns the type name for the specified <xref:System.Type> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, returns the type name for the specified &lt;xref:System.Type&gt; object.","pos":[0,102],"source":"When overridden in a derived class, returns the type name for the specified <xref:System.Type> object."}]},{"pos":[5371,5495],"content":"If the ResolveTypeId method returns either <ph id=\"ph1\">`null`</ph> or &lt;xref:System.String&gt;, then the type resolver does not support the type.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the ResolveTypeId method returns either `null` or <xref:System.String>, then the type resolver does not support the type."},{"pos":[5643,5675],"content":"The managed type to be resolved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The managed type to be resolved.","pos":[0,32]}]},{"pos":[5733,5772],"content":"The name of the specified managed type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the specified managed type.","pos":[0,39]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver\n  id: JavaScriptTypeResolver\n  children:\n  - System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor\n  - System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)\n  - System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)\n  langs:\n  - csharp\n  name: JavaScriptTypeResolver\n  nameWithType: JavaScriptTypeResolver\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver\n  type: Class\n  summary: Provides the abstract base class for implementing a custom type resolver.\n  remarks: \"The JavaScriptTypeResolver class provides the services for:  \\n  \\n-   Converting managed type information to a string value through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> method.  \\n  \\n-   Resolving a string value back to the appropriate managed type through the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> method.  \\n  \\n When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> object serializes custom types, it can optionally include in the serialized JavaScript Object Notation (JSON) string a value that contains type information. During deserialization, <xref:System.Web.Script.Serialization.JavaScriptSerializer> can then reference this string value to determine the appropriate managed type to which the JSON string will be converted.  \\n  \\n If you provide a type resolver to the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer will use the <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> and <xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> methods to map between the managed type and the string value during the serialization and deserialization process, respectively.  \\n  \\n The JavaScriptTypeResolver class is the base class for the <xref:System.Web.Script.Serialization.SimpleTypeResolver> class, which provides an implementation of a type resolver that uses the managed type assembly-qualified name.\"\n  example:\n  - \"The following example demonstrates how to create a custom type resolver.  \\n  \\n [!code-vb[System.Web.Script.Serialization.TypeResolver#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_0_1.vb)]\\n [!code-cs[System.Web.Script.Serialization.TypeResolver#2](~/add/codesnippet/csharp/t-system.web.script.seri_0_1.cs)]\"\n  syntax:\n    content: public abstract class JavaScriptTypeResolver\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor\n  id: '#ctor'\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  langs:\n  - csharp\n  name: JavaScriptTypeResolver()\n  nameWithType: JavaScriptTypeResolver.JavaScriptTypeResolver()\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.JavaScriptTypeResolver()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.Web.Script.Serialization.JavaScriptTypeResolver\"></xref> class.\n  syntax:\n    content: protected JavaScriptTypeResolver ();\n    parameters: []\n  overload: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)\n  id: ResolveType(System.String)\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  langs:\n  - csharp\n  name: ResolveType(String)\n  nameWithType: JavaScriptTypeResolver.ResolveType(String)\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(String)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: When overridden in a derived class, returns the <xref:System.Type> object that is associated with the specified type name.\n  remarks: When a type resolver is associated with a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, the serializer uses the ResolveType method when it iterates through a JSON string to determine the specific managed type to which the JSON type should be converted.\n  syntax:\n    content: public abstract Type ResolveType (string id);\n    parameters:\n    - id: id\n      type: System.String\n      description: The name of the managed type.\n    return:\n      type: System.Type\n      description: The <xref:System.Type> object that is associated with the specified type name.\n  overload: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)\n  id: ResolveTypeId(System.Type)\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  langs:\n  - csharp\n  name: ResolveTypeId(Type)\n  nameWithType: JavaScriptTypeResolver.ResolveTypeId(Type)\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(Type)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.Script.Serialization\n  summary: When overridden in a derived class, returns the type name for the specified <xref:System.Type> object.\n  remarks: If the ResolveTypeId method returns either `null` or <xref:System.String>, then the type resolver does not support the type.\n  syntax:\n    content: public abstract string ResolveTypeId (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The managed type to be resolved.\n    return:\n      type: System.String\n      description: The name of the specified managed type.\n  overload: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  isExternal: false\n  name: JavaScriptTypeResolver()\n  nameWithType: JavaScriptTypeResolver.JavaScriptTypeResolver()\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.JavaScriptTypeResolver()\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  isExternal: false\n  name: ResolveType(String)\n  nameWithType: JavaScriptTypeResolver.ResolveType(String)\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(String)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  isExternal: false\n  name: ResolveTypeId(Type)\n  nameWithType: JavaScriptTypeResolver.ResolveTypeId(Type)\n  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(Type)\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor*\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  isExternal: false\n  name: JavaScriptTypeResolver\n  nameWithType: JavaScriptTypeResolver.JavaScriptTypeResolver\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType*\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  isExternal: false\n  name: ResolveType\n  nameWithType: JavaScriptTypeResolver.ResolveType\n- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId*\n  parent: System.Web.Script.Serialization.JavaScriptTypeResolver\n  isExternal: false\n  name: ResolveTypeId\n  nameWithType: JavaScriptTypeResolver.ResolveTypeId\n"}