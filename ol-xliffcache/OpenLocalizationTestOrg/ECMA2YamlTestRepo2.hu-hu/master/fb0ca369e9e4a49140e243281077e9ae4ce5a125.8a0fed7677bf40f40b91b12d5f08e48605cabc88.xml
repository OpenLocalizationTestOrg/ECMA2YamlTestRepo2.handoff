{"nodes":[{"pos":[1227,1293],"content":"Describes the width, height, and location of an integer rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the width, height, and location of an integer rectangle.","pos":[0,66]}]},{"pos":[1306,2199],"content":"<a name=\"xamlAttributeUsage_Duration\"></a>    ## XAML Attribute Usage      ```   <object property=\"X,Y,Width,Height\"/>   - or    <object property=\"Empty\"/>   ```      <a name=\"xamlValues_MinWidth\"></a>    ## XAML Values    *X*    <xref:System.Int32?displayProperty=fullName>       The x-coordinate of the top-left corner of the rectangle.       *Y*    <xref:System.Int32?displayProperty=fullName>       The y-coordinate of the top-left corner of the rectangle.       *Width*    <xref:System.Int32?displayProperty=fullName>       The width of the rectangle.       *Height*    <xref:System.Int32?displayProperty=fullName>       The height of the rectangle.      <a name=\"xamlTextUsage_Int32Rect\"></a>    ## XAML Text Usage    You can also use whitespace instead of commas to delimit values. Whitespace can also be used with a comma delimited value set.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Duration\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"X,Y,Width,Height\"/&gt;   - or    &lt;object property=\"Empty\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_MinWidth\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept>    &lt;xref:System.Int32?displayProperty=fullName&gt;       The x-coordinate of the top-left corner of the rectangle.","pos":[0,338],"source":"<a name=\"xamlAttributeUsage_Duration\"></a>    ## XAML Attribute Usage      ```   <object property=\"X,Y,Width,Height\"/>   - or    <object property=\"Empty\"/>   ```      <a name=\"xamlValues_MinWidth\"></a>    ## XAML Values    *X*    <xref:System.Int32?displayProperty=fullName>       The x-coordinate of the top-left corner of the rectangle."},{"content":"<bpt id=\"p1\">*</bpt>Y<ept id=\"p1\">*</ept>    &lt;xref:System.Int32?displayProperty=fullName&gt;       The y-coordinate of the top-left corner of the rectangle.","pos":[345,460],"source":"*Y*    <xref:System.Int32?displayProperty=fullName>       The y-coordinate of the top-left corner of the rectangle."},{"content":"<bpt id=\"p1\">*</bpt>Width<ept id=\"p1\">*</ept>    &lt;xref:System.Int32?displayProperty=fullName&gt;       The width of the rectangle.","pos":[467,556],"source":"*Width*    <xref:System.Int32?displayProperty=fullName>       The width of the rectangle."},{"content":"<bpt id=\"p1\">*</bpt>Height<ept id=\"p1\">*</ept>    &lt;xref:System.Int32?displayProperty=fullName&gt;       The height of the rectangle.","pos":[563,654],"source":"*Height*    <xref:System.Int32?displayProperty=fullName>       The height of the rectangle."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlTextUsage_Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Text Usage    You can also use whitespace instead of commas to delimit values.","pos":[660,788],"source":"<a name=\"xamlTextUsage_Int32Rect\"></a>    ## XAML Text Usage    You can also use whitespace instead of commas to delimit values."},{"content":"Whitespace can also be used with a comma delimited value set.","pos":[789,850]}]},{"pos":[3042,3327],"content":"Initializes a new instance of an <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p2\">*</ept>&gt; coordinates and the specified &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p3\">*</bpt>&gt; and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p3\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of an <xref href=\"System.Windows.Int32Rect\"></xref> with the specified <xref:System.Windows.Int32Rect.X*> and <xref:System.Windows.Int32Rect.Y*> coordinates and the specified <xref:System.Windows.Int32Rect.Width*> and <xref:System.Windows.Int32Rect.Height*>."},{"pos":[3479,3657],"content":"The &lt;xref:System.Windows.Int32Rect.X*&gt; of the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance which specifies the x-coordinate of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Int32Rect.X*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the x-coordinate of the top-left corner of the rectangle."},{"pos":[3714,3892],"content":"The &lt;xref:System.Windows.Int32Rect.Y*&gt; of the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance which specifies the y-coordinate of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Int32Rect.Y*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the y-coordinate of the top-left corner of the rectangle."},{"pos":[3953,4105],"content":"The &lt;xref:System.Windows.Int32Rect.Width*&gt; of the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance which specifies the width of the rectangle.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Int32Rect.Width*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the width of the rectangle."},{"pos":[4167,4321],"content":"The &lt;xref:System.Windows.Int32Rect.Height*&gt; of the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance which specifies the height of the rectangle.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Int32Rect.Height*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the height of the rectangle."},{"pos":[4686,4781],"content":"Gets the empty rectangle, a special value that represents a rectangle with no position or area.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the empty rectangle, a special value that represents a rectangle with no position or area.","pos":[0,95]}]},{"pos":[4794,5160],"content":"This property is the same as calling the constructor using 0 for all parameter values.      <a name=\"xamlAttributeUsage_Automatic\"></a>    ## XAML Attribute Usage      ```   <object property=\"Empty\" />   ```      <a name=\"xamlValues_Automatic\"></a>    ## XAML Values    *property*    A property that accepts a <xref:System.Windows.Int32Rect> value.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is the same as calling the constructor using 0 for all parameter values.","pos":[0,86]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Automatic\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"Empty\" /&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_Automatic\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <bpt id=\"p3\">*</bpt>property<ept id=\"p3\">*</ept>    A property that accepts a &lt;xref:System.Windows.Int32Rect&gt; value.","pos":[92,348],"source":"<a name=\"xamlAttributeUsage_Automatic\"></a>    ## XAML Attribute Usage      ```   <object property=\"Empty\" />   ```      <a name=\"xamlValues_Automatic\"></a>    ## XAML Values    *property*    A property that accepts a <xref:System.Windows.Int32Rect> value."}]},{"pos":[5307,5351],"content":"An empty rectangle with no position or area.","needQuote":true,"needEscape":true,"nodes":[{"content":"An empty rectangle with no position or area.","pos":[0,44]}]},{"pos":[5773,5843],"content":"Determines whether the specified rectangle is equal to this rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified rectangle is equal to this rectangle.","pos":[0,70]}]},{"pos":[5855,5896],"content":"This operation tests for object equality.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]}]},{"pos":[6033,6080],"content":"The object to compare to the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare to the current rectangle.","pos":[0,47]}]},{"pos":[6140,6417],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <bpt id=\"p2\">*</bpt>o<ept id=\"p2\">*</ept> is an <bpt id=\"p3\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and the same &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p4\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p4\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p5\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p5\">*</ept>&gt; as this rectangle; otherwise, <bpt id=\"p6\">**</bpt>false<ept id=\"p6\">**</ept>.","needQuote":false,"needEscape":true,"source":"**true** if *o* is an <xref href=\"System.Windows.Int32Rect\"></xref> and the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> as this rectangle; otherwise, **false**."},{"pos":[6872,6942],"content":"Determines whether the specified rectangle is equal to this rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified rectangle is equal to this rectangle.","pos":[0,70]}]},{"pos":[6954,6995],"content":"This operation tests for object equality.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]}]},{"pos":[7160,7210],"content":"The rectangle to compare to the current rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rectangle to compare to the current rectangle.","pos":[0,50]}]},{"pos":[7270,7508],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if both rectangles have the same &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p2\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p2\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p3\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p3\">*</ept>&gt; as this rectangle; otherwise, <bpt id=\"p4\">**</bpt>false<ept id=\"p4\">**</ept>.","needQuote":false,"needEscape":true,"source":"**true** if both rectangles have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> as this rectangle; otherwise, **false**."},{"pos":[8043,8097],"content":"Determines whether the specified rectangles are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the specified rectangles are equal.","pos":[0,54]}]},{"pos":[8109,8150],"content":"This operation tests for object equality.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation tests for object equality.","pos":[0,41]}]},{"pos":[8369,8400],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[8478,8510],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[8570,8804],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <bpt id=\"p2\">*</bpt>int32Rect1<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>int32Rect2<ept id=\"p3\">*</ept> have the same &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p4\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p4\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p5\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p5\">*</ept>&gt;; otherwise, <bpt id=\"p6\">**</bpt>false<ept id=\"p6\">**</ept>.","needQuote":false,"needEscape":true,"source":"**true** if *int32Rect1* and *int32Rect2* have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*>; otherwise, **false**."},{"pos":[9205,9410],"content":"Creates a hash code from this rectangle's &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p1\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p2\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p2\">*</ept>&gt; values.","needQuote":true,"needEscape":true,"source":"Creates a hash code from this rectangle's <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> values."},{"pos":[9545,9572],"content":"This rectangle's hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This rectangle's hash code.","pos":[0,27]}]},{"pos":[9953,10159],"content":"Gets a value that indicates whether the &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p1\">*</ept>&gt; properties of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are greater than 0.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref:System.Windows.Int32Rect.Width*> and <xref:System.Windows.Int32Rect.Height*> properties of the <xref href=\"System.Windows.Int32Rect\"></xref> are greater than 0."},{"pos":[10270,10479],"content":"true if the &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p1\">*</ept>&gt; properties of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> are greater than 0; otherwise, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">false</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"true if the <xref:System.Windows.Int32Rect.Width*> and <xref:System.Windows.Int32Rect.Height*> properties of the <xref href=\"System.Windows.Int32Rect\"></xref> are greater than 0; otherwise, <code>false</code>."},{"pos":[10851,10892],"content":"Gets or sets the height of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the height of the rectangle.","pos":[0,41]}]},{"pos":[11004,11058],"content":"The height of the rectangle. The default value is `0`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The height of the rectangle.","pos":[0,28]},{"content":"The default value is <ph id=\"ph1\">`0`</ph>.","pos":[29,54],"source":" The default value is `0`."}]},{"pos":[11434,11489],"content":"Gets a value indicating whether the rectangle is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the rectangle is empty.","pos":[0,55]}]},{"pos":[11601,11689],"content":"**true** if the rectangle is empty; otherwise, **false**. The default value is **true**.","needQuote":false,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the rectangle is empty; otherwise, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[0,57],"source":"**true** if the rectangle is empty; otherwise, **false**."},{"content":"The default value is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","pos":[58,88],"source":" The default value is **true**."}]},{"pos":[12252,12295],"content":"Compares two rectangles for exact equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two rectangles for exact equality.","pos":[0,43]}]},{"pos":[12519,12550],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[12628,12660],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[12720,12954],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <bpt id=\"p2\">*</bpt>int32Rect1<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>int32Rect2<ept id=\"p3\">*</ept> have the same &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p4\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p4\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p5\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p5\">*</ept>&gt;; otherwise, <bpt id=\"p6\">**</bpt>false<ept id=\"p6\">**</ept>.","needQuote":false,"needEscape":true,"source":"**true** if *int32Rect1* and *int32Rect2* have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*>; otherwise, **false**."},{"pos":[13531,13570],"content":"Compares two rectangles for inequality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two rectangles for inequality.","pos":[0,39]}]},{"pos":[13796,13827],"content":"The first rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first rectangle to compare.","pos":[0,31]}]},{"pos":[13905,13937],"content":"The second rectangle to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second rectangle to compare.","pos":[0,32]}]},{"pos":[13997,14273],"content":"<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if <bpt id=\"p2\">*</bpt>int32Rect1<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>int32Rect2<ept id=\"p3\">*</ept> have the same &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p4\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p4\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p5\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p5\">*</ept>&gt;; otherwise, if all of these values are the same, then <bpt id=\"p6\">**</bpt>true<ept id=\"p6\">**</ept>.","needQuote":false,"needEscape":true,"source":"**false** if *int32Rect1* and *int32Rect2* have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*>; otherwise, if all of these values are the same, then **true**."},{"pos":[14699,14821],"content":"Creates an <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure from the specified &lt;xref:System.String&gt; representation.","needQuote":true,"needEscape":true,"source":"Creates an <xref href=\"System.Windows.Int32Rect\"></xref> structure from the specified <xref:System.String> representation."},{"pos":[14985,15061],"content":"A string representation of an <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string representation of an <xref href=\"System.Windows.Int32Rect\"></xref>."},{"pos":[15130,15201],"content":"The equivalent <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"The equivalent <xref href=\"System.Windows.Int32Rect\"></xref> structure."},{"pos":[15841,15910],"content":"Formats the value of the current instance using the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Formats the value of the current instance using the specified format.","pos":[0,69]}]},{"pos":[15922,16103],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Int32Rect> instance is cast to an <xref:System.IFormattable> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Int32Rect> instance is cast to an <xref:System.IFormattable> interface.","pos":[0,181],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Windows.Int32Rect&gt; instance is cast to an &lt;xref:System.IFormattable&gt; interface.","pos":[60,181],"source":" It can be used only when the <xref:System.Windows.Int32Rect> instance is cast to an <xref:System.IFormattable> interface."}]}]},{"pos":[16277,16295],"content":"The format to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The format to use.","pos":[0,18]}]},{"pos":[16369,16408],"content":"The provider to use to format the value","needQuote":true,"needEscape":true,"nodes":[{"content":"The provider to use to format the value","pos":[0,39]}]},{"pos":[16466,16524],"content":"The value of the current instance in the specified format.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the current instance in the specified format.","pos":[0,58]}]},{"pos":[16931,17017],"content":"Creates a string representation of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a string representation of this <xref href=\"System.Windows.Int32Rect\"></xref>."},{"pos":[17153,17409],"content":"A string containing the same &lt;xref:System.Windows.Int32Rect.X<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Windows.Int32Rect.Y<ept id=\"p1\">*</ept>&gt;, &lt;xref:System.Windows.Int32Rect.Width<bpt id=\"p2\">*</bpt>&gt;, and &lt;xref:System.Windows.Int32Rect.Height<ept id=\"p2\">*</ept>&gt; values of this <bpt id=\"p3\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"A string containing the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> values of this <xref href=\"System.Windows.Int32Rect\"></xref> structure."},{"pos":[17889,18027],"content":"Creates a string representation of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> based on the supplied &lt;xref:System.IFormatProvider&gt;.","needQuote":true,"needEscape":true,"source":"Creates a string representation of this <xref href=\"System.Windows.Int32Rect\"></xref> based on the supplied <xref:System.IFormatProvider>."},{"pos":[18191,18324],"content":"The format provider to use. If provider is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the current culture is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"The format provider to use.","pos":[0,27]},{"content":"If provider is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the current culture is used.","pos":[28,133],"source":" If provider is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the current culture is used."}]},{"pos":[18382,18472],"content":"A string representation of this instance of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Int32Rect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string representation of this instance of <xref href=\"System.Windows.Int32Rect\"></xref>."},{"pos":[18840,18880],"content":"Gets or sets the width of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the width of the rectangle.","pos":[0,40]}]},{"pos":[18991,19044],"content":"The width of the rectangle. The default value is `0`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The width of the rectangle.","pos":[0,27]},{"content":"The default value is <ph id=\"ph1\">`0`</ph>.","pos":[28,53],"source":" The default value is `0`."}]},{"pos":[19389,19459],"content":"Gets or sets the x-coordinate of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the x-coordinate of the top-left corner of the rectangle.","pos":[0,70]}]},{"pos":[19566,19649],"content":"The x-coordinate of the top-left corner of the rectangle. The default value is `0`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the top-left corner of the rectangle.","pos":[0,57]},{"content":"The default value is <ph id=\"ph1\">`0`</ph>.","pos":[58,83],"source":" The default value is `0`."}]},{"pos":[19990,20060],"content":"Gets or sets the y-coordinate of the top-left corner of the rectangle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the y-coordinate of the top-left corner of the rectangle.","pos":[0,70]}]},{"pos":[20167,20250],"content":"The y-coordinate of the top-left corner of the rectangle. The default value is `0`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the top-left corner of the rectangle.","pos":[0,57]},{"content":"The default value is <ph id=\"ph1\">`0`</ph>.","pos":[58,83],"source":" The default value is `0`."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Int32Rect\n  id: Int32Rect\n  children:\n  - System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Windows.Int32Rect.Empty\n  - System.Windows.Int32Rect.Equals(System.Object)\n  - System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)\n  - System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  - System.Windows.Int32Rect.GetHashCode\n  - System.Windows.Int32Rect.HasArea\n  - System.Windows.Int32Rect.Height\n  - System.Windows.Int32Rect.IsEmpty\n  - System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  - System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  - System.Windows.Int32Rect.Parse(System.String)\n  - System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  - System.Windows.Int32Rect.ToString\n  - System.Windows.Int32Rect.ToString(System.IFormatProvider)\n  - System.Windows.Int32Rect.Width\n  - System.Windows.Int32Rect.X\n  - System.Windows.Int32Rect.Y\n  langs:\n  - csharp\n  name: Int32Rect\n  nameWithType: Int32Rect\n  fullName: System.Windows.Int32Rect\n  type: Struct\n  summary: Describes the width, height, and location of an integer rectangle.\n  remarks: \"<a name=\\\"xamlAttributeUsage_Duration\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"X,Y,Width,Height\\\"/>  \\n- or   \\n<object property=\\\"Empty\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_MinWidth\\\"></a>   \\n## XAML Values  \\n *X*  \\n <xref:System.Int32?displayProperty=fullName>  \\n  \\n The x-coordinate of the top-left corner of the rectangle.  \\n  \\n *Y*  \\n <xref:System.Int32?displayProperty=fullName>  \\n  \\n The y-coordinate of the top-left corner of the rectangle.  \\n  \\n *Width*  \\n <xref:System.Int32?displayProperty=fullName>  \\n  \\n The width of the rectangle.  \\n  \\n *Height*  \\n <xref:System.Int32?displayProperty=fullName>  \\n  \\n The height of the rectangle.  \\n  \\n<a name=\\\"xamlTextUsage_Int32Rect\\\"></a>   \\n## XAML Text Usage  \\n You can also use whitespace instead of commas to delimit values. Whitespace can also be used with a comma delimited value set.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Int32RectConverter))]\n\n      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.Int32RectValueSerializer))]\n\n      public struct Int32Rect : IFormattable\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IFormattable\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Int32Rect(Int32,Int32,Int32,Int32)\n  nameWithType: Int32Rect.Int32Rect(Int32,Int32,Int32,Int32)\n  fullName: System.Windows.Int32Rect.Int32Rect(Int32,Int32,Int32,Int32)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of an <xref href=\"System.Windows.Int32Rect\"></xref> with the specified <xref:System.Windows.Int32Rect.X*> and <xref:System.Windows.Int32Rect.Y*> coordinates and the specified <xref:System.Windows.Int32Rect.Width*> and <xref:System.Windows.Int32Rect.Height*>.\n  syntax:\n    content: public Int32Rect (int x, int y, int width, int height);\n    parameters:\n    - id: x\n      type: System.Int32\n      description: The <xref:System.Windows.Int32Rect.X*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the x-coordinate of the top-left corner of the rectangle.\n    - id: y\n      type: System.Int32\n      description: The <xref:System.Windows.Int32Rect.Y*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the y-coordinate of the top-left corner of the rectangle.\n    - id: width\n      type: System.Int32\n      description: The <xref:System.Windows.Int32Rect.Width*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the width of the rectangle.\n    - id: height\n      type: System.Int32\n      description: The <xref:System.Windows.Int32Rect.Height*> of the new <xref href=\"System.Windows.Int32Rect\"></xref> instance which specifies the height of the rectangle.\n  overload: System.Windows.Int32Rect.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Empty\n  id: Empty\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: Int32Rect.Empty\n  fullName: System.Windows.Int32Rect.Empty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the empty rectangle, a special value that represents a rectangle with no position or area.\n  remarks: \"This property is the same as calling the constructor using 0 for all parameter values.  \\n  \\n<a name=\\\"xamlAttributeUsage_Automatic\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"Empty\\\" />  \\n```  \\n  \\n<a name=\\\"xamlValues_Automatic\\\"></a>   \\n## XAML Values  \\n *property*  \\n A property that accepts a <xref:System.Windows.Int32Rect> value.\"\n  syntax:\n    content: public static System.Windows.Int32Rect Empty { get; }\n    return:\n      type: System.Windows.Int32Rect\n      description: An empty rectangle with no position or area.\n  overload: System.Windows.Int32Rect.Empty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Int32Rect.Equals(Object)\n  fullName: System.Windows.Int32Rect.Equals(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Determines whether the specified rectangle is equal to this rectangle.\n  remarks: This operation tests for object equality.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to compare to the current rectangle.\n    return:\n      type: System.Boolean\n      description: '**true** if *o* is an <xref href=\"System.Windows.Int32Rect\"></xref> and the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> as this rectangle; otherwise, **false**.'\n  overload: System.Windows.Int32Rect.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)\n  id: Equals(System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Equals(Int32Rect)\n  nameWithType: Int32Rect.Equals(Int32Rect)\n  fullName: System.Windows.Int32Rect.Equals(Int32Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Determines whether the specified rectangle is equal to this rectangle.\n  remarks: This operation tests for object equality.\n  syntax:\n    content: public bool Equals (System.Windows.Int32Rect value);\n    parameters:\n    - id: value\n      type: System.Windows.Int32Rect\n      description: The rectangle to compare to the current rectangle.\n    return:\n      type: System.Boolean\n      description: '**true** if both rectangles have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> as this rectangle; otherwise, **false**.'\n  overload: System.Windows.Int32Rect.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  id: Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Equals(Int32Rect,Int32Rect)\n  nameWithType: Int32Rect.Equals(Int32Rect,Int32Rect)\n  fullName: System.Windows.Int32Rect.Equals(Int32Rect,Int32Rect)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Determines whether the specified rectangles are equal.\n  remarks: This operation tests for object equality.\n  syntax:\n    content: public static bool Equals (System.Windows.Int32Rect int32Rect1, System.Windows.Int32Rect int32Rect2);\n    parameters:\n    - id: int32Rect1\n      type: System.Windows.Int32Rect\n      description: The first rectangle to compare.\n    - id: int32Rect2\n      type: System.Windows.Int32Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Boolean\n      description: '**true** if *int32Rect1* and *int32Rect2* have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*>; otherwise, **false**.'\n  overload: System.Windows.Int32Rect.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Int32Rect.GetHashCode()\n  fullName: System.Windows.Int32Rect.GetHashCode()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a hash code from this rectangle's <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> values.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: This rectangle's hash code.\n  overload: System.Windows.Int32Rect.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.HasArea\n  id: HasArea\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: HasArea\n  nameWithType: Int32Rect.HasArea\n  fullName: System.Windows.Int32Rect.HasArea\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the <xref:System.Windows.Int32Rect.Width*> and <xref:System.Windows.Int32Rect.Height*> properties of the <xref href=\"System.Windows.Int32Rect\"></xref> are greater than 0.\n  syntax:\n    content: public bool HasArea { get; }\n    return:\n      type: System.Boolean\n      description: true if the <xref:System.Windows.Int32Rect.Width*> and <xref:System.Windows.Int32Rect.Height*> properties of the <xref href=\"System.Windows.Int32Rect\"></xref> are greater than 0; otherwise, <code>false</code>.\n  overload: System.Windows.Int32Rect.HasArea*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Height\n  id: Height\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Height\n  nameWithType: Int32Rect.Height\n  fullName: System.Windows.Int32Rect.Height\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the height of the rectangle.\n  syntax:\n    content: public int Height { get; set; }\n    return:\n      type: System.Int32\n      description: The height of the rectangle. The default value is `0`.\n  overload: System.Windows.Int32Rect.Height*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.IsEmpty\n  id: IsEmpty\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: Int32Rect.IsEmpty\n  fullName: System.Windows.Int32Rect.IsEmpty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a value indicating whether the rectangle is empty.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: '**true** if the rectangle is empty; otherwise, **false**. The default value is **true**.'\n  overload: System.Windows.Int32Rect.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  id: op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: op_Equality(Int32Rect,Int32Rect)\n  nameWithType: Int32Rect.op_Equality(Int32Rect,Int32Rect)\n  fullName: System.Windows.Int32Rect.op_Equality(Int32Rect,Int32Rect)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two rectangles for exact equality.\n  syntax:\n    content: public static bool op_Equality (System.Windows.Int32Rect int32Rect1, System.Windows.Int32Rect int32Rect2);\n    parameters:\n    - id: int32Rect1\n      type: System.Windows.Int32Rect\n      description: The first rectangle to compare.\n    - id: int32Rect2\n      type: System.Windows.Int32Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Boolean\n      description: '**true** if *int32Rect1* and *int32Rect2* have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*>; otherwise, **false**.'\n  overload: System.Windows.Int32Rect.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  id: op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: op_Inequality(Int32Rect,Int32Rect)\n  nameWithType: Int32Rect.op_Inequality(Int32Rect,Int32Rect)\n  fullName: System.Windows.Int32Rect.op_Inequality(Int32Rect,Int32Rect)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two rectangles for inequality.\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Int32Rect int32Rect1, System.Windows.Int32Rect int32Rect2);\n    parameters:\n    - id: int32Rect1\n      type: System.Windows.Int32Rect\n      description: The first rectangle to compare.\n    - id: int32Rect2\n      type: System.Windows.Int32Rect\n      description: The second rectangle to compare.\n    return:\n      type: System.Boolean\n      description: '**false** if *int32Rect1* and *int32Rect2* have the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*>; otherwise, if all of these values are the same, then **true**.'\n  overload: System.Windows.Int32Rect.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: Int32Rect.Parse(String)\n  fullName: System.Windows.Int32Rect.Parse(String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates an <xref href=\"System.Windows.Int32Rect\"></xref> structure from the specified <xref:System.String> representation.\n  syntax:\n    content: public static System.Windows.Int32Rect Parse (string source);\n    parameters:\n    - id: source\n      type: System.String\n      description: A string representation of an <xref href=\"System.Windows.Int32Rect\"></xref>.\n    return:\n      type: System.Windows.Int32Rect\n      description: The equivalent <xref href=\"System.Windows.Int32Rect\"></xref> structure.\n  overload: System.Windows.Int32Rect.Parse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: System.IFormattable.ToString(String,IFormatProvider)\n  nameWithType: Int32Rect.System.IFormattable.ToString(String,IFormatProvider)\n  fullName: System.Windows.Int32Rect.System.IFormattable.ToString(String,IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Formats the value of the current instance using the specified format.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Int32Rect> instance is cast to an <xref:System.IFormattable> interface.\n  syntax:\n    content: string IFormattable.ToString (string format, IFormatProvider provider);\n    parameters:\n    - id: format\n      type: System.String\n      description: The format to use.\n    - id: provider\n      type: System.IFormatProvider\n      description: The provider to use to format the value\n    return:\n      type: System.String\n      description: The value of the current instance in the specified format.\n  overload: System.Windows.Int32Rect.System#IFormattable#ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.ToString\n  id: ToString\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Int32Rect.ToString()\n  fullName: System.Windows.Int32Rect.ToString()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a string representation of this <xref href=\"System.Windows.Int32Rect\"></xref>.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string containing the same <xref:System.Windows.Int32Rect.X*>, <xref:System.Windows.Int32Rect.Y*>, <xref:System.Windows.Int32Rect.Width*>, and <xref:System.Windows.Int32Rect.Height*> values of this <xref href=\"System.Windows.Int32Rect\"></xref> structure.\n  overload: System.Windows.Int32Rect.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: ToString(IFormatProvider)\n  nameWithType: Int32Rect.ToString(IFormatProvider)\n  fullName: System.Windows.Int32Rect.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Creates a string representation of this <xref href=\"System.Windows.Int32Rect\"></xref> based on the supplied <xref:System.IFormatProvider>.\n  syntax:\n    content: public string ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: The format provider to use. If provider is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the current culture is used.\n    return:\n      type: System.String\n      description: A string representation of this instance of <xref href=\"System.Windows.Int32Rect\"></xref>.\n  overload: System.Windows.Int32Rect.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Width\n  id: Width\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Width\n  nameWithType: Int32Rect.Width\n  fullName: System.Windows.Int32Rect.Width\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the width of the rectangle.\n  syntax:\n    content: public int Width { get; set; }\n    return:\n      type: System.Int32\n      description: The width of the rectangle. The default value is `0`.\n  overload: System.Windows.Int32Rect.Width*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.X\n  id: X\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: X\n  nameWithType: Int32Rect.X\n  fullName: System.Windows.Int32Rect.X\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the x-coordinate of the top-left corner of the rectangle.\n  syntax:\n    content: public int X { get; set; }\n    return:\n      type: System.Int32\n      description: The x-coordinate of the top-left corner of the rectangle. The default value is `0`.\n  overload: System.Windows.Int32Rect.X*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Int32Rect.Y\n  id: Y\n  parent: System.Windows.Int32Rect\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Int32Rect.Y\n  fullName: System.Windows.Int32Rect.Y\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the y-coordinate of the top-left corner of the rectangle.\n  syntax:\n    content: public int Y { get; set; }\n    return:\n      type: System.Int32\n      description: The y-coordinate of the top-left corner of the rectangle. The default value is `0`.\n  overload: System.Windows.Int32Rect.Y*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Int32Rect(Int32,Int32,Int32,Int32)\n  nameWithType: Int32Rect.Int32Rect(Int32,Int32,Int32,Int32)\n  fullName: System.Windows.Int32Rect.Int32Rect(Int32,Int32,Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Int32Rect.Empty\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Empty\n  nameWithType: Int32Rect.Empty\n  fullName: System.Windows.Int32Rect.Empty\n- uid: System.Windows.Int32Rect\n  parent: System.Windows\n  isExternal: false\n  name: Int32Rect\n  nameWithType: Int32Rect\n  fullName: System.Windows.Int32Rect\n- uid: System.Windows.Int32Rect.Equals(System.Object)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Int32Rect.Equals(Object)\n  fullName: System.Windows.Int32Rect.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Equals(Int32Rect)\n  nameWithType: Int32Rect.Equals(Int32Rect)\n  fullName: System.Windows.Int32Rect.Equals(Int32Rect)\n- uid: System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Equals(Int32Rect,Int32Rect)\n  nameWithType: Int32Rect.Equals(Int32Rect,Int32Rect)\n  fullName: System.Windows.Int32Rect.Equals(Int32Rect,Int32Rect)\n- uid: System.Windows.Int32Rect.GetHashCode\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Int32Rect.GetHashCode()\n  fullName: System.Windows.Int32Rect.GetHashCode()\n- uid: System.Windows.Int32Rect.HasArea\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: HasArea\n  nameWithType: Int32Rect.HasArea\n  fullName: System.Windows.Int32Rect.HasArea\n- uid: System.Windows.Int32Rect.Height\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Height\n  nameWithType: Int32Rect.Height\n  fullName: System.Windows.Int32Rect.Height\n- uid: System.Windows.Int32Rect.IsEmpty\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: IsEmpty\n  nameWithType: Int32Rect.IsEmpty\n  fullName: System.Windows.Int32Rect.IsEmpty\n- uid: System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: op_Equality(Int32Rect,Int32Rect)\n  nameWithType: Int32Rect.op_Equality(Int32Rect,Int32Rect)\n  fullName: System.Windows.Int32Rect.op_Equality(Int32Rect,Int32Rect)\n- uid: System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: op_Inequality(Int32Rect,Int32Rect)\n  nameWithType: Int32Rect.op_Inequality(Int32Rect,Int32Rect)\n  fullName: System.Windows.Int32Rect.op_Inequality(Int32Rect,Int32Rect)\n- uid: System.Windows.Int32Rect.Parse(System.String)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Parse(String)\n  nameWithType: Int32Rect.Parse(String)\n  fullName: System.Windows.Int32Rect.Parse(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: System.IFormattable.ToString(String,IFormatProvider)\n  nameWithType: Int32Rect.System.IFormattable.ToString(String,IFormatProvider)\n  fullName: System.Windows.Int32Rect.System.IFormattable.ToString(String,IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: true\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Windows.Int32Rect.ToString\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: ToString()\n  nameWithType: Int32Rect.ToString()\n  fullName: System.Windows.Int32Rect.ToString()\n- uid: System.Windows.Int32Rect.ToString(System.IFormatProvider)\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: ToString(IFormatProvider)\n  nameWithType: Int32Rect.ToString(IFormatProvider)\n  fullName: System.Windows.Int32Rect.ToString(IFormatProvider)\n- uid: System.Windows.Int32Rect.Width\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Width\n  nameWithType: Int32Rect.Width\n  fullName: System.Windows.Int32Rect.Width\n- uid: System.Windows.Int32Rect.X\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: X\n  nameWithType: Int32Rect.X\n  fullName: System.Windows.Int32Rect.X\n- uid: System.Windows.Int32Rect.Y\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Y\n  nameWithType: Int32Rect.Y\n  fullName: System.Windows.Int32Rect.Y\n- uid: System.Windows.Int32Rect.#ctor*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Int32Rect\n  nameWithType: Int32Rect.Int32Rect\n- uid: System.Windows.Int32Rect.Empty*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Empty\n  nameWithType: Int32Rect.Empty\n- uid: System.Windows.Int32Rect.Equals*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Equals\n  nameWithType: Int32Rect.Equals\n- uid: System.Windows.Int32Rect.GetHashCode*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Int32Rect.GetHashCode\n- uid: System.Windows.Int32Rect.HasArea*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: HasArea\n  nameWithType: Int32Rect.HasArea\n- uid: System.Windows.Int32Rect.Height*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Height\n  nameWithType: Int32Rect.Height\n- uid: System.Windows.Int32Rect.IsEmpty*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: IsEmpty\n  nameWithType: Int32Rect.IsEmpty\n- uid: System.Windows.Int32Rect.op_Equality*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: op_Equality\n  nameWithType: Int32Rect.op_Equality\n- uid: System.Windows.Int32Rect.op_Inequality*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Int32Rect.op_Inequality\n- uid: System.Windows.Int32Rect.Parse*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Parse\n  nameWithType: Int32Rect.Parse\n- uid: System.Windows.Int32Rect.System#IFormattable#ToString*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: System.IFormattable.ToString\n  nameWithType: Int32Rect.System.IFormattable.ToString\n- uid: System.Windows.Int32Rect.ToString*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: ToString\n  nameWithType: Int32Rect.ToString\n- uid: System.Windows.Int32Rect.Width*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Width\n  nameWithType: Int32Rect.Width\n- uid: System.Windows.Int32Rect.X*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: X\n  nameWithType: Int32Rect.X\n- uid: System.Windows.Int32Rect.Y*\n  parent: System.Windows.Int32Rect\n  isExternal: false\n  name: Y\n  nameWithType: Int32Rect.Y\n"}