{"nodes":[{"pos":[3951,4015],"content":"Defines methods for managing client scripts in Web applications.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines methods for managing client scripts in Web applications.","pos":[0,64]}]},{"pos":[4028,7680],"content":"The ClientScriptManager class is used to manage client scripts and add them to Web applications. You can get a reference to the ClientScriptManager class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object.       You can add a client script to a Web page declaratively by including the script in the HTML markup of the page. However, there are situations when adding client script dynamically is needed. To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script. For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).       The ClientScriptManager class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>. Scripts with the same key and type are considered duplicates. Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.       The ClientScriptManager class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback. This is referred to as performing an out-of-band callback to the server. In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page. The Web page runs a modified version of its normal life cycle to process the callback. Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client. To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object.       Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event. These methods enable client script functions, when invoked, to cause the server to post back to the page. A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.      > [!NOTE] >  If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control.       The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ClientScriptManager class is used to manage client scripts and add them to Web applications.","pos":[0,96]},{"content":"You can get a reference to the ClientScriptManager class from the &lt;xref:System.Web.UI.Page.ClientScript%2A&gt; property of the &lt;xref:System.Web.UI.Page&gt; object.","pos":[97,254],"source":" You can get a reference to the ClientScriptManager class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object."},{"content":"You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.","pos":[261,372]},{"content":"However, there are situations when adding client script dynamically is needed.","pos":[373,451]},{"content":"To add a script dynamically, use the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method, the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt; method, the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method, or the &lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt; method, depending on when and how you want to add the script.","pos":[452,867],"source":" To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add Client Script Dynamically to ASP.NET Web Pages<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[868,994],"source":" For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."},{"content":"The ClientScriptManager class uniquely identifies scripts by a key &lt;xref:System.String&gt; and a &lt;xref:System.Type&gt;.","pos":[1001,1114],"source":"       The ClientScriptManager class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>."},{"content":"Scripts with the same key and type are considered duplicates.","pos":[1115,1176]},{"content":"Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.","pos":[1177,1302]},{"content":"The ClientScriptManager class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.","pos":[1309,1478]},{"content":"This is referred to as performing an out-of-band callback to the server.","pos":[1479,1551]},{"content":"In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.","pos":[1552,1652]},{"content":"The Web page runs a modified version of its normal life cycle to process the callback.","pos":[1653,1739]},{"content":"Use the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.","pos":[1740,1934],"source":" Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implementing Client Callbacks Without Postbacks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1935,2050],"source":" For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.","pos":[2056,2229],"source":"      > [!NOTE] >  Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client."},{"content":"To check if the browser supports callbacks, use the &lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt; property, which is accessible through the &lt;xref:System.Web.HttpRequest.Browser%2A&gt; property of the ASP.NET intrinsic &lt;xref:System.Web.HttpContext.Request%2A&gt; object.","pos":[2230,2520],"source":" To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object."},{"content":"Use the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method and the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A&gt; method to define a client postback event.","pos":[2527,2732],"source":"       Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event."},{"content":"These methods enable client script functions, when invoked, to cause the server to post back to the page.","pos":[2733,2838]},{"content":"A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.","pos":[2839,2987]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you are using a &lt;xref:System.Web.UI.WebControls.Button&gt; control and the &lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt; property is set to <ph id=\"ph2\">`false`</ph>, then you can use the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method to return the client postback event for the &lt;xref:System.Web.UI.WebControls.Button&gt; control.","pos":[2993,3360],"source":"      > [!NOTE] >  If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control."},{"content":"The &lt;xref:System.Web.UI.WebControls.Button.OnClientClick%2A&gt; property of the &lt;xref:System.Web.UI.WebControls.Button&gt; control, &lt;xref:System.Web.UI.WebControls.ImageButton&gt; control, and &lt;xref:System.Web.UI.WebControls.LinkButton&gt; control can be used to run client script.","pos":[3367,3636],"source":"       The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script."}]},{"pos":[9096,9319],"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.","pos":[0,223],"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.","pos":[0,108]},{"content":"The client function for this overloaded method includes a specified control, argument, client script, and context.","pos":[109,223]}]}]},{"pos":[9332,12119],"content":"The GetCallbackEventReference method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls. For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used. To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property. To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property. Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object.       The GetCallbackEventReference overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP. When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser. No two synchronous callbacks callback can execute at the same time in the browser. If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.       To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior. In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.       Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method. To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter.       The GetCallbackEventReference method takes an optional string `argument` parameter and returns a string. To pass in or to receive multiple values, concatenate values in the input or return string, respectively.      > [!NOTE] >  Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations. If the properties are to survive page requests, you can use session state.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetCallbackEventReference method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.","pos":[0,141]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implementing Client Callbacks Without Postbacks<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[142,257],"source":" For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.","pos":[263,493],"source":"      > [!NOTE] >  When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls."},{"content":"For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.","pos":[494,594]},{"content":"To check whether a browser supports client callbacks, use the &lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt; property.","pos":[595,739],"source":" To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property."},{"content":"To check whether a browser supports XML over HTTP, use the &lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A&gt; property.","pos":[740,880],"source":" To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property."},{"content":"Both properties are accessible through the &lt;xref:System.Web.HttpRequest.Browser%2A&gt; property of the intrinsic ASP.NET &lt;xref:System.Web.HttpContext.Request%2A&gt; object.","pos":[881,1047],"source":" Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object."},{"content":"The GetCallbackEventReference overload of the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method performs a callback synchronously using XML over HTTP.","pos":[1054,1231],"source":"       The GetCallbackEventReference overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP."},{"content":"When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.","pos":[1232,1358]},{"content":"No two synchronous callbacks callback can execute at the same time in the browser.","pos":[1359,1441]},{"content":"If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.","pos":[1442,1607]},{"content":"To send data asynchronously, use one of the overloads that takes the <ph id=\"ph1\">`useAsync`</ph> parameter, which is a Boolean value controlling this behavior.","pos":[1614,1756],"source":"       To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior."},{"content":"In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.","pos":[1757,1933]},{"content":"Additionally, this overload of the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method specifies no client function to handle the case of an error condition generated by the &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt; method.","pos":[1940,2211],"source":"       Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method."},{"content":"To specify a client error callback handler, use one of the overloads that takes the <ph id=\"ph1\">`clientErrorCallback`</ph> parameter.","pos":[2212,2328],"source":" To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter."},{"content":"The GetCallbackEventReference method takes an optional string <ph id=\"ph1\">`argument`</ph> parameter and returns a string.","pos":[2335,2439],"source":"       The GetCallbackEventReference method takes an optional string `argument` parameter and returns a string."},{"content":"To pass in or to receive multiple values, concatenate values in the input or return string, respectively.","pos":[2440,2545]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.","pos":[2551,2698],"source":"      > [!NOTE] >  Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations."},{"content":"If the properties are to survive page requests, you can use session state.","pos":[2699,2773]}]},{"pos":[13542,13812],"content":"The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that handles the client callback.","pos":[0,87],"source":"The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback."},{"content":"The control must implement the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and provide a &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[88,270],"source":" The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[13878,14012],"content":"An argument passed from the client script to the server       <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"An argument passed from the client script to the server       &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[0,132],"source":"An argument passed from the client script to the server       <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[14084,14177],"content":"The name of the client event handler that receives the result of the successful server event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client event handler that receives the result of the successful server event.","pos":[0,93]}]},{"pos":[14241,14393],"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","pos":[0,152],"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback.","pos":[0,83]},{"content":"The result of the script is passed back to the client event handler.","pos":[84,152]}]}]},{"pos":[14451,14514],"content":"The name of a client function that invokes the client callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a client function that invokes the client callback.","pos":[0,63]}]},{"pos":[14704,14825],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> specified is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14936,15083],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified does not implement the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> specified does not implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface."},{"pos":[15794,16031],"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.","pos":[0,237],"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events.","pos":[0,107]},{"content":"The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.","pos":[108,237]}]}]},{"pos":[16044,16544],"content":"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`. The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.       For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method requires a <ph id=\"ph1\">`useAsync`</ph> parameter, which allows you to perform the client callback asynchronously by setting the value to <ph id=\"ph2\">`true`</ph>.","pos":[0,225],"source":"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`."},{"content":"The overload versions of this method that do not require the <ph id=\"ph1\">`useAsync`</ph> parameter set the value to <ph id=\"ph2\">`false`</ph> by default.","pos":[226,344],"source":" The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default."},{"content":"For more information on this method, see the remarks for the overload &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method.","pos":[351,498],"source":"       For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method."}]},{"pos":[16800,17070],"content":"The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that handles the client callback.","pos":[0,87],"source":"The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback."},{"content":"The control must implement the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and provide a &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[88,270],"source":" The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[17136,17270],"content":"An argument passed from the client script to the server       <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"An argument passed from the client script to the server       &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[0,132],"source":"An argument passed from the client script to the server       <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[17342,17435],"content":"The name of the client event handler that receives the result of the successful server event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client event handler that receives the result of the successful server event.","pos":[0,93]}]},{"pos":[17499,17651],"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","pos":[0,152],"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback.","pos":[0,83]},{"content":"The result of the script is passed back to the client event handler.","pos":[84,152]}]}]},{"pos":[17717,17919],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to perform the callback asynchronously; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to perform the callback synchronously.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to perform the callback asynchronously; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to perform the callback synchronously."},{"pos":[17977,18040],"content":"The name of a client function that invokes the client callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a client function that invokes the client callback.","pos":[0,63]}]},{"pos":[18230,18351],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> specified is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18462,18609],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified does not implement the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> specified does not implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface."},{"pos":[19350,19601],"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.","pos":[0,251],"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events.","pos":[0,107]},{"content":"The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.","pos":[108,251]}]}]},{"pos":[19614,20867],"content":"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter. Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control.       Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter. The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`. The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default. The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error. The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.       For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method takes a <ph id=\"ph1\">`target`</ph> string parameter instead of a &lt;xref:System.Web.UI.Control&gt; parameter.","pos":[0,184],"source":"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter."},{"content":"Use this overload when you want the callback to go back to something other than a string containing the &lt;xref:System.Web.UI.Control.UniqueID%2A&gt; of the control.","pos":[185,345],"source":" Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control."},{"content":"Additionally, this overload of the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method requires a <ph id=\"ph1\">`useAsync`</ph> and a <ph id=\"ph2\">`clientErrorCallback`</ph> parameter.","pos":[352,524],"source":"       Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter."},{"content":"The <ph id=\"ph1\">`useAsync`</ph> parameter allows you to perform the client callback asynchronously by setting the value to <ph id=\"ph2\">`true`</ph>.","pos":[525,638],"source":" The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`."},{"content":"The overload versions of this method that do not require the <ph id=\"ph1\">`useAsync`</ph> parameter set the value to <ph id=\"ph2\">`false`</ph> by default.","pos":[639,757],"source":" The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default."},{"content":"The <ph id=\"ph1\">`clientErrorCallback`</ph> parameter allows you to define the name of the client function that is called if the server handler, the &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt; method, returns an error.","pos":[758,979],"source":" The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error."},{"content":"The overload versions of this method that do not require the <ph id=\"ph1\">`clientErrorCallback`</ph> parameter set the value to null.","pos":[980,1095],"source":" The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null."},{"content":"For more information on this method, see the remarks for the overload &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method.","pos":[1102,1249],"source":"       For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method."}]},{"pos":[22308,22588],"content":"The name of a server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a server <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that handles the client callback.","pos":[0,97],"source":"The name of a server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback."},{"content":"The control must implement the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and provide a &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[98,280],"source":" The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[22654,22788],"content":"An argument passed from the client script to the server       <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"An argument passed from the client script to the server       &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[0,132],"source":"An argument passed from the client script to the server       <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[22860,22953],"content":"The name of the client event handler that receives the result of the successful server event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client event handler that receives the result of the successful server event.","pos":[0,93]}]},{"pos":[23017,23169],"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","pos":[0,152],"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback.","pos":[0,83]},{"content":"The result of the script is passed back to the client event handler.","pos":[84,152]}]}]},{"pos":[23245,23356],"content":"The name of the client event handler that receives the result when an error occurs in the server event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client event handler that receives the result when an error occurs in the server event handler.","pos":[0,111]}]},{"pos":[23422,23626],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to perform the callback asynchronously; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to perform the callback synchronously.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref> to perform the callback asynchronously; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to perform the callback synchronously."},{"pos":[23684,23747],"content":"The name of a client function that invokes the client callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a client function that invokes the client callback.","pos":[0,63]}]},{"pos":[24597,24849],"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.","pos":[0,252],"nodes":[{"content":"Obtains a reference to a client function that, when invoked, initiates a client call back to server events.","pos":[0,107]},{"content":"The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.","pos":[108,252]}]}]},{"pos":[24862,25747],"content":"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter. The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`. The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default. The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error. The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.       For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method requires a <ph id=\"ph1\">`useAsync`</ph> and a <ph id=\"ph2\">`clientErrorCallback`</ph> parameter.","pos":[0,158],"source":"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter."},{"content":"The <ph id=\"ph1\">`useAsync`</ph> parameter allows you to perform the client callback asynchronously by setting the value to <ph id=\"ph2\">`true`</ph>.","pos":[159,272],"source":" The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`."},{"content":"The overload versions of this method that do not require the <ph id=\"ph1\">`useAsync`</ph> parameter set the value to <ph id=\"ph2\">`false`</ph> by default.","pos":[273,391],"source":" The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default."},{"content":"The <ph id=\"ph1\">`clientErrorCallback`</ph> parameter allows you to define the name of the client function that is called if the server handler (the &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt; method) returns an error.","pos":[392,613],"source":" The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error."},{"content":"The overload versions of this method that do not require the <ph id=\"ph1\">`clientErrorCallback`</ph> parameter set the value to null.","pos":[614,729],"source":" The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null."},{"content":"For more information on this method, see the remarks for the overload &lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt; method.","pos":[736,883],"source":"       For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method."}]},{"pos":[26031,26301],"content":"The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that handles the client callback.","pos":[0,87],"source":"The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback."},{"content":"The control must implement the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and provide a &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[88,270],"source":" The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[26366,26492],"content":"An argument passed from the client script to the server <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An argument passed from the client script to the server &lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*&gt; method.","pos":[0,126],"source":"An argument passed from the client script to the server <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method."}]},{"pos":[26563,26656],"content":"The name of the client event handler that receives the result of the successful server event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client event handler that receives the result of the successful server event.","pos":[0,93]}]},{"pos":[26720,26872],"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.","pos":[0,152],"nodes":[{"content":"The client script that is evaluated on the client prior to initiating the callback.","pos":[0,83]},{"content":"The result of the script is passed back to the client event handler.","pos":[84,152]}]}]},{"pos":[26948,27059],"content":"The name of the client event handler that receives the result when an error occurs in the server event handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client event handler that receives the result when an error occurs in the server event handler.","pos":[0,111]}]},{"pos":[27125,27328],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>to perform the callback asynchronously; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to perform the callback synchronously.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref>to perform the callback asynchronously; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to perform the callback synchronously."},{"pos":[27386,27449],"content":"The name of a client function that invokes the client callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a client function that invokes the client callback.","pos":[0,63]}]},{"pos":[27639,27760],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> specified is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27871,28018],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> specified does not implement the <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.ICallbackEventHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> specified does not implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface."},{"pos":[28582,28840],"content":"Gets a reference, with <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_javascript:\" name=\"javascript:\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.","needQuote":true,"needEscape":true,"source":"Gets a reference, with <xref uid=\"langword_csharp_javascript:\" name=\"javascript:\" href=\"\"></xref> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments."},{"pos":[28852,29180],"content":"Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface. To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface. To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.","pos":[0,328],"nodes":[{"content":"Using the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method requires the control that handles the postback to implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface.","pos":[0,204],"source":"Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface."},{"content":"To implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface for a &lt;xref:System.Web.UI.Page&gt;,  use the  directive.","pos":[205,328],"source":" To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive."}]}]},{"pos":[30442,30485],"content":"The server control to process the postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server control to process the postback.","pos":[0,43]}]},{"pos":[30550,30593],"content":"The parameter passed to the server control.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter passed to the server control.","pos":[0,43]}]},{"pos":[30651,30774],"content":"A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.","pos":[0,123]}]},{"pos":[31483,31815],"content":"Gets a reference, with <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_javascript:\" name=\"javascript:\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.","needQuote":true,"needEscape":true,"source":"Gets a reference, with <xref uid=\"langword_csharp_javascript:\" name=\"javascript:\" href=\"\"></xref> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation."},{"pos":[31827,32154],"content":"Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface. To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface. To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.","pos":[0,327],"nodes":[{"content":"Using the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method requires the control that handles the postback to implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface.","pos":[0,204],"source":"Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface."},{"content":"To implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface for a &lt;xref:System.Web.UI.Page&gt;, use the  directive.","pos":[205,327],"source":" To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive."}]}]},{"pos":[32389,32432],"content":"The server control to process the postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server control to process the postback.","pos":[0,43]}]},{"pos":[32497,32540],"content":"The parameter passed to the server control.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter passed to the server control.","pos":[0,43]}]},{"pos":[32624,32846],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to register the postback event for validation; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to not register the post back event for validation.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to register the postback event for validation; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to not register the post back event for validation."},{"pos":[32904,33027],"content":"A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.","pos":[0,123]}]},{"pos":[33668,33862],"content":"Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <xref href=\"System.Web.UI.PostBackOptions\"></xref> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that can be used in a client event to cause postback to the server.","pos":[0,84]},{"content":"The reference string is defined by the specified <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[85,194],"source":" The reference string is defined by the specified <xref href=\"System.Web.UI.PostBackOptions\"></xref> instance."}]},{"pos":[33875,34437],"content":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface for a &lt;xref:System.Web.UI.Page&gt;,  use the  directive.","pos":[0,123],"source":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive."},{"content":"The &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method can be used with the &lt;xref:System.Web.UI.WebControls.Button&gt; control when the &lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[130,370],"source":"       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`."},{"content":"In this scenario, the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method returns the client postback event for the &lt;xref:System.Web.UI.WebControls.Button&gt; control.","pos":[371,560],"source":" In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control."}]},{"pos":[34638,34717],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the postback.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.PostBackOptions\"></xref> that defines the postback."},{"pos":[34775,34858],"content":"A string that, when treated as script on the client, initiates the client postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that, when treated as script on the client, initiates the client postback.","pos":[0,83]}]},{"pos":[35048,35176],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.PostBackOptions\"></xref> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>"},{"pos":[35735,35957],"content":"Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.","pos":[0,222],"nodes":[{"content":"Returns a string that can be used in a client event to cause postback to the server.","pos":[0,84]},{"content":"The reference string is defined by the specified control that handles the postback and a string argument of additional event information.","pos":[85,222]}]}]},{"pos":[35970,36532],"content":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface for a &lt;xref:System.Web.UI.Page&gt;,  use the  directive.","pos":[0,123],"source":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive."},{"content":"The &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method can be used with the &lt;xref:System.Web.UI.WebControls.Button&gt; control when the &lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[130,370],"source":"       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`."},{"content":"In this scenario, the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method returns the client postback event for the &lt;xref:System.Web.UI.WebControls.Button&gt; control.","pos":[371,560],"source":" In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control."}]},{"pos":[37780,37876],"content":"The server <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that processes the postback on the server.","needQuote":true,"needEscape":true,"source":"The server <xref href=\"System.Web.UI.Control\"></xref> that processes the postback on the server."},{"pos":[37941,38023],"content":"A string of optional arguments to pass to the control that processes the postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string of optional arguments to pass to the control that processes the postback.","pos":[0,82]}]},{"pos":[38081,38157],"content":"A string that, when treated as script on the client, initiates the postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that, when treated as script on the client, initiates the postback.","pos":[0,76]}]},{"pos":[38347,38468],"content":"The specified <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified <xref href=\"System.Web.UI.Control\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[39072,39322],"content":"Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <xref href=\"System.Web.UI.PostBackOptions\"></xref> object. Optionally, registers the event reference for validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string that can be used in a client event to cause postback to the server.","pos":[0,84]},{"content":"The reference string is defined by the specified <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[85,192],"source":" The reference string is defined by the specified <xref href=\"System.Web.UI.PostBackOptions\"></xref> object."},{"content":"Optionally, registers the event reference for validation.","pos":[193,250]}]},{"pos":[39335,40248],"content":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive.       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.       If `registerForEventValidation` is `true`, the GetPostBackEventReference method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface for a &lt;xref:System.Web.UI.Page&gt; object, use the  directive.","pos":[0,129],"source":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive."},{"content":"The &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method can be used with the &lt;xref:System.Web.UI.WebControls.Button&gt; control when the &lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[136,376],"source":"       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`."},{"content":"In this scenario, the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method returns the client postback event for the &lt;xref:System.Web.UI.WebControls.Button&gt; control.","pos":[377,566],"source":" In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control."},{"content":"If <ph id=\"ph1\">`registerForEventValidation`</ph> is <ph id=\"ph2\">`true`</ph>, the GetPostBackEventReference method calls the &lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt; method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.","pos":[573,909],"source":"       If `registerForEventValidation` is `true`, the GetPostBackEventReference method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event."}]},{"pos":[40482,40561],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that defines the postback.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.PostBackOptions\"></xref> that defines the postback."},{"pos":[40645,40828],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to register the event reference for validation; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to register the event reference for validation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[40886,40969],"content":"A string that, when treated as script on the client, initiates the client postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that, when treated as script on the client, initiates the client postback.","pos":[0,83]}]},{"pos":[41159,41278],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.PostBackOptions\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[41891,42161],"content":"Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.","pos":[0,270],"nodes":[{"content":"Returns a string to use in a client event to cause postback to the server.","pos":[0,74]},{"content":"The reference string is defined by the specified control that handles the postback and a string argument of additional event information.","pos":[75,212]},{"content":"Optionally, registers the event reference for validation.","pos":[213,270]}]}]},{"pos":[42174,43171],"content":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.       If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To implement the &lt;xref:System.Web.UI.IPostBackEventHandler&gt; interface for a &lt;xref:System.Web.UI.Page&gt;, use the  directive.","pos":[0,122],"source":"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive."},{"content":"The &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method can be used with the &lt;xref:System.Web.UI.WebControls.Button&gt; control when the &lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[129,369],"source":"       The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`."},{"content":"In this scenario, the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt; method returns the client postback event for the &lt;xref:System.Web.UI.WebControls.Button&gt; control.","pos":[370,559],"source":" In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control."},{"content":"If <ph id=\"ph1\">`registerForEventValidation`</ph> is true, the &lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt; method calls the &lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt; method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.","pos":[566,993],"source":"       If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event."}]},{"pos":[43406,43502],"content":"The server <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that processes the postback on the server.","needQuote":true,"needEscape":true,"source":"The server <xref href=\"System.Web.UI.Control\"></xref> that processes the postback on the server."},{"pos":[43567,43619],"content":"A string of optional arguments to pass to <ph id=\"ph1\">`control`</ph>.","needQuote":true,"needEscape":true,"source":"A string of optional arguments to pass to `control`."},{"pos":[43703,43886],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to register the event reference for validation; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to register the event reference for validation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[43944,44020],"content":"A string that, when treated as script on the client, initiates the postback.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that, when treated as script on the client, initiates the postback.","pos":[0,76]}]},{"pos":[44210,44331],"content":"The specified <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified <xref href=\"System.Web.UI.Control\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[44821,44871],"content":"Gets a URL reference to a resource in an assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a URL reference to a resource in an assembly.","pos":[0,50]}]},{"pos":[44884,45784],"content":"The GetWebResourceUrl method returns a URL reference to a resource embedded in an assembly. The returned reference is not URL encoded. Resources can be script files, images, or any static file. You specify the type based on the object that will be accessing the resource.       A Web resource registered with the page is uniquely identified by its type and name. Only one resource with a given type and name pair can be registered with the page. Attempting to register a resource that is already registered does not create a duplicate of the registered resource.       The GetWebResourceUrl method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies. For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetWebResourceUrl method returns a URL reference to a resource embedded in an assembly.","pos":[0,91]},{"content":"The returned reference is not URL encoded.","pos":[92,134]},{"content":"Resources can be script files, images, or any static file.","pos":[135,193]},{"content":"You specify the type based on the object that will be accessing the resource.","pos":[194,271]},{"content":"A Web resource registered with the page is uniquely identified by its type and name.","pos":[278,362]},{"content":"Only one resource with a given type and name pair can be registered with the page.","pos":[363,445]},{"content":"Attempting to register a resource that is already registered does not create a duplicate of the registered resource.","pos":[446,562]},{"content":"The GetWebResourceUrl method is used in conjunction with the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt; method for accessing resources embedded in assemblies.","pos":[569,757],"source":"       The GetWebResourceUrl method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies."},{"content":"For more information on using resources in applications, see <bpt id=\"p1\">[</bpt>ASP.NET Web Page Resources Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[758,896],"source":" For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[47715,47740],"content":"The type of the resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the resource.","pos":[0,25]}]},{"pos":[47809,47866],"content":"The fully qualified name of the resource in the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified name of the resource in the assembly.","pos":[0,57]}]},{"pos":[47924,47958],"content":"The URL reference to the resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL reference to the resource.","pos":[0,34]}]},{"pos":[48814,48951],"content":"Determines whether the client script block is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using the specified key.","needQuote":true,"needEscape":true,"source":"Determines whether the client script block is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key."},{"pos":[48964,49582],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.       A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.       This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method to avoid registering duplicate scripts.","pos":[0,152],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts."},{"content":"This is particularly important if the script requires a large amount of server resources to create.","pos":[153,252]},{"content":"A client script is uniquely identified by its key and its type.","pos":[259,322]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[323,384]},{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt; method calls the overload that takes both a <ph id=\"ph1\">`key`</ph> and a <ph id=\"ph2\">`type`</ph> parameter with the type set as a &lt;xref:System.Web.UI.Page&gt; object","pos":[391,614],"source":"       This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object"}]},{"pos":[49988,50037],"content":"The key of the client script block to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script block to search for.","pos":[0,49]}]},{"pos":[50096,50273],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the client script block is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script block is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[50917,51051],"content":"Determines whether the client script block is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a key and type.","needQuote":true,"needEscape":true,"source":"Determines whether the client script block is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using a key and type."},{"pos":[51064,51624],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.       A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a `Page` instance to access the resource, you specify the `Page` type.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method to avoid registering duplicate scripts.","pos":[0,152],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts."},{"content":"This is particularly important if the script requires a large amount of server resources to create.","pos":[153,252]},{"content":"A client script is uniquely identified by its key and its type.","pos":[259,322]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[323,384]},{"content":"You specify the type based on the object that will be accessing the resource.","pos":[385,462]},{"content":"For instance, when using a <ph id=\"ph1\">`Page`</ph> instance to access the resource, you specify the <ph id=\"ph2\">`Page`</ph> type.","pos":[463,558],"source":" For instance, when using a `Page` instance to access the resource, you specify the `Page` type."}]},{"pos":[52480,52530],"content":"The type of the client script block to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the client script block to search for.","pos":[0,50]}]},{"pos":[52590,52639],"content":"The key of the client script block to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script block to search for.","pos":[0,49]}]},{"pos":[52698,52875],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the client script block is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script block is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[53069,53156],"content":"The client script type is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The client script type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[53677,53816],"content":"Determines whether the client script include is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using the specified key.","needQuote":true,"needEscape":true,"source":"Determines whether the client script include is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key."},{"pos":[53829,54454],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.       A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.       This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt; method to avoid registering duplicate scripts.","pos":[0,154],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts."},{"content":"This is particularly important if the script requires a large amount of server resources to create.","pos":[155,254]},{"content":"A client script include is uniquely identified by its key and its type.","pos":[261,332]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[333,394]},{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt; method calls the overload that takes both a <ph id=\"ph1\">`key`</ph> and a <ph id=\"ph2\">`type`</ph> parameter with the type set as a &lt;xref:System.Web.UI.Page&gt; object.","pos":[401,621],"source":"       This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object."}]},{"pos":[54612,54663],"content":"The key of the client script include to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script include to search for.","pos":[0,51]}]},{"pos":[54722,54901],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the client script include is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script include is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[55557,55693],"content":"Determines whether the client script include is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a key and type.","needQuote":true,"needEscape":true,"source":"Determines whether the client script include is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using a key and type."},{"pos":[55706,56289],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes. This is particularly important if the script requires a large amount of server resources to create.       A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the `Page` type.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt; method to avoid registering duplicate client script includes.","pos":[0,169],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes."},{"content":"This is particularly important if the script requires a large amount of server resources to create.","pos":[170,269]},{"content":"A client script include is uniquely identified by its key and its type.","pos":[276,347]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[348,409]},{"content":"You specify the type based on the object that will be accessing the resource.","pos":[410,487]},{"content":"For instance, when using a Page instance to access the resource, you specify the <ph id=\"ph1\">`Page`</ph> type.","pos":[488,581],"source":" For instance, when using a Page instance to access the resource, you specify the `Page` type."}]},{"pos":[57347,57399],"content":"The type of the client script include to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the client script include to search for.","pos":[0,52]}]},{"pos":[57459,57510],"content":"The key of the client script include to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script include to search for.","pos":[0,51]}]},{"pos":[57569,57748],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the client script include is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script include is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[57944,58039],"content":"The client script include type is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The client script include type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[58550,58686],"content":"Determines whether the OnSubmit statement is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using the specified key.","needQuote":true,"needEscape":true,"source":"Determines whether the OnSubmit statement is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key."},{"pos":[58699,59331],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements. This is particularly important if the statement requires a large amount of server resources to create.       A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates.       This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt; method to avoid registering duplicate OnSubmit statements.","pos":[0,164],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements."},{"content":"This is particularly important if the statement requires a large amount of server resources to create.","pos":[165,267]},{"content":"A statement is uniquely identified by its key and its type.","pos":[274,333]},{"content":"Statements with the same key and type are considered duplicates.","pos":[334,398]},{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt; method calls the overload that takes both a <ph id=\"ph1\">`key`</ph> and a <ph id=\"ph2\">`type`</ph> parameter with the type set as a &lt;xref:System.Web.UI.Page&gt; object","pos":[405,628],"source":"       This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object"}]},{"pos":[59487,59535],"content":"The key of the OnSubmit statement to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the OnSubmit statement to search for.","pos":[0,48]}]},{"pos":[59594,59770],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the OnSubmit statement is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the OnSubmit statement is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[60414,60559],"content":"Determines whether the OnSubmit statement is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using the specified key and type.","needQuote":true,"needEscape":true,"source":"Determines whether the OnSubmit statement is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key and type."},{"pos":[60572,61137],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements. This is particularly important if the statement requires a large amount of server resources to create.       A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a `Page` instance to access the resource, you specify the `Page` type.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt; method to avoid registering duplicate statements.","pos":[0,155],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements."},{"content":"This is particularly important if the statement requires a large amount of server resources to create.","pos":[156,258]},{"content":"A statement is uniquely identified by its key and its type.","pos":[265,324]},{"content":"Statements with the same key and type are considered duplicates.","pos":[325,389]},{"content":"You specify the type based on the object that will be accessing the resource.","pos":[390,467]},{"content":"For instance, when using a <ph id=\"ph1\">`Page`</ph> instance to access the resource, you specify the <ph id=\"ph2\">`Page`</ph> type.","pos":[468,563],"source":" For instance, when using a `Page` instance to access the resource, you specify the `Page` type."}]},{"pos":[61788,61837],"content":"The type of the OnSubmit statement to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the OnSubmit statement to search for.","pos":[0,49]}]},{"pos":[61897,61945],"content":"The key of the OnSubmit statement to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the OnSubmit statement to search for.","pos":[0,48]}]},{"pos":[62004,62180],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the OnSubmit statement is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the OnSubmit statement is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[62374,62466],"content":"The OnSubmit statement type is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The OnSubmit statement type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[62957,63089],"content":"Determines whether the startup script is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using the specified key.","needQuote":true,"needEscape":true,"source":"Determines whether the startup script is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key."},{"pos":[63102,63720],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.       A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.       This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method to avoid registering duplicate scripts.","pos":[0,148],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts."},{"content":"This is particularly important if the script requires a large amount of server resources to create.","pos":[149,248]},{"content":"A startup script is uniquely identified by its key and its type.","pos":[255,319]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[320,381]},{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt; method calls the overload that takes both a string <ph id=\"ph1\">`key`</ph> and a <ph id=\"ph2\">`type`</ph> parameter with the type set as a &lt;xref:System.Web.UI.Page&gt; object","pos":[388,614],"source":"       This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object"}]},{"pos":[63872,63916],"content":"The key of the startup script to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the startup script to search for.","pos":[0,44]}]},{"pos":[63975,64147],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the startup script is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the startup script is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[64767,64908],"content":"Determines whether the startup script is registered with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using the specified key and type.","needQuote":true,"needEscape":true,"source":"Determines whether the startup script is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key and type."},{"pos":[64921,65311],"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.       A client startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.       A client startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.","pos":[0,388],"nodes":[{"content":"Call this method before calling the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method to avoid registering duplicate scripts.","pos":[0,148],"source":"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts."},{"content":"This is particularly important if the script requires a large amount of server resources to create.","pos":[149,248]},{"content":"A client startup script is uniquely identified by its key and its type.","pos":[255,326]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[327,388]}]}]},{"pos":[66157,66202],"content":"The type of the startup script to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the startup script to search for.","pos":[0,45]}]},{"pos":[66262,66306],"content":"The key of the startup script to search for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the startup script to search for.","pos":[0,44]}]},{"pos":[66365,66537],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the startup script is registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the startup script is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[66727,66815],"content":"The startup script type is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The startup script type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[67350,67483],"content":"Registers a JavaScript array declaration with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using an array name and array value.","needQuote":true,"needEscape":true,"source":"Registers a JavaScript array declaration with the <xref href=\"System.Web.UI.Page\"></xref> object using an array name and array value."},{"pos":[69112,69139],"content":"The array name to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array name to register.","pos":[0,27]}]},{"pos":[69206,69244],"content":"The array value or values to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array value or values to register.","pos":[0,38]}]},{"pos":[69433,69520],"content":"<ph id=\"ph1\">&lt;code&gt;arrayName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>arrayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[70099,70221],"content":"Registers the client script with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type, key, and script literal.","needQuote":true,"needEscape":true,"source":"Registers the client script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, key, and script literal."},{"pos":[70234,71436],"content":"A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.       Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block.       The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A client script is uniquely identified by its key and its type.","pos":[0,63]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[64,125]},{"content":"Only one script with a given type and key pair can be registered with the page.","pos":[126,205]},{"content":"Attempting to register a script that is already registered does not create a duplicate of the script.","pos":[206,307]},{"content":"Call the &lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt; method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.","pos":[314,547],"source":"       Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script."},{"content":"In this overload of the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method, you must make sure that the script provided in the <ph id=\"ph1\">`script`</ph> parameter is wrapped in a <ph id=\"ph2\">`&lt;script&gt;`</ph> element block.","pos":[554,767],"source":"       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block."},{"content":"The &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method adds a script block to the top of the rendered page.","pos":[774,907],"source":"       The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page."},{"content":"The script blocks are not guaranteed to be output in the order they are registered.","pos":[908,991]},{"content":"If the order of the script blocks is important, use a &lt;xref:System.Text.StringBuilder&gt; object to gather the scripts together in a single string, and then register them all in a single client script block.","pos":[992,1196],"source":" If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block."}]},{"pos":[71950,71992],"content":"The type of the client script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the client script to register.","pos":[0,42]}]},{"pos":[72052,72093],"content":"The key of the client script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script to register.","pos":[0,41]}]},{"pos":[72156,72194],"content":"The client script literal to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client script literal to register.","pos":[0,38]}]},{"pos":[72917,73092],"content":"Registers the client script with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type, key, script literal, and Boolean value indicating whether to add script tags.","needQuote":true,"needEscape":true,"source":"Registers the client script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, key, script literal, and Boolean value indicating whether to add script tags."},{"pos":[73105,74450],"content":"A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.       Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered. This lets you avoid unnecessarily attempting to add the script.       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter. Setting `addScriptTags` to `true` indicates that script tags will be added automatically.       The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A client script is uniquely identified by its key and its type.","pos":[0,63]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[64,125]},{"content":"Only one script with a given type and key pair can be registered with the page.","pos":[126,205]},{"content":"Attempting to register a script that is already registered does not create a duplicate of the script.","pos":[206,307]},{"content":"Call the &lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt; method to determine whether a client script with a given key and type pair is already registered.","pos":[314,494],"source":"       Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered."},{"content":"This lets you avoid unnecessarily attempting to add the script.","pos":[495,558]},{"content":"In this overload of the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method, you can indicate whether the script provided in the <ph id=\"ph1\">`script`</ph> parameter is wrapped with a <ph id=\"ph2\">`&lt;script&gt;`</ph> element block by using the <ph id=\"ph3\">`addScriptTags`</ph> parameter.","pos":[565,820],"source":"       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter."},{"content":"Setting <ph id=\"ph1\">`addScriptTags`</ph> to <ph id=\"ph2\">`true`</ph> indicates that script tags will be added automatically.","pos":[821,910],"source":" Setting `addScriptTags` to `true` indicates that script tags will be added automatically."},{"content":"The &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt; method adds a script block to the top of the rendered page.","pos":[917,1050],"source":"       The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page."},{"content":"The script blocks are not guaranteed to be output in the order they are registered.","pos":[1051,1134]},{"content":"If the order of the script blocks is important, use a &lt;xref:System.Text.StringBuilder&gt; object to gather the scripts together in a single string, and then register them all in a single client script block.","pos":[1135,1339],"source":" If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block."}]},{"pos":[75126,75168],"content":"The type of the client script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the client script to register.","pos":[0,42]}]},{"pos":[75228,75269],"content":"The key of the client script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script to register.","pos":[0,41]}]},{"pos":[75332,75370],"content":"The client script literal to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client script literal to register.","pos":[0,38]}]},{"pos":[75441,75495],"content":"A Boolean value indicating whether to add script tags.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value indicating whether to add script tags.","pos":[0,54]}]},{"pos":[75685,75778],"content":"The client script block type is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The client script block type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[76328,76489],"content":"Registers the client script with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a key and a URL, which enables the script to be called from the client.","needQuote":true,"needEscape":true,"source":"Registers the client script with the <xref href=\"System.Web.UI.Page\"></xref> object using a key and a URL, which enables the script to be called from the client."},{"pos":[76502,77517],"content":"A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.       Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.      > [!NOTE] >  To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method. This method uses the context of the URL on which it is called to resolve the path.       This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter.       The method adds a script block at the top of the rendered page.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A client script include is uniquely identified by its key and its type.","pos":[0,71]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[72,133]},{"content":"Only one script with a given type and key pair can be registered with the page.","pos":[134,213]},{"content":"Attempting to register a script that is already registered does not create a duplicate of the script.","pos":[214,315]},{"content":"Call the &lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A&gt; method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.","pos":[322,565],"source":"       Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To resolve the client URL, use the &lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt; method.","pos":[571,675],"source":"      > [!NOTE] >  To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method."},{"content":"This method uses the context of the URL on which it is called to resolve the path.","pos":[676,758]},{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt; method calls the overload that takes a <ph id=\"ph1\">`key`</ph>, a <ph id=\"ph2\">`URL`</ph>, and a <ph id=\"ph3\">`type`</ph> parameter.","pos":[765,936],"source":"       This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter."},{"content":"The method adds a script block at the top of the rendered page.","pos":[943,1006]}]},{"pos":[77841,77890],"content":"The key of the client script include to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script include to register.","pos":[0,49]}]},{"pos":[77950,77999],"content":"The URL of the client script include to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL of the client script include to register.","pos":[0,49]}]},{"pos":[78680,78803],"content":"Registers the client script include with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type, a key, and a URL.","needQuote":true,"needEscape":true,"source":"Registers the client script include with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a URL."},{"pos":[78816,79505],"content":"This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include. You specify the type based on the object that will be accessing the resource. For instance, when using a `Page` instance to access the resource, you specify the `Page` type.      > [!NOTE] >  To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method. This method uses the context of the URL on which it is called to resolve the path.       This method adds a script block at the top of the rendered page.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload of the &lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt; method takes <bpt id=\"p1\">*</bpt>key<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>url<ept id=\"p2\">*</ept> parameters to identify the script, as well as a <ph id=\"ph1\">`type`</ph> parameter to specify the identification of the client script include.","pos":[0,246],"source":"This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include."},{"content":"You specify the type based on the object that will be accessing the resource.","pos":[247,324]},{"content":"For instance, when using a <ph id=\"ph1\">`Page`</ph> instance to access the resource, you specify the <ph id=\"ph2\">`Page`</ph> type.","pos":[325,420],"source":" For instance, when using a `Page` instance to access the resource, you specify the `Page` type."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To resolve the client URL, use the &lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt; method.","pos":[426,530],"source":"      > [!NOTE] >  To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method."},{"content":"This method uses the context of the URL on which it is called to resolve the path.","pos":[531,613]},{"content":"This method adds a script block at the top of the rendered page.","pos":[620,684]}]},{"pos":[80541,80591],"content":"The type of the client script include to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the client script include to register.","pos":[0,50]}]},{"pos":[80651,80700],"content":"The key of the client script include to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the client script include to register.","pos":[0,49]}]},{"pos":[80760,80809],"content":"The URL of the client script include to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL of the client script include to register.","pos":[0,49]}]},{"pos":[81001,81096],"content":"The client script include type is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The client script include type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[81859,81985],"content":"Registers the client script resource with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type and a resource name.","needQuote":true,"needEscape":true,"source":"Registers the client script resource with the <xref href=\"System.Web.UI.Page\"></xref> object using a type and a resource name."},{"pos":[81997,82358],"content":"The RegisterClientScriptResource method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler. The RegisterClientScriptResource method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts. This method wraps the contents of the resource URL with a `<script>` element block.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The RegisterClientScriptResource method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.","pos":[0,142]},{"content":"The RegisterClientScriptResource method registers the script with the &lt;xref:System.Web.UI.Page&gt; object and prevents duplicate scripts.","pos":[143,277],"source":" The RegisterClientScriptResource method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts."},{"content":"This method wraps the contents of the resource URL with a <ph id=\"ph1\">`&lt;script&gt;`</ph> element block.","pos":[278,361],"source":" This method wraps the contents of the resource URL with a `<script>` element block."}]},{"pos":[83649,83700],"content":"The type of the client script resource to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the client script resource to register.","pos":[0,51]}]},{"pos":[83769,83820],"content":"The name of the client script resource to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client script resource to register.","pos":[0,51]}]},{"pos":[84766,84907],"content":"Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.","pos":[0,141]}]},{"pos":[84920,85634],"content":"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup. Quotes and backslashes in the custom (expando) attribute's values are escaped. If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`.       If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified &lt;xref:System.Web.UI.Control&gt;.","pos":[0,142],"source":"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>."},{"content":"The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.","pos":[143,266]},{"content":"Quotes and backslashes in the custom (expando) attribute's values are escaped.","pos":[267,345]},{"content":"If you do not want to escape quotes and backslashes, call the &lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt; overload method and set the <ph id=\"ph1\">`encode`</ph> parameter to <ph id=\"ph2\">`false`</ph>.","pos":[346,535],"source":" If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`."},{"content":"If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.","pos":[542,712]}]},{"pos":[85842,85936],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on the page that contains the custom attribute.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> on the page that contains the custom attribute."},{"pos":[86006,86051],"content":"The name of the custom attribute to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the custom attribute to register.","pos":[0,45]}]},{"pos":[86122,86156],"content":"The value of the custom attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the custom attribute.","pos":[0,34]}]},{"pos":[86883,87096],"content":"Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.","pos":[0,213]}]},{"pos":[87109,87671],"content":"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup. Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value.       If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified &lt;xref:System.Web.UI.Control&gt;.","pos":[0,142],"source":"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>."},{"content":"The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.","pos":[143,266]},{"content":"Set the <ph id=\"ph1\">`encode`</ph> parameter to <ph id=\"ph2\">`true`</ph> if you need to escape quotes and backslashes in your expando attribute's value.","pos":[267,383],"source":" Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value."},{"content":"If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.","pos":[390,560]}]},{"pos":[88369,88463],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Control\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on the page that contains the custom attribute.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.Control\"></xref> on the page that contains the custom attribute."},{"pos":[88533,88578],"content":"The name of the custom attribute to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the custom attribute to register.","pos":[0,45]}]},{"pos":[88649,88683],"content":"The value of the custom attribute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the custom attribute.","pos":[0,34]}]},{"pos":[88747,88825],"content":"A Boolean value indicating whether to encode the custom attribute to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value indicating whether to encode the custom attribute to register.","pos":[0,78]}]},{"pos":[89410,89532],"content":"Registers an event reference for validation with a unique control ID representing the client control generating the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers an event reference for validation with a unique control ID representing the client control generating the event.","pos":[0,122]}]},{"pos":[89544,89665],"content":"For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information and examples, see the &lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt; method.","pos":[0,121],"source":"For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method."}]},{"pos":[90339,90404],"content":"A unique ID representing the client control generating the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique ID representing the client control generating the event.","pos":[0,65]}]},{"pos":[91050,91150],"content":"Registers an event reference for validation with <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Registers an event reference for validation with <xref href=\"System.Web.UI.PostBackOptions\"></xref>."},{"pos":[91162,91283],"content":"For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information and examples, see the &lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt; method.","pos":[0,121],"source":"For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method."}]},{"pos":[91482,91621],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.PostBackOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that specifies how client JavaScript is generated to initiate a postback event.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.PostBackOptions\"></xref> object that specifies how client JavaScript is generated to initiate a postback event."},{"pos":[92257,92399],"content":"Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.","pos":[0,142]}]},{"pos":[93631,93696],"content":"A unique ID representing the client control generating the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique ID representing the client control generating the event.","pos":[0,65]}]},{"pos":[93761,93806],"content":"Event arguments passed with the client event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Event arguments passed with the client event.","pos":[0,45]}]},{"pos":[94005,94080],"content":"The method is called prior to the <xref:System.Web.UI.Page.Render*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method is called prior to the &lt;xref:System.Web.UI.Page.Render*&gt; method.","pos":[0,75],"source":"The method is called prior to the <xref:System.Web.UI.Page.Render*> method."}]},{"pos":[94590,94671],"content":"Registers a hidden value with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Registers a hidden value with the <xref href=\"System.Web.UI.Page\"></xref> object."},{"pos":[94683,94775],"content":"The RegisterHiddenField method creates a hidden <ph id=\"ph1\">`&lt;input&gt;`</ph> element on the rendered HTML page.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The RegisterHiddenField method creates a hidden `<input>` element on the rendered HTML page."},{"pos":[95554,95595],"content":"The name of the hidden field to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the hidden field to register.","pos":[0,41]}]},{"pos":[95675,95718],"content":"The initial value of the field to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial value of the field to register.","pos":[0,43]}]},{"pos":[95902,95995],"content":"<ph id=\"ph1\">&lt;code&gt;hiddenFieldName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hiddenFieldName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[96574,96807],"content":"Registers an OnSubmit statement with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a script literal. The statement executes when the <xref href=\"System.Web.UI.HtmlControls.HtmlForm\"></xref> is submitted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers an OnSubmit statement with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type, a key, and a script literal.","pos":[0,130],"source":"Registers an OnSubmit statement with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a script literal."},{"content":"The statement executes when the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.HtmlControls.HtmlForm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is submitted.","pos":[131,233],"source":" The statement executes when the <xref href=\"System.Web.UI.HtmlControls.HtmlForm\"></xref> is submitted."}]},{"pos":[96820,97886],"content":"An OnSubmit statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. Only one statement with a given type and key pair can be registered with the page. Attempting to register a statement that is already registered will not create a duplicate of the statement.       Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.       The `script` parameter of the RegisterOnSubmitStatement method can contain multiple script commands as long as they are properly delimited with a semicolon (;).       The RegisterOnSubmitStatement adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.       For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An OnSubmit statement is uniquely identified by its key and its type.","pos":[0,69]},{"content":"Statements with the same key and type are considered duplicates.","pos":[70,134]},{"content":"Only one statement with a given type and key pair can be registered with the page.","pos":[135,217]},{"content":"Attempting to register a statement that is already registered will not create a duplicate of the statement.","pos":[218,325]},{"content":"Call the &lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt; method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.","pos":[332,571],"source":"       Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script."},{"content":"The <ph id=\"ph1\">`script`</ph> parameter of the RegisterOnSubmitStatement method can contain multiple script commands as long as they are properly delimited with a semicolon (;).","pos":[578,738],"source":"       The `script` parameter of the RegisterOnSubmitStatement method can contain multiple script commands as long as they are properly delimited with a semicolon (;)."},{"content":"The RegisterOnSubmitStatement adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.","pos":[745,889]},{"content":"For more information on HTML forms and the <ph id=\"ph1\">`OnSubmit`</ph> attribute, see the <bpt id=\"p1\">[</bpt>World Wide Web Consortium (W3C) Web site<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37125)</ept>.","pos":[896,1058],"source":"       For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125)."}]},{"pos":[98398,98445],"content":"The type of the OnSubmit statement to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the OnSubmit statement to register.","pos":[0,47]}]},{"pos":[98505,98551],"content":"The key of the OnSubmit statement to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the OnSubmit statement to register.","pos":[0,46]}]},{"pos":[98614,98671],"content":"The script literal of the OnSubmit statement to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The script literal of the OnSubmit statement to register.","pos":[0,57]}]},{"pos":[98861,98943],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[99502,99629],"content":"Registers the startup script with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type, a key, and a script literal.","needQuote":true,"needEscape":true,"source":"Registers the startup script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a script literal."},{"pos":[99642,100926],"content":"A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.       Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block.       The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A client script is uniquely identified by its key and its type.","pos":[0,63]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[64,125]},{"content":"Only one script with a given type and key pair can be registered with the page.","pos":[126,205]},{"content":"Attempting to register a script that is already registered does not create a duplicate of the script.","pos":[206,307]},{"content":"Call the &lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt; method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.","pos":[314,544],"source":"       Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script."},{"content":"In this overload of the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method, you must make sure that the script provided in the <ph id=\"ph1\">`script`</ph> parameter is wrapped with a <ph id=\"ph2\">`&lt;script&gt;`</ph> element block.","pos":[551,762],"source":"       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block."},{"content":"The script block added by the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method executes when the page finishes loading but before the page's &lt;xref:System.Web.UI.Control.OnLoad%2A&gt; event is raised.","pos":[769,989],"source":"       The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised."},{"content":"The script blocks are not guaranteed to be output in the order they are registered.","pos":[990,1073]},{"content":"If the order of the script blocks is important, use a &lt;xref:System.Text.StringBuilder&gt; object to gather the scripts together in a single string, and then register them all in a single client script block.","pos":[1074,1278],"source":" If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block."}]},{"pos":[101678,101721],"content":"The type of the startup script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the startup script to register.","pos":[0,43]}]},{"pos":[101781,101823],"content":"The key of the startup script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the startup script to register.","pos":[0,42]}]},{"pos":[101886,101925],"content":"The startup script literal to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The startup script literal to register.","pos":[0,39]}]},{"pos":[102624,102806],"content":"Registers the startup script with the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.Page\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.","needQuote":true,"needEscape":true,"source":"Registers the startup script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags."},{"pos":[102819,104234],"content":"A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.       Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter. Setting `addScriptTags` to `true` indicates that script tags will be added automatically.       The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A startup script is uniquely identified by its key and its type.","pos":[0,64]},{"content":"Scripts with the same key and type are considered duplicates.","pos":[65,126]},{"content":"Only one script with a given type and key pair can be registered with the page.","pos":[127,206]},{"content":"Attempting to register a script that is already registered does not create a duplicate of the script.","pos":[207,308]},{"content":"Call the &lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt; method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.","pos":[315,545],"source":"       Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script."},{"content":"In this overload of the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method, you can indicate whether the script provided in the <ph id=\"ph1\">`script`</ph> parameter is wrapped with a <ph id=\"ph2\">`&lt;script&gt;`</ph> element block by using the <ph id=\"ph3\">`addScriptTags`</ph> parameter.","pos":[552,803],"source":"       In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter."},{"content":"Setting <ph id=\"ph1\">`addScriptTags`</ph> to <ph id=\"ph2\">`true`</ph> indicates that script tags will be added automatically.","pos":[804,893],"source":" Setting `addScriptTags` to `true` indicates that script tags will be added automatically."},{"content":"The script block added by the &lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt; method executes when the page finishes loading but before the page's &lt;xref:System.Web.UI.Control.OnLoad%2A&gt; event is raised.","pos":[900,1120],"source":"       The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised."},{"content":"The script blocks are not guaranteed to be output in the order they are registered.","pos":[1121,1204]},{"content":"If the order of the script blocks is important, use a &lt;xref:System.Text.StringBuilder&gt; object to gather the scripts together in a single string, and then register them all in a single client script block.","pos":[1205,1409],"source":" If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block."}]},{"pos":[104899,104942],"content":"The type of the startup script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the startup script to register.","pos":[0,43]}]},{"pos":[105002,105044],"content":"The key of the startup script to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the startup script to register.","pos":[0,42]}]},{"pos":[105107,105146],"content":"The startup script literal to register.","needQuote":true,"needEscape":true,"nodes":[{"content":"The startup script literal to register.","pos":[0,39]}]},{"pos":[105217,105271],"content":"A Boolean value indicating whether to add script tags.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value indicating whether to add script tags.","pos":[0,54]}]},{"pos":[105457,105539],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[105970,106122],"content":"Validates a client event that was registered for event validation using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Validates a client event that was registered for event validation using the &lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*&gt; method.","pos":[0,152],"source":"Validates a client event that was registered for event validation using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*> method."}]},{"pos":[106271,106336],"content":"A unique ID representing the client control generating the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique ID representing the client control generating the event.","pos":[0,65]}]},{"pos":[106894,107046],"content":"Validates a client event that was registered for event validation using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Validates a client event that was registered for event validation using the &lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*&gt; method.","pos":[0,152],"source":"Validates a client event that was registered for event validation using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*> method."}]},{"pos":[107897,107962],"content":"A unique ID representing the client control generating the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A unique ID representing the client control generating the event.","pos":[0,65]}]},{"pos":[108027,108076],"content":"The event arguments passed with the client event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event arguments passed with the client event.","pos":[0,49]}]},{"pos":[108246,108356],"content":"<ph id=\"ph1\">&lt;code&gt;uniqueId&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>uniqueId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.ClientScriptManager\n  id: ClientScriptManager\n  children:\n  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)\n  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)\n  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)\n  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)\n  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)\n  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)\n  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)\n  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)\n  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)\n  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)\n  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)\n  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)\n  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)\n  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)\n  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)\n  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)\n  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)\n  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String)\n  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)\n  langs:\n  - csharp\n  name: ClientScriptManager\n  nameWithType: ClientScriptManager\n  fullName: System.Web.UI.ClientScriptManager\n  type: Class\n  summary: Defines methods for managing client scripts in Web applications.\n  remarks: \"The ClientScriptManager class is used to manage client scripts and add them to Web applications. You can get a reference to the ClientScriptManager class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object.  \\n  \\n You can add a client script to a Web page declaratively by including the script in the HTML markup of the page. However, there are situations when adding client script dynamically is needed. To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script. For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The ClientScriptManager class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>. Scripts with the same key and type are considered duplicates. Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.  \\n  \\n The ClientScriptManager class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback. This is referred to as performing an out-of-band callback to the server. In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page. The Web page runs a modified version of its normal life cycle to process the callback. Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client. To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object.  \\n  \\n Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event. These methods enable client script functions, when invoked, to cause the server to post back to the page. A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.  \\n  \\n> [!NOTE]\\n>  If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control.  \\n  \\n The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the ClientScriptManager class. Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/t-system.web.ui.clientsc_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/t-system.web.ui.clientsc_1.aspx)]\"\n  syntax:\n    content: public sealed class ClientScriptManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)\n  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetCallbackEventReference(Control,String,String,String)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.\n  remarks: \"The GetCallbackEventReference method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls. For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used. To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property. To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property. Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object.  \\n  \\n The GetCallbackEventReference overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP. When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser. No two synchronous callbacks callback can execute at the same time in the browser. If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.  \\n  \\n To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior. In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.  \\n  \\n Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method. To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter.  \\n  \\n The GetCallbackEventReference method takes an optional string `argument` parameter and returns a string. To pass in or to receive multiple values, concatenate values in the input or return string, respectively.  \\n  \\n> [!NOTE]\\n>  Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations. If the properties are to survive page requests, you can use session state.\"\n  example:\n  - \"The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \\n  \\n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/0153bfa5-9a40-4257-b817-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/0153bfa5-9a40-4257-b817-_1.aspx)]\"\n  syntax:\n    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\n    - id: argument\n      type: System.String\n      description: \"An argument passed from the client script to the server  \\n  \\n <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\"\n    - id: clientCallback\n      type: System.String\n      description: The name of the client event handler that receives the result of the successful server event.\n    - id: context\n      type: System.String\n      description: The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.\n    return:\n      type: System.String\n      description: The name of a client function that invokes the client callback.\n  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Web.UI.Control\"></xref> specified is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Web.UI.Control\"></xref> specified does not implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)\n  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetCallbackEventReference(Control,String,String,String,Boolean)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.\n  remarks: \"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`. The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.  \\n  \\n For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.\"\n  syntax:\n    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\n    - id: argument\n      type: System.String\n      description: \"An argument passed from the client script to the server  \\n  \\n <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\"\n    - id: clientCallback\n      type: System.String\n      description: The name of the client event handler that receives the result of the successful server event.\n    - id: context\n      type: System.String\n      description: The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.\n    - id: useAsync\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to perform the callback asynchronously; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to perform the callback synchronously.\n    return:\n      type: System.String\n      description: The name of a client function that invokes the client callback.\n  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Web.UI.Control\"></xref> specified is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Web.UI.Control\"></xref> specified does not implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)\n  id: GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetCallbackEventReference(String,String,String,String,String,Boolean)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.\n  remarks: \"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter. Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control.  \\n  \\n Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter. The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`. The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default. The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error. The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.  \\n  \\n For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.\"\n  example:\n  - \"The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \\n  \\n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/b09113ee-01c3-4887-82a1-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/b09113ee-01c3-4887-82a1-_1.aspx)]\"\n  syntax:\n    content: public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);\n    parameters:\n    - id: target\n      type: System.String\n      description: The name of a server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\n    - id: argument\n      type: System.String\n      description: \"An argument passed from the client script to the server  \\n  \\n <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\"\n    - id: clientCallback\n      type: System.String\n      description: The name of the client event handler that receives the result of the successful server event.\n    - id: context\n      type: System.String\n      description: The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.\n    - id: clientErrorCallback\n      type: System.String\n      description: The name of the client event handler that receives the result when an error occurs in the server event handler.\n    - id: useAsync\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref> to perform the callback asynchronously; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to perform the callback synchronously.\n    return:\n      type: System.String\n      description: The name of a client function that invokes the client callback.\n  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)\n  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.\n  remarks: \"This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter. The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`. The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default. The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error. The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.  \\n  \\n For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.\"\n  syntax:\n    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server <xref href=\"System.Web.UI.Control\"></xref> that handles the client callback. The control must implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface and provide a <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\n    - id: argument\n      type: System.String\n      description: An argument passed from the client script to the server <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*> method.\n    - id: clientCallback\n      type: System.String\n      description: The name of the client event handler that receives the result of the successful server event.\n    - id: context\n      type: System.String\n      description: The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.\n    - id: clientErrorCallback\n      type: System.String\n      description: The name of the client event handler that receives the result when an error occurs in the server event handler.\n    - id: useAsync\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true \" name=\"true \" href=\"\"></xref>to perform the callback asynchronously; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to perform the callback synchronously.\n    return:\n      type: System.String\n      description: The name of a client function that invokes the client callback.\n  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Web.UI.Control\"></xref> specified is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Web.UI.Control\"></xref> specified does not implement the <xref href=\"System.Web.UI.ICallbackEventHandler\"></xref> interface.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)\n  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetPostBackClientHyperlink(Control,String)\n  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets a reference, with <xref uid=\"langword_csharp_javascript:\" name=\"javascript:\" href=\"\"></xref> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.\n  remarks: Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface. To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.\n  example:\n  - \"The following code example demonstrates the use of the GetPostBackClientHyperlink method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_1.aspx)]  \\n  \\n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_2.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_2.aspx)]\"\n  syntax:\n    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server control to process the postback.\n    - id: argument\n      type: System.String\n      description: The parameter passed to the server control.\n    return:\n      type: System.String\n      description: A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.\n  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)\n  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetPostBackClientHyperlink(Control,String,Boolean)\n  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets a reference, with <xref uid=\"langword_csharp_javascript:\" name=\"javascript:\" href=\"\"></xref> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.\n  remarks: Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface. To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.\n  syntax:\n    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server control to process the postback.\n    - id: argument\n      type: System.String\n      description: The parameter passed to the server control.\n    - id: registerForEventValidation\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to register the postback event for validation; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to not register the post back event for validation.\n    return:\n      type: System.String\n      description: A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.\n  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)\n  id: GetPostBackEventReference(System.Web.UI.PostBackOptions)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetPostBackEventReference(PostBackOptions)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <xref href=\"System.Web.UI.PostBackOptions\"></xref> instance.\n  remarks: \"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.  \\n  \\n The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.\"\n  syntax:\n    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);\n    parameters:\n    - id: options\n      type: System.Web.UI.PostBackOptions\n      description: A <xref href=\"System.Web.UI.PostBackOptions\"></xref> that defines the postback.\n    return:\n      type: System.String\n      description: A string that, when treated as script on the client, initiates the client postback.\n  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Web.UI.PostBackOptions\"></xref> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)\n  id: GetPostBackEventReference(System.Web.UI.Control,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetPostBackEventReference(Control,String)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.\n  remarks: \"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.  \\n  \\n The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.\"\n  example:\n  - \"The following code example demonstrates the use of the GetPostBackEventReference method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_1.aspx)]  \\n  \\n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_2.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_2.aspx)]\"\n  syntax:\n    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server <xref href=\"System.Web.UI.Control\"></xref> that processes the postback on the server.\n    - id: argument\n      type: System.String\n      description: A string of optional arguments to pass to the control that processes the postback.\n    return:\n      type: System.String\n      description: A string that, when treated as script on the client, initiates the postback.\n  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The specified <xref href=\"System.Web.UI.Control\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)\n  id: GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetPostBackEventReference(PostBackOptions,Boolean)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <xref href=\"System.Web.UI.PostBackOptions\"></xref> object. Optionally, registers the event reference for validation.\n  remarks: \"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive.  \\n  \\n The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.  \\n  \\n If `registerForEventValidation` is `true`, the GetPostBackEventReference method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.\"\n  syntax:\n    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);\n    parameters:\n    - id: options\n      type: System.Web.UI.PostBackOptions\n      description: A <xref href=\"System.Web.UI.PostBackOptions\"></xref> that defines the postback.\n    - id: registerForEventValidation\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to register the event reference for validation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: A string that, when treated as script on the client, initiates the client postback.\n  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Web.UI.PostBackOptions\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)\n  id: GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetPostBackEventReference(Control,String,Boolean)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.\n  remarks: \"To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.  \\n  \\n The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`. In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.  \\n  \\n If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.\"\n  syntax:\n    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The server <xref href=\"System.Web.UI.Control\"></xref> that processes the postback on the server.\n    - id: argument\n      type: System.String\n      description: A string of optional arguments to pass to `control`.\n    - id: registerForEventValidation\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to register the event reference for validation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: A string that, when treated as script on the client, initiates the postback.\n  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The specified <xref href=\"System.Web.UI.Control\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)\n  id: GetWebResourceUrl(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: GetWebResourceUrl(Type,String)\n  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets a URL reference to a resource in an assembly.\n  remarks: \"The GetWebResourceUrl method returns a URL reference to a resource embedded in an assembly. The returned reference is not URL encoded. Resources can be script files, images, or any static file. You specify the type based on the object that will be accessing the resource.  \\n  \\n A Web resource registered with the page is uniquely identified by its type and name. Only one resource with a given type and name pair can be registered with the page. Attempting to register a resource that is already registered does not create a duplicate of the registered resource.  \\n  \\n The GetWebResourceUrl method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies. For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the GetWebResourceUrl method. The *type* parameter in this example is set to the type of class in the assembly containing the resource. The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_1.aspx)]  \\n  \\n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served. Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_2.vb)]\\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_2.cs)]  \\n  \\n This example requires a JavaScript file named `Script_include.js`. The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object. If you are using [!INCLUDE[vs_current_short](~/add/includes/ajax-current-ext-md.md)], in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected. If you are compiling the library at the command line, use the  switch to embed the resource.  \\n  \\n```  \\nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \\n```\"\n  syntax:\n    content: public string GetWebResourceUrl (Type type, string resourceName);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the resource.\n    - id: resourceName\n      type: System.String\n      description: The fully qualified name of the resource in the assembly.\n    return:\n      type: System.String\n      description: The URL reference to the resource.\n  overload: System.Web.UI.ClientScriptManager.GetWebResourceUrl*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The web resource name is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n The web resource name has a length of zero.\"\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)\n  id: IsClientScriptBlockRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsClientScriptBlockRegistered(String)\n  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the client script block is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  \\n  \\n A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.  \\n  \\n This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object\"\n  example:\n  - >-\n    [!code-cs[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_0_1.aspx)]\n     [!code-vb[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_0_1.aspx)]\n  syntax:\n    content: public bool IsClientScriptBlockRegistered (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the client script block to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script block is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)\n  id: IsClientScriptBlockRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsClientScriptBlockRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the client script block is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using a key and type.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  \\n  \\n A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a `Page` instance to access the resource, you specify the `Page` type.\"\n  example:\n  - \"The following code example demonstrates the use of the IsClientScriptBlockRegistered method. Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/b20ef5ac-aa44-4132-8ad3-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/b20ef5ac-aa44-4132-8ad3-_1.aspx)]\"\n  syntax:\n    content: public bool IsClientScriptBlockRegistered (Type type, string key);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the client script block to search for.\n    - id: key\n      type: System.String\n      description: The key of the client script block to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script block is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The client script type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)\n  id: IsClientScriptIncludeRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsClientScriptIncludeRegistered(String)\n  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the client script include is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  \\n  \\n A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.  \\n  \\n This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object.\"\n  syntax:\n    content: public bool IsClientScriptIncludeRegistered (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the client script include to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script include is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)\n  id: IsClientScriptIncludeRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsClientScriptIncludeRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the client script include is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using a key and type.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes. This is particularly important if the script requires a large amount of server resources to create.  \\n  \\n A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a Page instance to access the resource, you specify the `Page` type.\"\n  example:\n  - \"The following code example demonstrates the use of the IsClientScriptIncludeRegistered method. Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/1a97f23b-4196-4af6-89d9-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/1a97f23b-4196-4af6-89d9-_1.aspx)]  \\n  \\n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \\n  \\n```  \\nfunction DoClick() {Form1.Message.value='Text from include script.'}  \\n```\"\n  syntax:\n    content: public bool IsClientScriptIncludeRegistered (Type type, string key);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the client script include to search for.\n    - id: key\n      type: System.String\n      description: The key of the client script include to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the client script include is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The client script include type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)\n  id: IsOnSubmitStatementRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsOnSubmitStatementRegistered(String)\n  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the OnSubmit statement is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements. This is particularly important if the statement requires a large amount of server resources to create.  \\n  \\n A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates.  \\n  \\n This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object\"\n  syntax:\n    content: public bool IsOnSubmitStatementRegistered (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the OnSubmit statement to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the OnSubmit statement is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)\n  id: IsOnSubmitStatementRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsOnSubmitStatementRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the OnSubmit statement is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key and type.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements. This is particularly important if the statement requires a large amount of server resources to create.  \\n  \\n A statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. You specify the type based on the object that will be accessing the resource. For instance, when using a `Page` instance to access the resource, you specify the `Page` type.\"\n  example:\n  - \"The following code example demonstrates the use of the IsOnSubmitStatementRegistered method. A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/081fc7d2-9213-49e8-ad42-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/081fc7d2-9213-49e8-ad42-_1.aspx)]\"\n  syntax:\n    content: public bool IsOnSubmitStatementRegistered (Type type, string key);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the OnSubmit statement to search for.\n    - id: key\n      type: System.String\n      description: The key of the OnSubmit statement to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the OnSubmit statement is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The OnSubmit statement type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)\n  id: IsStartupScriptRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsStartupScriptRegistered(String)\n  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the startup script is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  \\n  \\n A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.  \\n  \\n This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object\"\n  syntax:\n    content: public bool IsStartupScriptRegistered (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the startup script to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the startup script is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)\n  id: IsStartupScriptRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: IsStartupScriptRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Determines whether the startup script is registered with the <xref href=\"System.Web.UI.Page\"></xref> object using the specified key and type.\n  remarks: \"Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts. This is particularly important if the script requires a large amount of server resources to create.  \\n  \\n A client startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates.\"\n  example:\n  - \"The following code example demonstrates the use of the IsStartupScriptRegistered method. Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/31c56db0-942d-4a34-be1e-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/31c56db0-942d-4a34-be1e-_1.aspx)]\"\n  syntax:\n    content: public bool IsStartupScriptRegistered (Type type, string key);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the startup script to search for.\n    - id: key\n      type: System.String\n      description: The key of the startup script to search for.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the startup script is registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The startup script type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)\n  id: RegisterArrayDeclaration(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterArrayDeclaration(String,String)\n  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers a JavaScript array declaration with the <xref href=\"System.Web.UI.Page\"></xref> object using an array name and array value.\n  remarks: \"The RegisterArrayDeclaration checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter. Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed. If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.  \\n  \\n If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\\\\\\\\\\") in the `arrayValue` parameter. The value of the `arrayValue` parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the RegisterArrayDeclaration method.\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterArrayDeclaration and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/fb15aead-cb5d-4924-8be4-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/fb15aead-cb5d-4924-8be4-_1.aspx)]\"\n  syntax:\n    content: public void RegisterArrayDeclaration (string arrayName, string arrayValue);\n    parameters:\n    - id: arrayName\n      type: System.String\n      description: The array name to register.\n    - id: arrayValue\n      type: System.String\n      description: The array value or values to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>arrayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)\n  id: RegisterClientScriptBlock(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterClientScriptBlock(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the client script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, key, and script literal.\n  remarks: \"A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  \\n  \\n Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  \\n  \\n In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block.  \\n  \\n The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterClientScriptBlock method.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/csharp/41f57bff-a479-4a3c-91bb-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/visualbasic/41f57bff-a479-4a3c-91bb-_1.aspx)]\"\n  syntax:\n    content: public void RegisterClientScriptBlock (Type type, string key, string script);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the client script to register.\n    - id: key\n      type: System.String\n      description: The key of the client script to register.\n    - id: script\n      type: System.String\n      description: The client script literal to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)\n  id: RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterClientScriptBlock(Type,String,String,Boolean)\n  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the client script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, key, script literal, and Boolean value indicating whether to add script tags.\n  remarks: \"A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  \\n  \\n Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered. This lets you avoid unnecessarily attempting to add the script.  \\n  \\n In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter. Setting `addScriptTags` to `true` indicates that script tags will be added automatically.  \\n  \\n The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterClientScriptBlock method. Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/e4221441-a348-44c8-8a15-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/e4221441-a348-44c8-8a15-_1.aspx)]\"\n  syntax:\n    content: public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the client script to register.\n    - id: key\n      type: System.String\n      description: The key of the client script to register.\n    - id: script\n      type: System.String\n      description: The client script literal to register.\n    - id: addScriptTags\n      type: System.Boolean\n      description: A Boolean value indicating whether to add script tags.\n  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The client script block type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)\n  id: RegisterClientScriptInclude(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterClientScriptInclude(String,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the client script with the <xref href=\"System.Web.UI.Page\"></xref> object using a key and a URL, which enables the script to be called from the client.\n  remarks: \"A client script include is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  \\n  \\n Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  \\n  \\n> [!NOTE]\\n>  To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method. This method uses the context of the URL on which it is called to resolve the path.  \\n  \\n This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter.  \\n  \\n The method adds a script block at the top of the rendered page.\"\n  example:\n  - For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.\n  syntax:\n    content: public void RegisterClientScriptInclude (string key, string url);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the client script include to register.\n    - id: url\n      type: System.String\n      description: The URL of the client script include to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)\n  id: RegisterClientScriptInclude(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterClientScriptInclude(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the client script include with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a URL.\n  remarks: \"This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include. You specify the type based on the object that will be accessing the resource. For instance, when using a `Page` instance to access the resource, you specify the `Page` type.  \\n  \\n> [!NOTE]\\n>  To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method. This method uses the context of the URL on which it is called to resolve the path.  \\n  \\n This method adds a script block at the top of the rendered page.\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterClientScriptInclude method. Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/cbae2904-30a8-438b-9fac-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/cbae2904-30a8-438b-9fac-_1.aspx)]  \\n  \\n This example requires a JavaScript file named Script_include.js with the following contents:  \\n  \\n```  \\nfunction DoClick() {Form1.Message.value='Text from include script.'}  \\n```\"\n  syntax:\n    content: public void RegisterClientScriptInclude (Type type, string key, string url);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the client script include to register.\n    - id: key\n      type: System.String\n      description: The key of the client script include to register.\n    - id: url\n      type: System.String\n      description: The URL of the client script include to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The client script include type is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The URL is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n The URL is empty.\"\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)\n  id: RegisterClientScriptResource(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterClientScriptResource(Type,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the client script resource with the <xref href=\"System.Web.UI.Page\"></xref> object using a type and a resource name.\n  remarks: The RegisterClientScriptResource method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler. The RegisterClientScriptResource method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts. This method wraps the contents of the resource URL with a `<script>` element block.\n  example:\n  - \"The following code example demonstrates the use of the RegisterClientScriptResource method.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_1.aspx)]  \\n  \\n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_2.vb)]\\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_2.cs)]  \\n  \\n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \\n  \\n```  \\nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \\n```  \\n  \\n Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class.\"\n  syntax:\n    content: public void RegisterClientScriptResource (Type type, string resourceName);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the client script resource to register.\n    - id: resourceName\n      type: System.String\n      description: The name of the client script resource to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The client resource name is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n The client resource name has a length of zero.\"\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)\n  id: RegisterExpandoAttribute(System.String,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterExpandoAttribute(String,String,String)\n  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.\n  remarks: \"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup. Quotes and backslashes in the custom (expando) attribute's values are escaped. If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`.  \\n  \\n If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.\"\n  syntax:\n    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);\n    parameters:\n    - id: controlId\n      type: System.String\n      description: The <xref href=\"System.Web.UI.Control\"></xref> on the page that contains the custom attribute.\n    - id: attributeName\n      type: System.String\n      description: The name of the custom attribute to register.\n    - id: attributeValue\n      type: System.String\n      description: The value of the custom attribute.\n  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)\n  id: RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterExpandoAttribute(String,String,String,Boolean)\n  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.\n  remarks: \"The RegisterExpandoAttribute method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>. The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup. Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value.  \\n  \\n If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.\"\n  example:\n  - \"The following code example demonstrates how to use the RegisterExpandoAttribute method of the <xref:System.Web.UI.ClientScriptManager> class. The client script in the rendered page sets the `title` attribute of a `<span>` element.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/visualbasic/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/csharp/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]\"\n  syntax:\n    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);\n    parameters:\n    - id: controlId\n      type: System.String\n      description: The <xref href=\"System.Web.UI.Control\"></xref> on the page that contains the custom attribute.\n    - id: attributeName\n      type: System.String\n      description: The name of the custom attribute to register.\n    - id: attributeValue\n      type: System.String\n      description: The value of the custom attribute.\n    - id: encode\n      type: System.Boolean\n      description: A Boolean value indicating whether to encode the custom attribute to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)\n  id: RegisterForEventValidation(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterForEventValidation(String)\n  nameWithType: ClientScriptManager.RegisterForEventValidation(String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers an event reference for validation with a unique control ID representing the client control generating the event.\n  remarks: For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.\n  example:\n  - \"The following example shows how to use the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_1_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_1_1.aspx)]\"\n  syntax:\n    content: public void RegisterForEventValidation (string uniqueId);\n    parameters:\n    - id: uniqueId\n      type: System.String\n      description: A unique ID representing the client control generating the event.\n  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)\n  id: RegisterForEventValidation(System.Web.UI.PostBackOptions)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterForEventValidation(PostBackOptions)\n  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)\n  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers an event reference for validation with <xref href=\"System.Web.UI.PostBackOptions\"></xref>.\n  remarks: For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.\n  syntax:\n    content: public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);\n    parameters:\n    - id: options\n      type: System.Web.UI.PostBackOptions\n      description: A <xref href=\"System.Web.UI.PostBackOptions\"></xref> object that specifies how client JavaScript is generated to initiate a postback event.\n  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)\n  id: RegisterForEventValidation(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterForEventValidation(String,String)\n  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates using the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]  \\n  \\n The following code example demonstrates using the RegisterForEventValidation method to register a callback for validation.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]\"\n  syntax:\n    content: public void RegisterForEventValidation (string uniqueId, string argument);\n    parameters:\n    - id: uniqueId\n      type: System.String\n      description: A unique ID representing the client control generating the event.\n    - id: argument\n      type: System.String\n      description: Event arguments passed with the client event.\n  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called prior to the <xref:System.Web.UI.Page.Render*> method.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)\n  id: RegisterHiddenField(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterHiddenField(String,String)\n  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers a hidden value with the <xref href=\"System.Web.UI.Page\"></xref> object.\n  remarks: The RegisterHiddenField method creates a hidden `<input>` element on the rendered HTML page.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and RegisterHiddenField methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/0defa6d5-d8c8-43f1-af03-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/0defa6d5-d8c8-43f1-af03-_1.aspx)]\"\n  syntax:\n    content: public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);\n    parameters:\n    - id: hiddenFieldName\n      type: System.String\n      description: The name of the hidden field to register.\n    - id: hiddenFieldInitialValue\n      type: System.String\n      description: The initial value of the field to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterHiddenField*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hiddenFieldName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)\n  id: RegisterOnSubmitStatement(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterOnSubmitStatement(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers an OnSubmit statement with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a script literal. The statement executes when the <xref href=\"System.Web.UI.HtmlControls.HtmlForm\"></xref> is submitted.\n  remarks: \"An OnSubmit statement is uniquely identified by its key and its type. Statements with the same key and type are considered duplicates. Only one statement with a given type and key pair can be registered with the page. Attempting to register a statement that is already registered will not create a duplicate of the statement.  \\n  \\n Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.  \\n  \\n The `script` parameter of the RegisterOnSubmitStatement method can contain multiple script commands as long as they are properly delimited with a semicolon (;).  \\n  \\n The RegisterOnSubmitStatement adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.  \\n  \\n For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125).\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterOnSubmitStatement method.  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/597b1063-1251-4d00-82f9-_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/597b1063-1251-4d00-82f9-_1.aspx)]\"\n  syntax:\n    content: public void RegisterOnSubmitStatement (Type type, string key, string script);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the OnSubmit statement to register.\n    - id: key\n      type: System.String\n      description: The key of the OnSubmit statement to register.\n    - id: script\n      type: System.String\n      description: The script literal of the OnSubmit statement to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)\n  id: RegisterStartupScript(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterStartupScript(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the startup script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, and a script literal.\n  remarks: \"A client script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  \\n  \\n Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  \\n  \\n In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block.  \\n  \\n The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterStartupScript method. Note that the beginning and closing script tags are included within the `script` parameter. To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/csharp/77e56a73-ddd0-4c6d-99c5-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/visualbasic/77e56a73-ddd0-4c6d-99c5-_1.aspx)]\"\n  syntax:\n    content: public void RegisterStartupScript (Type type, string key, string script);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the startup script to register.\n    - id: key\n      type: System.String\n      description: The key of the startup script to register.\n    - id: script\n      type: System.String\n      description: The startup script literal to register.\n  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)\n  id: RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: RegisterStartupScript(Type,String,String,Boolean)\n  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Registers the startup script with the <xref href=\"System.Web.UI.Page\"></xref> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.\n  remarks: \"A startup script is uniquely identified by its key and its type. Scripts with the same key and type are considered duplicates. Only one script with a given type and key pair can be registered with the page. Attempting to register a script that is already registered does not create a duplicate of the script.  \\n  \\n Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.  \\n  \\n In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter. Setting `addScriptTags` to `true` indicates that script tags will be added automatically.  \\n  \\n The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised. The script blocks are not guaranteed to be output in the order they are registered. If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.\"\n  example:\n  - \"The following code example demonstrates the use of the RegisterStartupScript method. Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.  \\n  \\n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]\\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]\"\n  syntax:\n    content: public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the startup script to register.\n    - id: key\n      type: System.String\n      description: The key of the startup script to register.\n    - id: script\n      type: System.String\n      description: The startup script literal to register.\n    - id: addScriptTags\n      type: System.Boolean\n      description: A Boolean value indicating whether to add script tags.\n  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)\n  id: ValidateEvent(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: ValidateEvent(String)\n  nameWithType: ClientScriptManager.ValidateEvent(String)\n  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Validates a client event that was registered for event validation using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*> method.\n  syntax:\n    content: public void ValidateEvent (string uniqueId);\n    parameters:\n    - id: uniqueId\n      type: System.String\n      description: A unique ID representing the client control generating the event.\n  overload: System.Web.UI.ClientScriptManager.ValidateEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)\n  id: ValidateEvent(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  langs:\n  - csharp\n  name: ValidateEvent(String,String)\n  nameWithType: ClientScriptManager.ValidateEvent(String,String)\n  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Validates a client event that was registered for event validation using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*> method.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the ValidateEvent method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \\n  \\n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_3_1.aspx)]\\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_3_1.aspx)]\"\n  syntax:\n    content: public void ValidateEvent (string uniqueId, string argument);\n    parameters:\n    - id: uniqueId\n      type: System.String\n      description: A unique ID representing the client control generating the event.\n    - id: argument\n      type: System.String\n      description: The event arguments passed with the client event.\n  overload: System.Web.UI.ClientScriptManager.ValidateEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>uniqueId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\").\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetCallbackEventReference(Control,String,String,String)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.Control\n  parent: System.Web.UI\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Web.UI.Control\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetCallbackEventReference(Control,String,String,String,Boolean)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetCallbackEventReference(String,String,String,String,String,Boolean)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)\n  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackClientHyperlink(Control,String)\n  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)\n- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackClientHyperlink(Control,String,Boolean)\n  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackEventReference(PostBackOptions)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)\n- uid: System.Web.UI.PostBackOptions\n  parent: System.Web.UI\n  isExternal: false\n  name: PostBackOptions\n  nameWithType: PostBackOptions\n  fullName: System.Web.UI.PostBackOptions\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackEventReference(Control,String)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackEventReference(PostBackOptions,Boolean)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackEventReference(Control,String,Boolean)\n  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetWebResourceUrl(Type,String)\n  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsClientScriptBlockRegistered(String)\n  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsClientScriptBlockRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsClientScriptIncludeRegistered(String)\n  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsClientScriptIncludeRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)\n- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsOnSubmitStatementRegistered(String)\n  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)\n- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsOnSubmitStatementRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)\n- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsStartupScriptRegistered(String)\n  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)\n  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)\n- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsStartupScriptRegistered(Type,String)\n  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterArrayDeclaration(String,String)\n  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptBlock(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptBlock(Type,String,String,Boolean)\n  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptInclude(String,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptInclude(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptResource(Type,String)\n  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterExpandoAttribute(String,String,String)\n  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterExpandoAttribute(String,String,String,Boolean)\n  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterForEventValidation(String)\n  nameWithType: ClientScriptManager.RegisterForEventValidation(String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterForEventValidation(PostBackOptions)\n  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)\n  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterForEventValidation(String,String)\n  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterHiddenField(String,String)\n  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterOnSubmitStatement(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterStartupScript(Type,String,String)\n  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)\n  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)\n- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterStartupScript(Type,String,String,Boolean)\n  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)\n  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)\n- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: ValidateEvent(String)\n  nameWithType: ClientScriptManager.ValidateEvent(String)\n  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)\n- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: ValidateEvent(String,String)\n  nameWithType: ClientScriptManager.ValidateEvent(String,String)\n  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)\n- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetCallbackEventReference\n  nameWithType: ClientScriptManager.GetCallbackEventReference\n- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackClientHyperlink\n  nameWithType: ClientScriptManager.GetPostBackClientHyperlink\n- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetPostBackEventReference\n  nameWithType: ClientScriptManager.GetPostBackEventReference\n- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: GetWebResourceUrl\n  nameWithType: ClientScriptManager.GetWebResourceUrl\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsClientScriptBlockRegistered\n  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered\n- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsClientScriptIncludeRegistered\n  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered\n- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsOnSubmitStatementRegistered\n  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered\n- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: IsStartupScriptRegistered\n  nameWithType: ClientScriptManager.IsStartupScriptRegistered\n- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterArrayDeclaration\n  nameWithType: ClientScriptManager.RegisterArrayDeclaration\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptBlock\n  nameWithType: ClientScriptManager.RegisterClientScriptBlock\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptInclude\n  nameWithType: ClientScriptManager.RegisterClientScriptInclude\n- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterClientScriptResource\n  nameWithType: ClientScriptManager.RegisterClientScriptResource\n- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterExpandoAttribute\n  nameWithType: ClientScriptManager.RegisterExpandoAttribute\n- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterForEventValidation\n  nameWithType: ClientScriptManager.RegisterForEventValidation\n- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterHiddenField\n  nameWithType: ClientScriptManager.RegisterHiddenField\n- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterOnSubmitStatement\n  nameWithType: ClientScriptManager.RegisterOnSubmitStatement\n- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: RegisterStartupScript\n  nameWithType: ClientScriptManager.RegisterStartupScript\n- uid: System.Web.UI.ClientScriptManager.ValidateEvent*\n  parent: System.Web.UI.ClientScriptManager\n  isExternal: false\n  name: ValidateEvent\n  nameWithType: ClientScriptManager.ValidateEvent\n"}