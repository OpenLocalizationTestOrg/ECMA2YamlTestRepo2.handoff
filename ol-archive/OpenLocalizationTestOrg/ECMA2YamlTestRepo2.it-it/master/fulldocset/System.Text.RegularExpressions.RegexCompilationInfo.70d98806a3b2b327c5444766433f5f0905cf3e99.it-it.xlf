<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd2de60957597fc64503ab480c05cdaad433c204</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Text.RegularExpressions.RegexCompilationInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5441fef14229c47fbeee50740e0e82c35b0bf193</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">913e1b9ded78168cfd751f3b1f6aacb961897285</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides information about a regular expression that is used to compile a regular expression to a stand-alone assembly.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An array of RegexCompilationInfo objects is passed to the &lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt; method to provide information about each regular expression to be included in the assembly.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each compiled regular expression that is included in the assembly is represented as a class derived from &lt;xref:System.Text.RegularExpressions.Regex&gt;.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The properties of the RegexCompilationInfo type define the regular expression's class name, its fully qualified name (that is, its namespace and its type name), its regular expression pattern, any additional options (such as whether the regular expression is case-insensitive), and a time-out interval that specifies how long the regular expression engine should search for a match.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can instantiate a RegexCompilationInfo object by calling its overloaded class constructor.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Text.RegularExpressions.RegexCompilationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains information about a regular expression to be included in an assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each parameter of the RegexCompilationInfo constructor directly corresponds to a property of the &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt; class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because all properties are read/write, their values can also be assigned directly.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt; method generates an assembly that contains compiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you should not specify &lt;xref:System.Text.RegularExpressions.RegexOptions&gt; as one of the values of <ph id="ph1">`options`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ispublic`</ph> is <ph id="ph2">`true`</ph>, the compiled regular expression class is given public accessibility.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it can be instantiated from code that executes in any assembly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ispublic`</ph> is <ph id="ph2">`false`</ph>, the compiled regular expression class is given <ph id="ph3">`internal`</ph> (in C#) or <ph id="ph4">`Friend`</ph> (in Visual Basic) accessibility.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it can be instantiated only from code that executes in the same assembly as the regular expression class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The regular expression to compile.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The regular expression options to use when compiling the regular expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The name of the type that represents the compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The namespace to which the new type belongs.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to make the compiled regular expression publicly visible; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">&amp;lt;</ph>xref:System.String?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pattern&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;fullnamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Text.RegularExpressions.RegexCompilationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains information about a regular expression with a specified time-out value to be included in an assembly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each parameter of the &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29&gt; constructor directly corresponds to a property of the &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt; class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because all properties are read/write, their values can also be assigned directly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt; method generates an assembly that contains compiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you should not specify &lt;xref:System.Text.RegularExpressions.RegexOptions&gt; as one of the values of <ph id="ph1">`options`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ispublic`</ph> is <ph id="ph2">`true`</ph>, the compiled regular expression class is given public accessibility.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it can be instantiated from code that executes in any assembly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ispublic`</ph> is <ph id="ph2">`false`</ph>, the compiled regular expression class is given <ph id="ph3">`internal`</ph> (in C#) or <ph id="ph4">`Friend`</ph> (in Visual Basic) accessibility.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it can be instantiated only from code that executes in the same assembly as the regular expression class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`matchTimeout`</ph> parameter defines the default time-out interval for the compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value represents the approximate amount of time that a compiled regular expression object will execute a single matching operation before the operation times out and the regular expression engine throws a &lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt; exception during its next timing check.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information about the time-out value, see the &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  We recommend that you always set a default time-out value for a compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of your regular expression library can override that time-out value by passing a &lt;xref:System.TimeSpan&gt; value that represents the new time-out interval to this constructor overload.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The regular expression to compile.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The regular expression options to use when compiling the regular expression.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The name of the type that represents the compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The namespace to which the new type belongs.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to make the compiled regular expression publicly visible; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The default time-out interval for the regular expression.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">&amp;lt;</ph>xref:System.String?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pattern&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;fullnamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;matchTimeout&lt;/code&gt;</ph> is negative, zero, or greater than approximately 24 days.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the compiled regular expression has public visibility.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the IsPublic property is <ph id="ph1">`false`</ph>, the regular expression class defined by the current instance can be instantiated only by code that is executing in the assembly that contains the class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because the &lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=fullName&gt; method generates an assembly that contains only compiled regular expressions and does not allow additional code to be added, there is generally no reason to assign this property a value of <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the regular expression has public visibility; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets the regular expression's default time-out interval.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MatchTimeout property defines the default time-out interval for the compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value represents the approximate amount of time that a compiled regular expression will execute a single matching operation before the operation times out and the regular expression engine throws a &lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt; exception during its next timing check.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  We recommend that you always set a default time-out value for a compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of your regular expression library can override that time-out value by passing a &lt;xref:System.TimeSpan&gt; value that represents the new time-out interval to the compiled regular expression's class constructor.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can assign a default time-out value to a &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt; object in any of the following ways:      -   By calling the &lt;xref:System.AppDomain.SetData%2A?displayProperty=fullName&gt; method and providing the string representation of a &lt;xref:System.TimeSpan&gt; value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   By calling the &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29&gt; constructor and providing a value for the <ph id="ph1">`matchTimeout`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   By setting the value of this property.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set a reasonable time-out interval, consider the following factors:      -   The length and complexity of the regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Longer and more complex regular expressions require more time than shorter and simpler ones.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The expected machine load.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Processing takes more time on systems with high CPU and memory utilization.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The default maximum time interval that can elapse in a pattern-matching operation before a &lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt; is thrown, or <ph id="ph1">&amp;lt;</ph>xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> if time-outs are disabled.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the type that represents the compiled regular expression.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt; class is used to define a compiled regular expression, which is represented as a class derived from &lt;xref:System.Text.RegularExpressions.Regex&gt;.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Name property defines the class name of the regular expression type, and the &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A&gt; and Name properties together define its fully qualified name.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The name of the new type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value for this property is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The value for this property is an empty string.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace to which the new type belongs.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo&gt; class is used to define a compiled regular expression, which is represented as a class derived from &lt;xref:System.Text.RegularExpressions.Regex&gt;.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Namespace property defines the namespace that contains the compiled regular expression type, and the Namespace and &lt;xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A&gt; properties together define its fully qualified name.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The namespace of the new type.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The value for this property is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets or sets the options to use when compiling the regular expression.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt; method generates an assembly that contains compiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you do not have to specify &lt;xref:System.Text.RegularExpressions.RegexOptions&gt; as one of the values of this property.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is present, the &lt;xref:System.Text.RegularExpressions.RegexOptions&gt; option is ignored.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets or sets the regular expression to compile.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Pattern property can contain any valid regular expression.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the Pattern property is not a syntactically correct regular expression pattern, the call to the &lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt; method throws an &lt;xref:System.ArgumentException&gt;.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The regular expression to compile.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The value for this property is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>