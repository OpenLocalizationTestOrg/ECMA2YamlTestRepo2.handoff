<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="hu-hu">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4630f91e3baca4c8c73026f92f6ba246ae29a8e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.WindowInteropHelper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a996eefd90f00f2c60dcacf7f609cfccd1c5f2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b86cfff4608a46f453ed9a38fd30635f7c287a1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Assists interoperation between <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class allows the caller to have internal access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The proper security checks are performed by those members.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class whenever you need a more specific object based on its HWND.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example scenario is if you need to host a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initialize the WindowInteropHelper with a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then get the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property and specify the owner for the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window with the &lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code example shows how to use WindowInteropHelper when hosting a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CorePseudocode#WindowInteropHelper<ept id="p2">](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CorePseudocode#WindowInteropHelper<ept id="p4">](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)</ept><ept id="p3">]</ept>       Another scenario supported by this class is to obtain a &lt;xref:System.Windows.Interop.HwndSource&gt; object from a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt; object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.HwndSource&gt; enables direct processing of <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> messages through the &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using &lt;xref:System.Windows.Interop.HwndSource&gt; and &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; in place of a &lt;xref:System.Windows.Window&gt; you can still handle messages that have no equivalent or handling in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a WindowInteropHelper with the &lt;xref:System.Windows.Window&gt; source, then call &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; on the WindowInteropHelper to get from HWND to &lt;xref:System.Windows.Interop.HwndSource&gt;.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a specified <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates the HWND of the window if the HWND has not been created yet.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed &lt;xref:System.Windows.Window&gt;.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the native window has not yet been created, this method creates the native window, sets the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property, and returns the HWND.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the native window has been created already, the handle of the existing native window is returned.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the native window is created as a result of calling this method, the &lt;xref:System.Windows.Window.SourceInitialized&gt; event is raised.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Querying the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property after the EnsureHandle method is called returns the existing window handle.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The visual tree is not attached to the window until after the &lt;xref:System.Windows.Window.Show%2A&gt; method is called.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the EnsureHandle method more than one time does not create new window handles.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the EnsureHandle method when the handle has already been created by a call to the &lt;xref:System.Windows.Window.Show%2A&gt; method does not create a new window handle.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A native window is only created when no handle exists when the EnsureHandle method is called.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the &lt;xref:System.Windows.Window.Topmost%2A&gt; property is not guaranteed to reflect the native setting.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that represents the HWND.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the window handle for a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window that is used to create this <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window handle (HWND).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets or sets the handle of the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> owner window.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reparent windows by setting this property.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>As is true for general <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The owner window handle (HWND).</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>