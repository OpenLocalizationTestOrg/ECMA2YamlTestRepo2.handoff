<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="hu-hu">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">905c14769cbf01faa2a4715cab9ff22565142665</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Serialization.IDataContractSurrogate.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">481b3baeeb0047f6149426f1bf21529d6e6c71d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33df00df818b2b1baa8399c5998c1f9267961c1e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the methods needed to substitute one type for another by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; during serialization, deserialization, and export and import of XML schema documents (XSD).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the IDataContractSurrogate when using the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a sample application, see <bpt id="p1">[</bpt>DataContract Surrogate<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about data contracts, see <bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>At run time, you can find the specific &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; for any operation in a service by using the &lt;xref:System.ServiceModel.Description.OperationDescription&gt; to find the &lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt; instance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implementing the interface to create a surrogate, see <bpt id="p1">[</bpt>Data Contract Surrogates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the IDataContractSurrogate to affect the import and export of XML schemas when you are using the &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt; and &lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt; classes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do so by assigning the IDataContractSurrogate to the &lt;xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A&gt; property of the &lt;xref:System.Runtime.Serialization.ExportOptions&gt; class, or to the &lt;xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A&gt; property of the &lt;xref:System.Runtime.Serialization.ImportOptions&gt; class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Schema Import and Export<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>During schema export operations, inserts annotations into the schema for non-null return values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.MemberInfo&gt; that describes the member.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Type&gt;.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An object that represents the annotation to be inserted into the XML schema definition.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>During schema export operations, inserts annotations into the schema for non-null return values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The CLR type to be replaced.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data contract type to be annotated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An object that represents the annotation to be inserted into the XML schema definition.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The CLR type &lt;xref:System.Type&gt; to substitute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to substitute for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept> value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This type must be serializable by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt; attribute or other mechanisms that the serializer recognizes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>During deserialization, returns an object that is a substitute for the specified object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a simple implementation, use an if…then…else control structure to test whether the <ph id="ph1">`obj`</ph> value is of the surrogated type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, transform it as necessary and return the substituted object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The substituted object can be a new instance or the same <ph id="ph1">`obj`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The deserialized object to be substituted.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; that the substituted object should be assigned to.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The substituted deserialized object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This object must be of a type that is serializable by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt; attribute or other mechanisms that the serializer recognizes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sets the collection of known types to use for serialization and deserialization of the custom data objects.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is required during schema export or schema import only if annotations are inserted into the schema using the &lt;xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.ObjectModel.Collection%601<ph id="ph2">&amp;gt;</ph> of &lt;xref:System.Type&gt; to add known types to.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>During serialization, returns an object that substitutes the specified object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method must not return <ph id="ph1">`null`</ph> because on deserialization the data will be cast to type &lt;xref:System.Object&gt; and an &lt;xref:System.InvalidCastException&gt; is thrown.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object to substitute.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; that the substituted object should be assigned to.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The substituted object that will be serialized.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The object must be serializable by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt; attribute or other mechanisms that the serializer recognizes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>During schema import, returns the type referenced by the schema.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Null`</ph> should be returned if a CLR type does not exist for representing the schema type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will cause a new type to be generated during schema import.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name of the type in schema.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The namespace of the type in schema.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to use for the referenced type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Processes the type that has been generated from the imported schema.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; or other information in the &lt;xref:System.CodeDom.CodeCompileUnit&gt; can be modified by the user in this method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`null`</ph> is returned, it will cause the type to not be generated.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; is returned, it will replace the original type generated.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to process that represents the type declaration generated during schema import.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the other code generated during schema import.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the processed type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>