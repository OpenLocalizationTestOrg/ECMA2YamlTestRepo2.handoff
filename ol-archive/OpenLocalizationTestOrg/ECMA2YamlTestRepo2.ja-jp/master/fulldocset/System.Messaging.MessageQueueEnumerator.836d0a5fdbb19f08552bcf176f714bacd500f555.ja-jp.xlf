<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fdb83d175479136df33f1017a6ceab13106b6ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.MessageQueueEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d182676a1fde3342b67cf5b75472ec63c5b3c0d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4672ec0455c354d8f3060781255926efffa18c3c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a forward-only cursor to enumerate through messages in a message queue.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Use MessageQueueEnumerator for dynamic interaction with queues on the network.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Methods available through the &lt;xref:System.Messaging.MessageQueue&gt; class can return either a MessageQueueEnumerator containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There is no defined ordering of queues in a network.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A MessageQueueEnumerator is a cursor, initialized to the head of a dynamic list.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can move the cursor to the first queue of the enumeration by calling &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After the enumerator has been initialized, you can use &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; to step forward through the remaining queues.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is not possible to step backward with a MessageQueueEnumerator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A cursor only allows forward movement through the queue enumeration.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, you can call &lt;xref:System.Messaging.MessageQueueEnumerator.Reset%2A&gt; to reset the enumeration and put the cursor at the beginning of the list again.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Frees the resources associated with the enumerator.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The operating system retains an open handle, &lt;xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A&gt;, to the queue enumerator during the lifetime of the cursor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you finish working with the enumerator, call Close to release the resources associated with the handle.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the current <bpt id="p1">&lt;xref href="System.Messaging.MessageQueue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the enumeration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When the enumerator is created, it does not point to anything, so Current is not valid and will throw an exception if it is accessed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You must call &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; to position the cursor at the first queue in the enumeration.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Multiple calls to Current with no intervening calls to &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; will return the same &lt;xref:System.Messaging.MessageQueue&gt; object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The queue at which the cursor is currently positioned.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You called Current before the first call to &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext<bpt id="p1">*</bpt>&gt;. The cursor is located before the first queue in the enumeration.       -or-       You called Current after a call to &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext<ept id="p1">*</ept>&gt; had returned false (indicating the cursor is located after the last queue in the enumeration).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Calling Dispose allows the resources used by the &lt;xref:System.Messaging.MessageQueueEnumerator&gt; to be reallocated for other purposes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about Dispose, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.Messaging.MessageQueueEnumerator.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Messaging.MessageQueueEnumerator&gt; references.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the native Message Queuing handle used to locate queues in a network.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you no longer need this &lt;xref:System.Messaging.MessageQueueEnumerator&gt; instance, call &lt;xref:System.Messaging.MessageQueueEnumerator.Close%2A&gt; to free this handle to the resource.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The native handle to the current queue.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The handle does not exist.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The calling code does not have browse permissions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next queue of the enumeration, if one is currently available.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>MoveNext returns <ph id="ph1">`false`</ph> immediately if there are no queues associated with the enumeration.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>MoveNext will return <ph id="ph1">`true`</ph> until it has reached the end of the collection.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It will then return <ph id="ph1">`false`</ph> for each successive call.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However once MoveNext has returned <ph id="ph1">`false`</ph>, accessing the &lt;xref:System.Messaging.MessageQueueEnumerator.Current%2A&gt; property will throw an exception.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Upon creation, an enumerator is conceptually positioned before the first &lt;xref:System.Messaging.MessageQueue&gt; of the enumeration, and the first call to MoveNext brings the first queue of the enumeration into view.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next queue; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has reached the end of the enumeration.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The calling code does not have browse permissions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Resets the cursor, so it points to the beginning of the enumeration.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An enumerator moves in a forward-only direction.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use this method to return to the beginning of the enumeration of queues.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Reset positions the cursor at the first queue in the list.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You do not need to call &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; after calling Reset to move the cursor forward to the first queue in the enumeration.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets the current <bpt id="p1">&lt;xref href="System.Messaging.MessageQueue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the enumeration.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The queue at which the cursor is currently positioned.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>