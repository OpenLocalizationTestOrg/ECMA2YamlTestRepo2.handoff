<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sv-se">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c11756717e56d564d1de0ee42bda991978235c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Diagnostics.Process.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25bf25b57e9602ee76781e17624dfeead412d267</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c03c88f161228add9889b271f663fc35a0bffd9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides access to local and remote processes and enables you to start and stop local system processes.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To browse the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs#f8b2e604d6f1fe04)</ept>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify the &lt;xref:System.Diagnostics.Process.MachineName%2A&gt; property, the default is the local computer, (".").</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You have two options for associating a new &lt;xref:System.Diagnostics.Process&gt; component with a process on the computer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first option is to use the constructor to create the &lt;xref:System.Diagnostics.Process&gt; component, set the appropriate members of the &lt;xref:System.Diagnostics.Process.StartInfo%2A&gt; property and call &lt;xref:System.Diagnostics.Process.Start%2A&gt; to associate the &lt;xref:System.Diagnostics.Process&gt; with a new system process.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second option is to associate the &lt;xref:System.Diagnostics.Process&gt; with a running system process by using &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; or one of the &lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt; return values.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use a <ph id="ph1">`static`</ph> overload of the &lt;xref:System.Diagnostics.Process.Start%2A&gt; method to start a new system process, the method creates a new &lt;xref:System.Diagnostics.Process&gt; component and associates it with the process.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName&gt; property is set to its default value, <ph id="ph1">`true`</ph>, you can start applications and documents in a way that is similar to using the <ph id="ph2">`Run`</ph> dialog box of the Windows <ph id="ph3">`Start`</ph> menu.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName&gt; is <ph id="ph1">`false`</ph>, you can start only executables.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the &lt;xref:System.Diagnostics.Process.StartInfo%2A&gt; property and calling the &lt;xref:System.Diagnostics.Process.Start%2A&gt; method with no parameters, or by passing the appropriate parameter to the <ph id="ph1">`static`</ph>&lt;xref:System.Diagnostics.Process.Start%2A&gt; member.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a &lt;xref:System.Diagnostics.Process&gt; component by using the constructor, one of the static &lt;xref:System.Diagnostics.Process.Start%2A&gt; overloads, or any of the &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;, &lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;, or &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have done so, you have a view into the associated process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is not a dynamic view that updates itself automatically when the process properties have changed in memory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you must call &lt;xref:System.Diagnostics.Process.Refresh%2A&gt; for the component to update the &lt;xref:System.Diagnostics.Process&gt; property information in your application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the base priority of the associated process.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The BasePriority of the process is the starting priority for threads created within the associated process.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view information about the base priority through the System Monitor's Priority Base counter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The BasePriority property lets you view the starting priority assigned to a process.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because it is read-only, you cannot use the BasePriority to set the priority of the process.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the priority, use the &lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The BasePriority is viewable using the System Monitor, while the &lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt; is not.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the BasePriority and the &lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt; can be viewed programmatically.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the relationship between BasePriority values and &lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt; values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>|BasePriority|PriorityClass|   |------------------|-------------------|   |4|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|   |8|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|   |13|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|   |24|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The base priority, which is computed from the &lt;xref:System.Diagnostics.Process.PriorityClass*&gt; of the associated process.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The process has exited.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-or-       The process has not started, so there is no process ID.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Begins asynchronous read operations on the redirected &lt;xref:System.Diagnostics.Process.StandardError*&gt; stream of the application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream can be read synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, and &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt; perform synchronous read operations on the error output stream of the process.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>These synchronous read operations do not complete until the associated &lt;xref:System.Diagnostics.Process&gt; writes to its &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream, or closes the stream.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, BeginErrorReadLine starts asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Follow these steps to perform asynchronous read operations on &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; for a &lt;xref:System.Diagnostics.Process&gt; :      1.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A&gt; to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add your event handler to the &lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt; event.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handler must match the &lt;xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=fullName&gt; delegate signature.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>4.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Start the &lt;xref:System.Diagnostics.Process&gt;.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>5.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call BeginErrorReadLine for the &lt;xref:System.Diagnostics.Process&gt;.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This call starts asynchronous read operations on &lt;xref:System.Diagnostics.Process.StandardError%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>When asynchronous read operations start, the event handler is called each time the associated &lt;xref:System.Diagnostics.Process&gt; writes a line of text to its &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel an asynchronous read operation by calling &lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read operation can be canceled by the caller or by the event handler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>After canceling, you can call BeginErrorReadLine again to resume asynchronous read operations.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the redirected stream of a &lt;xref:System.Diagnostics.Process&gt; is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, do not follow BeginErrorReadLine with a call to &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; on the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream, or vice versa.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can read two different streams in different modes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can call BeginErrorReadLine and then call &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; for the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Begins asynchronous read operations on the redirected &lt;xref:System.Diagnostics.Process.StandardOutput*&gt; stream of the application.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream can be read synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, and &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt; perform synchronous read operations on the output stream of the process.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>These synchronous read operations do not complete until the associated &lt;xref:System.Diagnostics.Process&gt; writes to its &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream, or closes the stream.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, BeginOutputReadLine starts asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Follow these steps to perform asynchronous read operations on &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; for a &lt;xref:System.Diagnostics.Process&gt; :      1.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt; to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add your event handler to the &lt;xref:System.Diagnostics.Process.OutputDataReceived&gt; event.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handler must match the &lt;xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=fullName&gt; delegate signature.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>4.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Start the &lt;xref:System.Diagnostics.Process&gt;.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>5.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call BeginOutputReadLine for the &lt;xref:System.Diagnostics.Process&gt;.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>This call starts asynchronous read operations on &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>When asynchronous read operations start, the event handler is called each time the associated &lt;xref:System.Diagnostics.Process&gt; writes a line of text to its &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel an asynchronous read operation by calling &lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read operation can be canceled by the caller or by the event handler.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>After canceling, you can call BeginOutputReadLine again to resume asynchronous read operations.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the redirected stream of a &lt;xref:System.Diagnostics.Process&gt; is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, do not follow BeginOutputReadLine with a call to &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream, or vice versa.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can read two different streams in different modes.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can call BeginOutputReadLine and then call &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; for the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Cancels the asynchronous read operation on the redirected &lt;xref:System.Diagnostics.Process.StandardError*&gt; stream of an application.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt; starts an asynchronous read operation on the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>CancelErrorRead ends the asynchronous read operation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>After canceling, you can resume the asynchronous read operation by calling &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt; again.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call CancelErrorRead, all in-progress read operations for &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; are completed and then the event handler is disabled.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>All further redirected output to &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; is saved in a buffer.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you re-enable the event handler with a call to &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;, the saved output is sent to the event handler and asynchronous read operations resume.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:      <ph id="ph1">```   // At this point the DataReceivedEventHandler(ErrorHandler1)    // has executed a CancelErrorRead.      // Remove the prior event handler.   process.ErrorDataReceived -=        new DataReceivedEventHandler(ErrorHandler1);      // Register a new event handler.   process.ErrorDataReceived +=        new DataReceivedEventHandler(ErrorHandler2);      // Call the corresponding BeginErrorReadLine.   process.BeginErrorReadLine();   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  You cannot mix asynchronous and synchronous read operations on the redirected &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the redirected stream of a &lt;xref:System.Diagnostics.Process&gt; is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cancel an asynchronous read operation on &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; and then need to read from the stream again, you must use &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt; to resume asynchronous read operations.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not follow CancelErrorRead with a call to the synchronous read methods of &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, or &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.Process.StandardError*&gt; stream is not enabled for asynchronous read operations.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Cancels the asynchronous read operation on the redirected &lt;xref:System.Diagnostics.Process.StandardOutput*&gt; stream of an application.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; starts an asynchronous read operation on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>CancelOutputRead ends the asynchronous read operation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>After canceling, you can resume asynchronous read operations by calling &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; again.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call CancelOutputRead, all in-progress read operations for &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; are completed and then the event handler is disabled.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>All further redirected output to &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; is saved in a buffer.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you re-enable the event handler with a call to &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;, the saved output is sent to the event handler and asynchronous read operations resume.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:      <ph id="ph1">```   // At this point the DataReceivedEventHandler(OutputHandler1)    // has executed a CancelOutputRead.      // Remove the prior event handler.   process.OutputDataReceived -=        new DataReceivedEventHandler(OutputHandler1);      // Register a new event handler.   process.OutputDataReceived +=        new DataReceivedEventHandler(OutputHandler2);      // Call the corresponding BeginOutputReadLine.   process.BeginOutputReadLine();   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  You cannot mix asynchronous and synchronous read operations on the redirected &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the redirected stream of a &lt;xref:System.Diagnostics.Process&gt; is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cancel an asynchronous read operation on &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; and then need to read from the stream again, you must use &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; to resume asynchronous read operations.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not follow CancelOutputRead with a call to the synchronous read methods of &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, or &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.Process.StandardOutput*&gt; stream is not enabled for asynchronous read operations.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Frees all the resources that are associated with this component.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Close method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Close does not close the standard output, input, and error readers and writers in case they are being referenced externally.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The &lt;xref:System.Diagnostics.Process.Dispose%2A&gt; method calls Close.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Placing the &lt;xref:System.Diagnostics.Process&gt; object in a <ph id="ph1">`using`</ph> block disposes of resources without the need to call Close.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Closes a process that has a user interface by sending a close message to its main window.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a process is executing, its message loop is in a wait state.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The message loop executes every time a Windows message is sent to the process by the operating system.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling CloseMainWindow sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The request to exit the process by calling CloseMainWindow does not force the application to quit.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application can ask for user verification before quitting, or it can refuse to quit.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>To force the application to quit, use the &lt;xref:System.Diagnostics.Process.Kill%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of CloseMainWindow is identical to that of a user closing an application's main window using the system menu.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data edited by the process or resources allocated to the process can be lost if you call &lt;xref:System.Diagnostics.Process.Kill%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.Kill%2A&gt; causes an abnormal process termination, and should be used only when necessary.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>CloseMainWindow enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>If CloseMainWindow fails, you can use &lt;xref:System.Diagnostics.Process.Kill%2A&gt; to terminate the process.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.Kill%2A&gt; is the only way to terminate processes that do not have graphical interfaces.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call &lt;xref:System.Diagnostics.Process.Kill%2A&gt; and CloseMainWindow only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot cause processes on remote computers to exit.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can only view information for processes running on remote computers.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the close message was successfully sent; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The process has already exited.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>-or-       No process is associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Release all resources used by this process.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the <bpt id="p1">&lt;xref href="System.Diagnostics.Process.Exited"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event should be raised when the process terminates.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The EnableRaisingEvents property indicates whether the component should be notified when the operating system has shut down a process.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The EnableRaisingEvents property is used in asynchronous processing to notify your application that a process has exited.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you are using Visual Studio and double-click a &lt;xref:System.Diagnostics.Process&gt; component in your project, an &lt;xref:System.Diagnostics.Process.Exited&gt; event delegate and event handler are automatically generated.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additional code sets the EnableRaisingEvents property to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must change this property to <ph id="ph1">`true`</ph> for your event handler to be executed when the associated process exits.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an associated process exits after being shut down by the operating system either through a normal or abnormal termination, the operating system notifies each process component to which the process was associated, as long as the component's EnableRaisingEvents value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a component started the process, the component can then access the administrative information for the associated process, which is still being stored by the operating system.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such information includes the &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;, and the &lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the associated process exits, the &lt;xref:System.Diagnostics.Process.Handle%2A&gt; of the component no longer points to an existing process resource.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it can be used only to access the operating system's information about the process resource.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system is aware that there are handles to exited processes that have not been released by &lt;xref:System.Diagnostics.Process&gt; components, so it keeps the &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt; and &lt;xref:System.Diagnostics.Process.Handle%2A&gt; information in memory.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a cost associated with watching for a process to exit.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If EnableRaisingEvents is <ph id="ph1">`true`</ph>, the &lt;xref:System.Diagnostics.Process.Exited&gt; event is raised when the associated process terminates.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The procedures that you have specified for the &lt;xref:System.Diagnostics.Process.Exited&gt; event run at that time.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sometimes, your application starts a process but does not need to be notified of its closure.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your application can start Notepad to allow the user to perform text editing, but make no further use of the Notepad application.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can choose to not be notified when the process exits, because it is not relevant to the continued operation of your application.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting EnableRaisingEvents to <ph id="ph1">`false`</ph> saves system resources.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Diagnostics.Process.Exited"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event should be raised when the associated process is terminated (through either an exit or a call to &lt;xref:System.Diagnostics.Process.Kill*&gt;); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Puts a <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component in state to interact with operating system processes that run in a special mode by enabling the native property <bpt id="p2">&lt;xref uid="langword_csharp_SeDebugPrivilege" name="SeDebugPrivilege" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> on the current thread.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some operating system processes run in a special mode.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to read properties of or attach to these processes is not possible unless you have called EnterDebugMode on the component.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call &lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt; when you no longer need access to these processes that run in special mode.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Occurs when an application writes to its redirected &lt;xref:System.Diagnostics.Process.StandardError*&gt; stream.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ErrorDataReceived event indicates that the associated process has written to its redirected &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event only occurs during asynchronous read operations on &lt;xref:System.Diagnostics.Process.StandardError%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>To start asynchronous read operations, you must redirect the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream of a &lt;xref:System.Diagnostics.Process&gt;, add your event handler to the ErrorDataReceived event, and call &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thereafter, the ErrorDataReceived event signals each time the process writes a line to the redirected &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream, until the process exits or calls &lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The application that is processing the asynchronous output should call the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to ensure that the output buffer has been flushed.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Gets the value that the associated process specified when it terminated.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use ExitCode to get the status that the system process returned when it exited.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the exit code much like an integer return value from a <ph id="ph1">`main()`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ExitCode value for a process reflects the specific convention implemented by the application developer for that process.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers usually indicate a successful exit by an ExitCode value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not necessary to follow these guidelines, but they are the convention.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to get the ExitCode before the process has exited, the attempt throws an exception.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examine the &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; property first to verify whether the associated process has terminated.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that asynchronous event handling has been completed, call the &lt;xref:System.Diagnostics.Process.WaitForExit&gt; overload that takes no parameter before checking &lt;xref:System.Diagnostics.Process.HasExited%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; or the &lt;xref:System.Diagnostics.Process.Kill%2A&gt; method to cause an associated process to exit.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways of being notified when the associated process exits: synchronously and asynchronously.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronous notification relies on calling the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to pause the processing of your application until the associated component exits.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronous notification relies on the &lt;xref:System.Diagnostics.Process.Exited&gt; event.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using asynchronous notification, &lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt; must be set to <ph id="ph1">`true`</ph> for the &lt;xref:System.Diagnostics.Process&gt; component to receive notification that the process has exited.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The code that the associated process specified when it terminated.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The process has not exited.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>-or-       The process &lt;xref:System.Diagnostics.Process.Handle*&gt; is not valid.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>You are trying to access the ExitCode property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Occurs when a process exits.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Exited event indicates that the associated process exited.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurrence means either that the process terminated (aborted) or successfully closed.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event can occur only if the value of the &lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt; property is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways of being notified when the associated process exits: synchronously and asynchronously.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronous notification means calling the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to block the current thread until the process exits.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronous notification uses the Exited event, which allows the calling thread to continue execution in the meantime.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the latter case, &lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt; must be set to <ph id="ph1">`true`</ph> for the calling application to receive the Exited event.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this time, the handle of the process that just exited can be used to access some properties such as  &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt; and &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; that the operating system maintains until it releases that handle completely.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Even if you have a handle to an exited process, you cannot call &lt;xref:System.Diagnostics.Process.Start%2A&gt; again to reconnect to the same process.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Diagnostics.Process.Start%2A&gt; automatically releases the associated process and connects to a process with the same file but an entirely new &lt;xref:System.Diagnostics.Process.Handle%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the use of the Exited event in Windows Forms applications, see the &lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Gets the time that the associated process exited.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the process has not terminated, attempting to retrieve the ExitTime property throws an exception.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; before getting the ExitTime property to determine whether the associated process has terminated.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.DateTime&gt; that indicates when the associated process was terminated.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>You are trying to access the ExitTime property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Gets a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component and associates it with the currently active process.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create a new &lt;xref:System.Diagnostics.Process&gt; instance and associate it with the process resource on the local computer.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like the similar &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;, &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;, and &lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt; methods, GetCurrentProcess associates an existing resource with a new &lt;xref:System.Diagnostics.Process&gt; component.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component associated with the process resource that is running the calling application.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Returns a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component, given the identifier of a process on the local computer.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create a new &lt;xref:System.Diagnostics.Process&gt; component and associate it with a process resource on the local computer.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process resource must already exist on the computer, because GetProcessById does not create a system resource, but rather associates a resource with an application-generated &lt;xref:System.Diagnostics.Process&gt; component.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process &lt;xref:System.Diagnostics.Process.Id%2A&gt; can be retrieved only for a process that is currently running on the computer.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the process terminates, GetProcessById throws an exception if you pass it an expired identifier.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>On any particular computer, the identifier of a process is unique.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetProcessById returns one process at most.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to get all the processes running a particular application, use &lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple processes exist on the computer running the specified application, &lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt; returns an array containing all the associated processes.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can query each of these processes in turn for its identifier.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process identifier can be viewed in the <ph id="ph1">`Processes`</ph> panel of the Windows Task Manager.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`PID`</ph> column displays the process identifier that is assigned to a process.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The system-unique identifier of a process resource.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component that is associated with the local process resource identified by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">processId</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The process specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">processId</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not running.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The identifier might be expired.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The process was not started by this object.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Returns a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component, given a process identifier and the name of a computer on the network.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create a new &lt;xref:System.Diagnostics.Process&gt; component and associate it with a process resource on a remote computer on the network.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process resource must already exist on the specified computer, because GetProcessById does not create a system resource, but rather associates a resource with an application-generated &lt;xref:System.Diagnostics.Process&gt; component.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process &lt;xref:System.Diagnostics.Process.Id%2A&gt; can be retrieved only for a process that is currently running on the computer.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the process terminates, GetProcessById throws an exception if you pass it an expired identifier.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>On any particular computer, the identifier of a process is unique.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetProcessById returns one process at most.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to get all the processes running a particular application, use &lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple processes exist on the computer running the specified application, &lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt; returns an array containing all the associated processes.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can query each of these processes in turn for its identifier.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process identifier can be viewed in the <ph id="ph1">`Processes`</ph> panel of the Windows Task Manager.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`PID`</ph> column displays the process identifier that is assigned to a process.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a <ph id="ph1">`machineName`</ph>, the local computer is used.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can specify the local computer by setting <ph id="ph1">`machineName`</ph> to the value "." or to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The system-unique identifier of a process resource.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The name of a computer on the network.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component that is associated with a remote process resource identified by the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">processId</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The process specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">processId</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not running.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The identifier might be expired.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">machineName</ph><ept id="p1">&lt;/code&gt;</ept> parameter syntax is invalid.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The name might have length zero (0).</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">machineName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The process was not started by this object.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Creates a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component for each process resource on the local computer.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create an array of new &lt;xref:System.Diagnostics.Process&gt; components and associate them with all the process resources on the local computer.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process resources must already exist on the local computer, because GetProcesses does not create system resources but rather associates resources with application-generated &lt;xref:System.Diagnostics.Process&gt; components.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operating system itself is running background processes, this array is never empty.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; or &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; creates a &lt;xref:System.Diagnostics.Process&gt; component that is associated with the process identified on the system by the process identifier that you pass to the method.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; creates an array of &lt;xref:System.Diagnostics.Process&gt; components whose associated process resources share the executable file you pass to the method.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetProcesses does not identify those individual services; for that, see &lt;xref:System.ServiceProcess.ServiceController.GetServices%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents all the process resources running on the local computer.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Creates a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component for each process resource on the specified computer.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create an array of new &lt;xref:System.Diagnostics.Process&gt; components and associate them with all the process resources on the specified (usually remote) computer.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process resources must already exist on the local computer, because &lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt; does not create system resources but rather associates resources with application-generated &lt;xref:System.Diagnostics.Process&gt; components.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the operating system itself is running background processes, this array is never empty.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; or &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; creates a &lt;xref:System.Diagnostics.Process&gt; component that is associated with the process identified on the system by the process identifier that you pass to the method.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; creates an array of &lt;xref:System.Diagnostics.Process&gt; components whose associated process resources share the executable file you pass to the method.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the &lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt; method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing ".".</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetProcesses does not identify those individual services; for that, see &lt;xref:System.ServiceProcess.ServiceController.GetServices%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The computer from which to read the list of processes.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents all the process resources running on the specified computer.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">machineName</ph><ept id="p1">&lt;/code&gt;</ept> parameter syntax is invalid.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>It might have length zero (0).</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">machineName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The operating system platform does not support this operation on remote computers.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>There are problems accessing the performance counter API's used to get process information.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This exception is specific to Windows NT, Windows 2000, and Windows XP.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A problem occurred accessing an underlying system API.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Creates an array of new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> components and associates them with all the process resources on the local computer that share the specified process name.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create an array of new &lt;xref:System.Diagnostics.Process&gt; components and associate them with all the process resources that are running the same executable file on the local computer.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process resources must already exist on the computer, because GetProcessesByName does not create system resources but rather associates them with application-generated &lt;xref:System.Diagnostics.Process&gt; components.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`processName`</ph> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetProcessesByName is helpful for getting and manipulating all the processes that are associated with the same executable file.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can pass an executable file name as the <ph id="ph1">`processName`</ph> parameter, in order to shut down all the running instances of that executable file.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although a process &lt;xref:System.Diagnostics.Process.Id%2A&gt; is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the <ph id="ph1">`processName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; returns one process at most, but GetProcessesByName returns an array containing all the associated processes.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot access process resources through the process name alone but, once you have retrieved an array of &lt;xref:System.Diagnostics.Process&gt; components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The friendly name of the process.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the process resources running the specified application or file.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>There are problems accessing the performance counter API's used to get process information.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>This exception is specific to Windows NT, Windows 2000, and Windows XP.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Creates an array of new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> components and associates them with all the process resources on a remote computer that share the specified process name.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create an array of new &lt;xref:System.Diagnostics.Process&gt; components and associate them with all the process resources that are running the same executable file on the specified computer.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process resources must already exist on the computer, because &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; does not create system resources but rather associates them with application-generated &lt;xref:System.Diagnostics.Process&gt; components.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`processName`</ph> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; is helpful for getting and manipulating all the processes that are associated with the same executable file.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can pass an executable file name as the <ph id="ph1">`processName`</ph> parameter, in order to shut down all the running instances of that executable file.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although a process &lt;xref:System.Diagnostics.Process.Id%2A&gt; is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the <ph id="ph1">`processName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; returns one process at most, but &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt; returns an array containing all the associated processes.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot access process resources through the process name alone but, once you have retrieved an array of &lt;xref:System.Diagnostics.Process&gt; components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this overload to get processes on the local computer as well as on a remote computer.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use "." to specify the local computer.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another overload exists that uses the local computer by default.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can access processes on remote computers only to view information, such as statistics, about the processes.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot close, terminate (using &lt;xref:System.Diagnostics.Process.Kill%2A&gt;), or start processes on remote computers.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The friendly name of the process.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The name of a computer on the network.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the process resources running the specified application or file.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">machineName</ph><ept id="p1">&lt;/code&gt;</ept> parameter syntax is invalid.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>It might have length zero (0).</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">machineName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The operating system platform does not support this operation on remote computers.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>There are problems accessing the performance counter API's used to get process information.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This exception is specific to Windows NT, Windows 2000, and Windows XP.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A problem occurred accessing an underlying system API.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Gets the native handle of the associated process.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this handle to initialize a &lt;xref:System.Threading.WaitHandle&gt; or to call native methods with platform invoke.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>This process handle is private to an application--in other words, process handles cannot be shared.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process also has a process &lt;xref:System.Diagnostics.Process.Id%2A&gt; which, unlike the Handle, is unique and, therefore, valid throughout the system.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only processes started through a call to &lt;xref:System.Diagnostics.Process.Start%2A&gt; set the Handle property of the corresponding &lt;xref:System.Diagnostics.Process&gt; instances.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The handle that the operating system assigned to the associated process when the process was started.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The system uses this handle to keep track of process attributes.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The process has not been started or has exited.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The Handle property cannot be read because there is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>You are trying to access the Handle property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Gets the number of handles opened by the process.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handles provide a way for a process to refer to objects.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process can obtain handles to files, resources, message queues, and many other operating system objects.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system reclaims the memory associated with the process only when the handle count is zero.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The number of operating system handles the process has opened.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the associated process has been terminated.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of <ph id="ph1">`true`</ph> for HasExited indicates that the associated process has terminated, either normally or abnormally.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can request or force the associated process to exit by calling &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; or &lt;xref:System.Diagnostics.Process.Kill%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get this information, you can use the &lt;xref:System.Diagnostics.Process.ExitCode%2A&gt; and &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt; properties.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>These properties are populated automatically for processes that were started by this component.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>The administrative information is released when all the &lt;xref:System.Diagnostics.Process&gt; components that are associated with the system process are destroyed and hold no more handles to the exited process.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process can terminate independently of your code.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you started the process using this component, the system updates the value of HasExited automatically, even if the associated process exits independently.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that asynchronous event handling has been completed, call the &lt;xref:System.Diagnostics.Process.WaitForExit&gt; overload that takes no parameter before checking HasExited.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the operating system process referenced by the <bpt id="p2">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> component has terminated; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>There is no process associated with the object.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The exit code for the process could not be retrieved.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>You are trying to access the HasExited property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Gets the unique identifier for the associated process.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process Id is not valid if the associated process is not running.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you should ensure that the process is running before attempting to retrieve the Id property.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Until the process terminates, the process identifier uniquely identifies the process throughout the system.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can connect a process that is running on a local or remote computer to a new &lt;xref:System.Diagnostics.Process&gt; instance by passing the process identifier to the &lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt; is a <ph id="ph1">`static`</ph> method that creates a new component and sets the Id property for the new &lt;xref:System.Diagnostics.Process&gt; instance automatically.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Process identifiers can be reused by the system.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Id property value is unique only while the associated process is running.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the process has terminated, the system can reuse the Id property value for an unrelated process.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a &lt;xref:System.Diagnostics.Process&gt; instance.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action can save system resources yet guarantee that the process is correctly identified.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The system-generated unique identifier of the process that is referenced by this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The process's Id property has not been set.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>-or-       There is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Immediately stops the associated process.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Kill forces a termination of the process, while &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; only requests a termination.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a process with a graphical interface is executing, its message loop is in a wait state.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The message loop executes every time a Windows message is sent to the process by the operating system.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The request to exit the process by calling &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; does not force the application to quit.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application can ask for user verification before quitting, or it can refuse to quit.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>To force the application to quit, use the Kill method.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; is identical to that of a user closing an application's main window using the system menu.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The Kill method executes asynchronously.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling the Kill method, call the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to wait for the process to exit, or check the &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; property to determine if the process has exited.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data edited by the process or resources allocated to the process can be lost if you call Kill.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Kill causes an abnormal process termination and should be used only when necessary.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; fails, you can use Kill to terminate the process.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Kill is the only way to terminate processes that do not have graphical interfaces.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call Kill and &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot cause processes on remote computers to exit.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can only view information for processes running on remote computers.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the call to the Kill method is made while the process is currently terminating, a &lt;xref:System.ComponentModel.Win32Exception&gt; is thrown for Access Denied.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The associated process could not be terminated.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>-or-       The process is terminating.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>-or-       The associated process is a Win16 executable.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>You are attempting to call Kill for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The method is available only for processes running on the local computer.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The process has already exited.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>-or-       There is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Takes a <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component out of the state that lets it interact with operating system processes that run in a special mode.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some operating system processes run in a special mode.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to read properties of or attach to these processes is not possible unless you have called &lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt; on the component.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call LeaveDebugMode when you no longer need access to these processes that run in special mode.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Gets the name of the computer the associated process is running on.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view statistical data and process information for processes running on remote computers but you cannot call &lt;xref:System.Diagnostics.Process.Start%2A&gt;, &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;, or &lt;xref:System.Diagnostics.Process.Kill%2A&gt; on remote computers.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When the associated process is executing on the local machine, this property returns a period (".") for the machine name.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the &lt;xref:System.Environment.MachineName%2A?displayProperty=fullName&gt; property to get the correct machine name.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The name of the computer that the associated process is running on.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>There is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Gets the main module for the associated process.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process module represents a.dll or .exe file that is loaded into a particular process.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MainModule property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Diagnostics.ProcessModule"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that was used to start the process.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>You are trying to access the MainModule property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>A 32-bit process is trying to access the modules of a 64-bit process.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; is not available.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>-or-       The process has exited.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Gets the window handle of the main window of the associated process.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main window is the window opened by the process that currently has the focus (the &lt;xref:System.Windows.Forms.Form.TopLevel%2A&gt; form).</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use the &lt;xref:System.Diagnostics.Process.Refresh%2A&gt; method to refresh the &lt;xref:System.Diagnostics.Process&gt; object to get the current main window handle if it has changed.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, because the window handle is cached, use &lt;xref:System.Diagnostics.Process.Refresh%2A&gt; beforehand to guarantee that you’ll retrieve the current handle.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can get the MainWindowHandle property only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MainWindowHandle property is a value that uniquely identifies the window that is associated with the process.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process has a main window associated with it only if the process has a graphical interface.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the associated process does not have a main window, the MainWindowHandle value is zero.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have just started a process and want to use its main window handle, consider using the &lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt; method to allow the process to finish starting, ensuring that the main window handle has been created.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The system-generated window handle of the main window of the associated process.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The MainWindowHandle is not defined because the process has exited.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>You are trying to access the MainWindowHandle property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Gets the caption of the main window of the process.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process has a main window associated with it only if the process has a graphical interface.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the associated process does not have a main window (so that &lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt; is zero), MainWindowTitle is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have just started a process and want to use its main window title, consider using the &lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt; method to allow the process to finish starting, ensuring that the main window handle has been created.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the system throws an exception.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The main window is the window that currently has the focus; note that this might not be the primary window for the process.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use the &lt;xref:System.Diagnostics.Process.Refresh%2A&gt; method to refresh the &lt;xref:System.Diagnostics.Process&gt; object to get the current main window handle if it has changed.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The main window title of the process.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The MainWindowTitle property is not defined because the process has exited.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>You are trying to access the MainWindowTitle property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum allowable working set size, in bytes, for the associated process.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set includes both shared and private data.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the working set size increases, memory demand increases.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process has minimum and maximum working set sizes.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system sets the default working set sizes.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can modify these sizes using the MaxWorkingSet and &lt;xref:System.Diagnostics.Process.MinWorkingSet%2A&gt; members.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, setting these values does not guarantee that the memory will be reserved or resident.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you increase the working set size of a process, you take physical memory away from the rest of the system.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The maximum working set size that is allowed in memory for the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The maximum working set size is invalid.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>It must be greater than or equal to the minimum working set size.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Working set information cannot be retrieved from the associated process resource.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>-or-       The process identifier or process handle is zero because the process has not been started.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>You are trying to access the MaxWorkingSet property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; is not available.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>-or-       The process has exited.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Gets or sets the minimum allowable working set size, in bytes, for the associated process.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set includes both shared and private data.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the working set size increases, memory demand increases.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process has minimum and maximum working set sizes.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system sets the default working set sizes.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can modify these sizes using the &lt;xref:System.Diagnostics.Process.MaxWorkingSet%2A&gt; and MinWorkingSet members.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, setting these values does not guarantee that the memory will be reserved or resident.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you increase the working set size of a process, you take physical memory away from the rest of the system.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The minimum working set size that is required in memory for the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The minimum working set size is invalid.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>It must be less than or equal to the maximum working set size.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Working set information cannot be retrieved from the associated process resource.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>-or-       The process identifier or process handle is zero because the process has not been started.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>You are trying to access the MinWorkingSet property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; is not available.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>-or-       The process has exited.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Gets the modules that have been loaded by the associated process.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process module represents a.dll or .exe file that is loaded into a particular process.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Diagnostics.ProcessModule&gt; instance lets you view information about a module, including the module name, file name, and module memory details.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process can load multiple modules into memory.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example,.exe files that load additional .dll files have multiple modules.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>After starting the process, this collection is empty until the system has loaded the process.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the process has a main window, you can call &lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt; before retrieving this property to ensure that the collection is nonempty when you get the list.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Diagnostics.ProcessModule"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the modules that have been loaded by the associated process.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>You are attempting to access the Modules property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; is not available.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>You are attempting to access the Modules property for either the system process or the idle process.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>These processes do not have modules.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Pool Nonpaged Bytes<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Diagnostics.Process.Exited"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnExited is the API method that raises the &lt;xref:System.Diagnostics.Process.Exited&gt; event.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling OnExited causes the &lt;xref:System.Diagnostics.Process.Exited&gt; event to occur and is the only way to raise the event using the &lt;xref:System.Diagnostics.Process&gt; component.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnExited is primarily used when deriving classes from the component.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>As an alternative to OnExited, you can write your own event handler.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>You create your own event handler delegate and your own event-handling method.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a &lt;xref:System.Diagnostics.Process&gt; component onto a form and double-click the icon.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code you create to run when the &lt;xref:System.Diagnostics.Process.Exited&gt; event occurs is entered into the Process1_Exited procedure.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to create the OnExited member, because it is implemented for you.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Occurs each time an application writes a line to its redirected &lt;xref:System.Diagnostics.Process.StandardOutput*&gt; stream.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OutputDataReceived event indicates that the associated &lt;xref:System.Diagnostics.Process&gt; has written a line, terminating with a newline character, to its redirected &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event is enabled during asynchronous read operations on &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>To start asynchronous read operations, you must redirect the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream of a &lt;xref:System.Diagnostics.Process&gt;, add your event handler to the OutputDataReceived event, and call &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thereafter, the OutputDataReceived event signals each time the process writes a line to the redirected &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream, until the process exits or calls &lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The application that is processing the asynchronous output should call the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to ensure that the output buffer has been flushed.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Gets the amount of paged memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Gets the amount of paged memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the size of memory used by the operating system for the process, use the &lt;xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Page File Bytes<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property value represents the current size of pageable system memory used by the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the size of the application memory used by the process, use the &lt;xref:System.Diagnostics.Process.PagedMemorySize64%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Pool Paged Bytes<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Page File Bytes Peak<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The maximum amount of virtual memory, in bytes, that the associated process has requested.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Virtual Bytes Peak<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Gets the peak working set size for the associated process, in bytes.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set includes both shared and private data.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>The maximum amount of physical memory that the associated process has required all at once, in bytes.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Gets the maximum amount of physical memory, in bytes, used by the associated process.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set includes both shared and private data.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Working Set Peak<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, or &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;), the system temporarily boosts the thread's priority when it is taken out of a wait state.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action prevents other processes from interrupting the processing of the current thread.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>The PriorityBoostEnabled setting affects all the existing threads and any threads subsequently created by the process.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restore normal behavior, set the PriorityBoostEnabled property to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Priority boost information could not be retrieved from the associated process resource.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>-or-       The process identifier or process handle is zero.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>(The process has not been started.)</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>You are attempting to access the PriorityBoostEnabled property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; is not available.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Gets or sets the overall priority category for the associated process.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process priority class encompasses a range of thread priority levels.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>Threads with different priorities that are running in the process run relative to the priority class of the process.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>Win32 uses four priority classes with seven base priority levels per class.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>These process priority classes are captured in the &lt;xref:System.Diagnostics.ProcessPriorityClass&gt; enumeration, which lets you set the process priority to &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;, or &lt;xref:System.Diagnostics.ProcessPriorityClass&gt;.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can set the &lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt; to temporarily boost the priority level of threads that have been taken out of the wait state.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The priority is reset when the process returns to the wait state.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Diagnostics.Process.BasePriority%2A&gt; property lets you view the starting priority that is assigned to a process.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because it is read-only, you cannot use the &lt;xref:System.Diagnostics.Process.BasePriority%2A&gt; property to set the priority of a process.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the priority, use the PriorityClass property, which gets or sets the overall priority category for the process.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>The priority class cannot be viewed using System Monitor.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the relationship between the &lt;xref:System.Diagnostics.Process.BasePriority%2A&gt; and PriorityClass values.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source>|BasePriority|PriorityClass|   |------------------|-------------------|   |4|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|   |8|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|   |13|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|   |24|&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;|</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The priority category for the associated process, from which the &lt;xref:System.Diagnostics.Process.BasePriority*&gt; of the process is calculated.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Process priority information could not be set or retrieved from the associated process resource.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>-or-       The process identifier or process handle is zero.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>(The process has not been started.)</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>You are attempting to access the PriorityClass property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; is not available.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>You have set the PriorityClass to <bpt id="p1">&lt;xref uid="langword_csharp_AboveNormal" name="AboveNormal" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_BelowNormal" name="BelowNormal" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> when using Windows 98 or Windows Millennium Edition (Windows Me).</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>These platforms do not support those values for the priority class.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Priority class cannot be set because it does not use a valid value, as defined in the <bpt id="p1">&lt;xref href="System.Diagnostics.ProcessPriorityClass"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Gets the amount of private memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>The number of bytes allocated by the associated process that cannot be shared with other processes.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Gets the amount of private memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Private Bytes<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Gets the privileged processor time for this process.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.TimeSpan&gt; that indicates the amount of time that the process has spent running code inside the operating system core.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>You are attempting to access the PrivilegedProcessorTime property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Gets the name of the process.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ProcessName property holds an executable file name, such as Outlook, that does not include the .exe extension or the path.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is helpful for getting and manipulating all the processes that are associated with the same executable file.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  On <ph id="ph2">[!INCLUDE[Win2kFamily](~/add/includes/win2kfamily-md.md)]</ph> operating systems, the ProcessName property may be truncated to 15 characters if the process module information cannot be obtained.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call &lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this array, for example, to shut down all the running instances of the executable file.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>The name that the system uses to identify the process to the user.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>The process does not have an identifier, or no process is associated with the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>-or-       The associated process has exited.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The process is not on this computer.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Gets or sets the processors on which the threads in this process can be scheduled to run.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source>Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>The association between a processor and a thread is called the processor affinity.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each processor is represented as a bit.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bit 0 is processor one, bit 1 is processor two, and so forth.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set a bit to the value 1, the corresponding processor is selected for thread assignment.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the ProcessorAffinity value to zero, the operating system's scheduling algorithms set the thread's affinity.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the ProcessorAffinity value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows a selection of ProcessorAffinity values for an eight-processor system.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Bitmask|Binary value|Eligible processors|   |-------------|------------------|-------------------------|   |0x0001|00000000 00000001|1|   |0x0003|00000000 00000011|1 and 2|   |0x0007|00000000 00000111|1, 2 and 3|   |0x0009|00000000 00001001|1 and 4|   |0x007F|00000000 01111111|1, 2, 3, 4, 5, 6 and 7|</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>A bitmask representing the processors that the threads in the associated process can run on.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>The default depends on the number of processors on the computer.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>The default value is 2 <bpt id="p1">&lt;sup&gt;</bpt>n<ept id="p1">&lt;/sup&gt;</ept> -1, where n is the number of processors.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>ProcessorAffinity information could not be set or retrieved from the associated process resource.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>-or-       The process identifier or process handle is zero.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>(The process has not been started.)</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>You are attempting to access the ProcessorAffinity property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>The process &lt;xref:System.Diagnostics.Process.Id*&gt; was not available.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>-or-       The process has exited.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Discards any information about the associated process that has been cached inside the process component.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>After Refresh is called, the first request for information about each property causes the process component to obtain a new value from the associated process.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a &lt;xref:System.Diagnostics.Process&gt; component is associated with a process resource, the property values of the &lt;xref:System.Diagnostics.Process&gt; are immediately populated according to the status of the associated process.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the information about the associated process subsequently changes, those changes are not reflected in the &lt;xref:System.Diagnostics.Process&gt; component's cached values.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Diagnostics.Process&gt; component is a snapshot of the process resource at the time they are associated.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>To view the current values for the associated process, call the Refresh method.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the user interface of the process is responding.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a process has a user interface, the Responding property contacts the user interface to determine whether the process is responding to user input.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the interface does not respond immediately, the Responding property returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to determine whether the interface of the associated process has stopped responding.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the process does not have a &lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;, this property returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the user interface of the associated process is responding to the system; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>There is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>You are attempting to access the Responding property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Gets the native handle to this process.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT">
          <source>The handle is only available if the calling component started the process.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>The native handle to this process.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Gets the Terminal Services session identifier for the associated process.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SessionId property identifies the session in which the application is currently running.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The Terminal Services session identifier for the associated process.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>There is no session associated with this process.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>There is no process associated with this session identifier.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>-or-       The associated process is not on this machine.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>The SessionId property is not supported on Windows 98.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Gets a stream used to read the error output of the application.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a &lt;xref:System.Diagnostics.Process&gt; writes text to its standard error stream, that text is normally displayed on the console.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>By redirecting the StandardError stream, you can manipulate or suppress the error output of a process.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To use StandardError, you must set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName&gt; to <ph id="ph2">`false`</ph>, and you must set &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=fullName&gt; to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, reading from the StandardError stream throws an exception.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>The redirected StandardError stream can be read synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, and &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt; perform synchronous read operations on the error output stream of the process.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT">
          <source>These synchronous read operations do not complete until the associated &lt;xref:System.Diagnostics.Process&gt; writes to its StandardError stream, or closes the stream.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt; starts asynchronous read operations on the StandardError stream.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronous read operations introduce a dependency between the caller reading from the StandardError stream and the child process writing to that stream.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>These dependencies can result in deadlock conditions.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the caller reads from the redirected stream of a child process, it is dependent on the child.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller waits on the read operation until the child writes to the stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can avoid deadlocks by evaluating dependencies between the caller and child process.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = "Write500Lines.exe";    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```</ph>       The code example avoids a deadlock condition by calling <ph id="ph2">`p.StandardError.ReadToEnd`</ph> before <ph id="ph3">`p.WaitForExit`</ph>.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition can result if the parent process calls <ph id="ph1">`p.WaitForExit`</ph> before <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full StandardError stream.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a similar issue when you read all text from both the standard output and standard error streams.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code, for example, performs a read operation on both streams.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   // Do not perform a synchronous read to the end of both    // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```</ph>       The code example avoids the deadlock condition by performing asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition results if the parent process calls <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to close its &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full StandardError stream.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the redirected stream of a &lt;xref:System.Diagnostics.Process&gt; is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, do not follow &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt; with a call to &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; on the StandardError stream, or vice versa.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can read two different streams in different modes.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can call &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; and then call &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; for the StandardError stream.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.StreamReader&gt; that can be used to read the standard error stream of the application.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Gets a stream used to write the input of the application.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Diagnostics.Process&gt; can read input text from its standard input stream, typically the keyboard.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>By redirecting the StandardInput stream, you can programmatically specify the input.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To use StandardInput, you must set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName&gt; to <ph id="ph2">`false`</ph>, and you must set &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=fullName&gt; to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, writing to the StandardInput stream throws an exception.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.StreamWriter&gt; that can be used to write the standard input stream of the application.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The StandardInput stream has not been defined because <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> is set to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Gets a stream used to read the textual output of the application.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a &lt;xref:System.Diagnostics.Process&gt; writes text to its standard stream, that text is normally displayed on the console.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>By redirecting the StandardOutput stream, you can manipulate or suppress the output of a process.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To use StandardOutput, you must set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName&gt; to <ph id="ph2">`false`</ph>, and you must set &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=fullName&gt; to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, reading from the StandardOutput stream throws an exception.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>The redirected StandardOutput stream can be read synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, and &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt; perform synchronous read operations on the output stream of the process.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>These synchronous read operations do not complete until the associated &lt;xref:System.Diagnostics.Process&gt; writes to its StandardOutput stream, or closes the stream.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; starts asynchronous read operations on the StandardOutput stream.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronous read operations introduce a dependency between the caller reading from the StandardOutput stream and the child process writing to that stream.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>These dependencies can result in deadlock conditions.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the caller reads from the redirected stream of a child process, it is dependent on the child.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller waits on the read operation until the child writes to the stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can avoid deadlocks by evaluating dependencies between the caller and child process.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = "Write500Lines.exe";   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```</ph>       The code example avoids a deadlock condition by calling <ph id="ph2">`p.StandardOutput.ReadToEnd`</ph> before <ph id="ph3">`p.WaitForExit`</ph>.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition can result if the parent process calls <ph id="ph1">`p.WaitForExit`</ph> before <ph id="ph2">`p.StandardOutput.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full StandardOutput stream.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a similar issue when you read all text from both the standard output and standard error streams.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code, for example, performs a read operation on both streams.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```</ph>       The code example avoids the deadlock condition by performing asynchronous read operations on the StandardOutput stream.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition results if the parent process calls <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to close its StandardOutput stream.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the redirected stream of a &lt;xref:System.Diagnostics.Process&gt; is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, do not follow &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; with a call to &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; on the StandardOutput stream, or vice versa.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can read two different streams in different modes.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can call &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; and then call &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; for the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.StreamReader&gt; that can be used to read the standard output stream of the application.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Starts (or reuses) the process resource that is specified by the &lt;xref:System.Diagnostics.Process.StartInfo*&gt; property of this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component and associates it with the component.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a process resource is started; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no new process resource is started (for example, if an existing process is reused).</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>No file name was specified in the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component's &lt;xref:System.Diagnostics.Process.StartInfo<bpt id="p2">*</bpt>&gt;.       -or-       The <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> member of the &lt;xref:System.Diagnostics.Process.StartInfo<ept id="p2">*</ept>&gt; property is <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> while <ph id="ph3">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>, <ph id="ph5">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph>, or <ph id="ph7">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> is <bpt id="p4">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>There was an error in opening the associated file.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>The process object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Diagnostics.ProcessStartInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the information that is used to start the process, including the file name and any command-line arguments.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with the process resource, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no process resource is started.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>In addition, Start may return a non-null Process with its &lt;xref:System.Diagnostics.Process.HasExited*&gt; property already set to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>No file name was specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startInfo</ph><ept id="p1">&lt;/code&gt;</ept> parameter's &lt;xref:System.Diagnostics.ProcessStartInfo.FileName<bpt id="p2">*</bpt>&gt; property.       -or-       The &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute<ept id="p2">*</ept>&gt; property of the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">startInfo</ph><ept id="p3">&lt;/code&gt;</ept> parameter is <bpt id="p4">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput<bpt id="p5">*</bpt>&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput<ept id="p5">*</ept>&gt;, or &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError<bpt id="p6">*</bpt>&gt; property is also <bpt id="p7">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p7">&lt;/xref&gt;</ept>.       -or-       The &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute<ept id="p6">*</ept>&gt; property of the <bpt id="p8">&lt;code&gt;</bpt><ph id="ph3">startInfo</ph><ept id="p8">&lt;/code&gt;</ept> parameter is <bpt id="p9">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p9">&lt;/xref&gt;</ept> and the &lt;xref:System.Diagnostics.ProcessStartInfo.UserName<bpt id="p10">*</bpt>&gt; property is not <bpt id="p11">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p11">&lt;/xref&gt;</ept> or empty or the &lt;xref:System.Diagnostics.ProcessStartInfo.Password<ept id="p10">*</ept>&gt; property is not <bpt id="p12">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p12">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startInfo</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>The process object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>The file specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startInfo</ph><ept id="p1">&lt;/code&gt;</ept> parameter's &lt;xref:System.Diagnostics.ProcessStartInfo.FileName*&gt; property could not be found.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>An error occurred when opening the associated file.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>-or-       The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>or "Access is denied."</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>The name of a document or application file to run in the process.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with the process resource, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no process resource is started.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>In addition, Start may return a non-null Process with its &lt;xref:System.Diagnostics.Process.HasExited*&gt; property already set to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>An error occurred when opening the associated file.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The process object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>The PATH environment variable has a string containing quotes.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The name of an application file to run in the process.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with the process resource, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no process resource is started.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>In addition, Start may return a non-null Process with its &lt;xref:System.Diagnostics.Process.HasExited*&gt; property already set to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fileName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">arguments</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>An error occurred when opening the associated file.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>-or-       The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>or "Access is denied."</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>The process object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The PATH environment variable has a string containing quotes.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the address of the executable file to start is a URL, the process is not started and <ph id="ph2">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload lets you start a process without first creating a new &lt;xref:System.Diagnostics.Process&gt; instance.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload is an alternative to the explicit steps of creating a new &lt;xref:System.Diagnostics.Process&gt; instance, setting the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;, and &lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt; properties of the &lt;xref:System.Diagnostics.Process.StartInfo%2A&gt; property, and calling &lt;xref:System.Diagnostics.Process.Start%2A&gt; for the &lt;xref:System.Diagnostics.Process&gt; instance.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, in the same way that the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph1">`fileName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can set the <ph id="ph1">`fileName`</ph> parameter to either "Notepad.exe" or "Notepad".</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`fileName`</ph> parameter represents an executable file, the <ph id="ph2">`arguments`</ph> parameter might represent a file to act upon, such as the text file in <ph id="ph3">`Notepad.exe myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The file name must represent an executable file in the &lt;xref:System.Diagnostics.Process.Start%2A&gt; overloads that have <ph id="ph2">`userName`</ph>, <ph id="ph3">`password`</ph>, and <ph id="ph4">`domain`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever you use &lt;xref:System.Diagnostics.Process.Start%2A&gt; to start a process, you might need to close it or you risk losing system resources.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>Close processes using &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; or &lt;xref:System.Diagnostics.Process.Kill%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can check whether a process has already been closed by using its &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; property..</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The name of an application file to run in the process.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>The user name to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the password to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>The domain to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with the process resource, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no process resource is started.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>In addition, Start may return a non-null Process with its &lt;xref:System.Diagnostics.Process.HasExited*&gt; property already set to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>No file name was specified.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>There was an error in opening the associated file.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>The process object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the address of the executable file to start is a URL, the process is not started and <ph id="ph2">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload lets you start a process without first creating a new &lt;xref:System.Diagnostics.Process&gt; instance.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload is an alternative to the explicit steps of creating a new &lt;xref:System.Diagnostics.Process&gt; instance, setting the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;, and &lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt; properties of the &lt;xref:System.Diagnostics.Process.StartInfo%2A&gt; property, and calling &lt;xref:System.Diagnostics.Process.Start%2A&gt; for the &lt;xref:System.Diagnostics.Process&gt; instance.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, in the same way that the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph1">`fileName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can set the <ph id="ph1">`fileName`</ph> parameter to either "Notepad.exe" or "Notepad".</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`fileName`</ph> parameter represents an executable file, the <ph id="ph2">`arguments`</ph> parameter might represent a file to act upon, such as the text file in <ph id="ph3">`Notepad.exe myfile.txt`</ph>.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The file name must represent an executable file in the &lt;xref:System.Diagnostics.Process.Start%2A&gt; overloads that have <ph id="ph2">`userName`</ph>, <ph id="ph3">`password`</ph>, and <ph id="ph4">`domain`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever you use &lt;xref:System.Diagnostics.Process.Start%2A&gt; to start a process, you might need to close it or you risk losing system resources.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>Close processes using &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; or &lt;xref:System.Diagnostics.Process.Kill%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can check whether a process has already been closed by using its &lt;xref:System.Diagnostics.Process.HasExited%2A&gt; property..</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The name of an application file to run in the process.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The user name to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the password to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>The domain to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with the process resource, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no process resource is started.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>In addition, Start may return a non-null Process with its &lt;xref:System.Diagnostics.Process.HasExited*&gt; property already set to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>No file name was specified.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>An error occurred when opening the associated file.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>-or-       The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>or "Access is denied."</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>The process object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Gets or sets the properties to pass to the &lt;xref:System.Diagnostics.Process.Start*&gt; method of the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>StartInfo represents the set of parameters to use to start a process.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Diagnostics.Process.Start%2A&gt; is called, the StartInfo is used to specify the process to start.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only necessary StartInfo member to set is the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting a process by specifying the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property is similar to typing the information in the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box of the Windows <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property does not need to represent an executable file.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be of any file type for which the extension has been associated with an application installed on the system.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, in the same way that the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; member.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can set the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property to either "Notepad.exe" or "Notepad".</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can start a ClickOnce application by setting the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property to the location (for example, a Web address) from which you originally installed the application.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not start a ClickOnce application by specifying its installed location on your hard drive.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you could set the &lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt; to "Print" for a file ending in the .doc extension.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name specified in the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property does not need to have an extension if you manually enter a value for the &lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you use the &lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt; property to determine what verbs are available, you must include the extension.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the parameters specified in the StartInfo property up to the time that you call the &lt;xref:System.Diagnostics.Process.Start%2A&gt; method on the process.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you start the process, changing the StartInfo values does not affect or restart the associated process.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the &lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29&gt; method with the &lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=fullName&gt; and &lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=fullName&gt; properties set, the unmanaged <ph id="ph1">`CreateProcessWithLogonW`</ph> function is called, which starts the process in a new window even if the &lt;xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A&gt; property value is <ph id="ph2">`true`</ph> or the &lt;xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A&gt; property value is &lt;xref:System.Diagnostics.ProcessWindowStyle&gt;.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you did not use the &lt;xref:System.Diagnostics.Process.Start%2A&gt; method to start a process, the StartInfo property does not reflect the parameters used to start the process.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you use &lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt; to get an array of processes running on the computer, the StartInfo property of each &lt;xref:System.Diagnostics.Process&gt; does not contain the original file name or arguments used to start the process.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the process is started, the file name is the file that populates the (read-only) &lt;xref:System.Diagnostics.Process.MainModule%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to retrieve the executable file that is associated with the process after the process has started, use the &lt;xref:System.Diagnostics.Process.MainModule%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to set the executable file of a &lt;xref:System.Diagnostics.Process&gt; instance for which an associated process has not been started, use the StartInfo property's &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; member.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the members of the StartInfo property are arguments that are passed to the &lt;xref:System.Diagnostics.Process.Start%2A&gt; method of a process, changing the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property after the associated process has started will not reset the &lt;xref:System.Diagnostics.Process.MainModule%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT">
          <source>These properties are used only to initialize the associated process.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Diagnostics.ProcessStartInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the data with which to start the process.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>These arguments include the name of the executable file or document used to start the process.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The value that specifies the StartInfo is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Gets the time that the associated process was started.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>An object  that indicates when the process started.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>An exception is thrown if the process is not running.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>You are attempting to access the StartTime property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>The process has exited.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>-or-       The process has not been started.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>An error occurred in the call to the Windows function.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Diagnostics.EventLog.SynchronizingObject%2A&gt; is <ph id="ph1">`null`</ph>, methods that handle the &lt;xref:System.Diagnostics.Process.Exited&gt; event are called on a thread from the system thread pool.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about system thread pools, see &lt;xref:System.Threading.ThreadPool&gt;.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Diagnostics.Process.Exited&gt; event is handled by a visual Windows Forms component, such as a &lt;xref:System.Windows.Forms.Button&gt;, accessing the component through the system thread pool might not work, or might result in an exception.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid this by setting SynchronizingObject to a Windows Forms component, which causes the methods handling the &lt;xref:System.Diagnostics.Process.Exited&gt; event to be called on the same thread on which the component was created.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Diagnostics.Process&gt; is used inside <ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph> in a Windows Forms designer, SynchronizingObject is automatically set to the control that contains the &lt;xref:System.Diagnostics.Process&gt;.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you place a &lt;xref:System.Diagnostics.Process&gt; on a designer for <ph id="ph1">`Form1`</ph> (which inherits from &lt;xref:System.Windows.Forms.Form&gt;) the SynchronizingObject property of &lt;xref:System.Diagnostics.Process&gt; is set to the instance of <ph id="ph2">`Form1`</ph>:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Process_SynchronizingObject#2<ept id="p2">](~/add/codesnippet/cpp/p-system.diagnostics.pro_35_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Process_SynchronizingObject#2<ept id="p4">](~/add/codesnippet/csharp/p-system.diagnostics.pro_35_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Process_SynchronizingObject#2<ept id="p6">](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_35_1.vb)</ept><ept id="p5">]</ept>       Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.ISynchronizeInvoke"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to marshal event handler calls that are issued as a result of an <bpt id="p2">&lt;xref href="System.Diagnostics.Process.Exited"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event on the process.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Gets the set of threads that are running in the associated process.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread executes code in a process.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each process is started with a single thread, its primary thread.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any thread can create additional threads.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>Threads within a process share the address space of the process.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Diagnostics.ProcessThread&gt; to get all the threads associated with the current process.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source>The primary thread is not necessarily at index zero in the array.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Diagnostics.ProcessThread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the operating system threads currently running in the associated process.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>The process does not have an &lt;xref:System.Diagnostics.Process.Id*&gt;, or no process is associated with the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>-or-       The associated process has exited.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&amp;lt;</ph>xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to access this property on Windows 98 and Windows Me.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Formats the process's name as a string, combined with the parent component type, if applicable.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.Process.ProcessName<bpt id="p1">*</bpt>&gt;, combined with the base component's &lt;xref:System.Object.ToString<ept id="p1">*</ept>&gt; return value.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>ToString is not supported on Windows 98.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Gets the total processor time for this process.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.TimeSpan&gt; that indicates the amount of time that the associated process has spent utilizing the CPU.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>This value is the sum of the &lt;xref:System.Diagnostics.Process.UserProcessorTime<bpt id="p1">*</bpt>&gt; and the &lt;xref:System.Diagnostics.Process.PrivilegedProcessorTime<ept id="p1">*</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>You are attempting to access the TotalProcessorTime property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Gets the user processor time for this process.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.TimeSpan&gt; that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>You are attempting to access the UserProcessorTime property for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>This property is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Gets the size of the process's virtual memory, in bytes.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>The amount of virtual memory, in bytes, that the associated process has requested.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Gets the amount of the virtual memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the current size of virtual memory used by the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Virtual Bytes<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>The amount of virtual memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>Instructs the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component to wait indefinitely for the associated process to exit.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT">
          <source>WaitForExit makes the current thread wait until the associated process terminates.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should be called after all other methods are called on the process.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid blocking the current thread, use the &lt;xref:System.Diagnostics.Process.Exited&gt; event.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method instructs the &lt;xref:System.Diagnostics.Process&gt; component to wait an infinite amount of time for the process and event handlers to exit.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can cause an application to stop responding.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you call &lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt; for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the <ph id="ph2">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph> and earlier versions, the WaitForExit overload waited for &lt;xref:System.Int32.MaxValue&gt; milliseconds (approximately 24 days), not indefinitely.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, previous versions did not wait for the event handlers to exit if the full &lt;xref:System.Int32.MaxValue&gt; time was reached.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use this overload after a call to the &lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt; overload when standard output has been redirected to asynchronous event handlers.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called WaitForExit.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Diagnostics.Process&gt; component can then access the information, which includes the &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;, by using the &lt;xref:System.Diagnostics.Process.Handle%2A&gt; to the exited process.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the associated process has exited, the &lt;xref:System.Diagnostics.Process.Handle%2A&gt; property of the component no longer points to an existing process resource.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the handle can be used only to access the operating system's information about the process resource.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system is aware of handles to exited processes that have not been released by &lt;xref:System.Diagnostics.Process&gt; components, so it keeps the &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt; and &lt;xref:System.Diagnostics.Process.Handle%2A&gt; information in memory until the &lt;xref:System.Diagnostics.Process&gt; component specifically frees the resources.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, any time you call &lt;xref:System.Diagnostics.Process.Start%2A&gt; for a &lt;xref:System.Diagnostics.Process&gt; instance, call &lt;xref:System.Diagnostics.Process.Close%2A&gt; when the associated process has terminated and you no longer need any administrative information about it.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.Close%2A&gt; frees the memory allocated to the exited process.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>The wait setting could not be accessed.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>No process &lt;xref:System.Diagnostics.Process.Id<bpt id="p1">*</bpt>&gt; has been set, and a &lt;xref:System.Diagnostics.Process.Handle<ept id="p1">*</ept>&gt; from which the &lt;xref:System.Diagnostics.Process.Id*&gt; property can be determined does not exist.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>-or-       There is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>-or-       You are attempting to call WaitForExit for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>This method is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Instructs the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component to wait the specified number of milliseconds for the associated process to exit.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT">
          <source>WaitForExit makes the current thread wait until the associated process terminates.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should be called after all other methods are called on the process.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid blocking the current thread, use the &lt;xref:System.Diagnostics.Process.Exited&gt; event.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method instructs the &lt;xref:System.Diagnostics.Process&gt; component to wait a finite amount of time for the process to exit.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the associated process does not exit by the end of the interval because the request to terminate is denied, <ph id="ph1">`false`</ph> is returned to the calling procedure.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify a negative number (&lt;xref:System.Threading.Timeout.Infinite&gt;) for <ph id="ph1">`milliseconds`</ph>, and WaitForExit will behave the same as the &lt;xref:System.Diagnostics.Process.WaitForExit&gt; overload.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you pass 0 (zero) to the method, it returns <ph id="ph1">`true`</ph> only if the process has already exited; otherwise, it immediately returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the <ph id="ph2">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph> and earlier versions, if <ph id="ph3">`milliseconds`</ph> was -1, the WaitForExit overload waited for &lt;xref:System.Int32.MaxValue&gt; milliseconds (approximately 24 days), not indefinitely.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that asynchronous event handling has been completed, call the &lt;xref:System.Diagnostics.Process.WaitForExit&gt; overload that takes no parameter after receiving a <ph id="ph1">`true`</ph> from this overload.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To help ensure that the &lt;xref:System.Diagnostics.Process.Exited&gt; event is handled correctly in Windows Forms applications, set the &lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called WaitForExit.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Diagnostics.Process&gt; component can then access the information, which includes the &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;, by using the &lt;xref:System.Diagnostics.Process.Handle%2A&gt; to the exited process.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the associated process has exited, the &lt;xref:System.Diagnostics.Process.Handle%2A&gt; property of the component no longer points to an existing process resource.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the handle can be used only to access the operating system's information about the process resource.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system is aware of handles to exited processes that have not been released by &lt;xref:System.Diagnostics.Process&gt; components, so it keeps the &lt;xref:System.Diagnostics.Process.ExitTime%2A&gt; and &lt;xref:System.Diagnostics.Process.Handle%2A&gt; information in memory until the &lt;xref:System.Diagnostics.Process&gt; component specifically frees the resources.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, any time you call &lt;xref:System.Diagnostics.Process.Start%2A&gt; for a &lt;xref:System.Diagnostics.Process&gt; instance, call &lt;xref:System.Diagnostics.Process.Close%2A&gt; when the associated process has terminated and you no longer need any administrative information about it.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Diagnostics.Process.Close%2A&gt; frees the memory allocated to the exited process.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>The amount of time, in milliseconds, to wait for the associated process to exit.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the associated process has exited; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>The wait setting could not be accessed.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>No process &lt;xref:System.Diagnostics.Process.Id<bpt id="p1">*</bpt>&gt; has been set, and a &lt;xref:System.Diagnostics.Process.Handle<ept id="p1">*</ept>&gt; from which the &lt;xref:System.Diagnostics.Process.Id*&gt; property can be determined does not exist.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>-or-       There is no process associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>-or-       You are attempting to call WaitForExit for a process that is running on a remote computer.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>This method is available only for processes that are running on the local computer.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>Causes the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component to wait indefinitely for the associated process to enter an idle state.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>This overload applies only to processes with a user interface and, therefore, a message loop.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use WaitForInputIdle to force the processing of your application to wait until the message loop has returned to the idle state.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process then returns to the message loop.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process is said to be in an idle state when it is waiting for messages inside of a message loop.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a process does not have a message loop, WaitForInputIdle throws an &lt;xref:System.InvalidOperationException&gt;.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The WaitForInputIdle overload instructs the &lt;xref:System.Diagnostics.Process&gt; component to wait indefinitely for the process to become idle in the message loop.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This instruction can cause an application to stop responding.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the process is written to always exit its message loop immediately, as in the code fragment <ph id="ph1">`while(true)`</ph>.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the associated process has reached an idle state.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>The process does not have a graphical interface.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>-or-       An unknown error occurred.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>The process failed to enter an idle state.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>-or-       The process has already exited.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>-or-       No process is associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Causes the <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component to wait the specified number of milliseconds for the associated process to enter an idle state.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>This overload applies only to processes with a user interface and, therefore, a message loop.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use WaitForInputIdle to force the processing of your application to wait until the message loop has returned to the idle state.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process then returns to the message loop.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process is said to be in an idle state when it is waiting for messages inside of a message loop.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a process does not have a message loop, WaitForInputIdle throws an &lt;xref:System.InvalidOperationException&gt;.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The WaitForInputIdle overload instructs the &lt;xref:System.Diagnostics.Process&gt; component to wait a finite amount of time for the process to become idle in the message loop.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the associated process has not become idle by the end of the interval because the loop is still processing messages, <ph id="ph1">`false`</ph> is returned to the calling procedure.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>A value of 1 to &lt;xref:System.Int32&gt; that specifies the amount of time, in milliseconds, to wait for the associated process to become idle.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the associated process has reached an idle state; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>The process does not have a graphical interface.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>-or-       An unknown error occurred.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>The process failed to enter an idle state.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>-or-       The process has already exited.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>-or-       No process is associated with this <bpt id="p1">&lt;xref href="System.Diagnostics.Process"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Gets the associated process's physical memory usage, in bytes.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the current size of working set memory used by the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set includes both shared and private data.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>The total amount of physical memory the associated process is using, in bytes.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Gets the amount of physical memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by this property represents the current size of working set memory used by the process, in bytes.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The working set includes both shared and private data.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Working Set<ept id="p1">**</ept> performance counter for the process.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>The amount of physical memory, in bytes, allocated for the associated process.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>