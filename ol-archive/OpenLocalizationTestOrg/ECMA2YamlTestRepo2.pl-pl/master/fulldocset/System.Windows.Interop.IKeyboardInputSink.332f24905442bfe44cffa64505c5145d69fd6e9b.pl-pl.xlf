<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15b9a1f3b6cdd0f4e2e52d9bd81e8f3e838c3e2e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.IKeyboardInputSink.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">778f3276c3ce94eb45a8873d9bb8ab80c24adc26</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55a01909041b186e03a5af5fe749c2c00d6fd755</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This interface implements keyboard message management in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph><ph id="ph2">-</ph><ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> interoperation scenarios.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A keyboard sink handles input from particular subsets of the overall keyboard input model for <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>, and enables some keyboard input to be processed and directed to HWNDs other than the one with current keyboard focus.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your component contains other components, and maintains a tab order, your component must also implement &lt;xref:System.Windows.Interop.IKeyboardInputSite&gt; and keep track of which component has focus.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a discussion of the input architecture specifically implemented for <ph id="ph1">[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]</ph> interop, see <bpt id="p1">[</bpt>Windows Forms and WPF Interoperability Input Architecture<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Interop.HwndSource&gt; and &lt;xref:System.Windows.Interop.HwndHost&gt; each implement the IKeyboardInputSink interface, through explicit interface definitions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The explicit definitions supply default behaviors, and can also be accessed if necessary through an IKeyboardInputSink interface cast of &lt;xref:System.Windows.Interop.HwndSource&gt; or &lt;xref:System.Windows.Interop.HwndHost&gt;.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the sink or one of its contained components has focus.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is necessary for forwarding &lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt; calls to child components with focus from within the &lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt; implementation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call HasFocusWithin recursively until you reach the level of specific focus and forward &lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt; there.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the sink or one of its contained components has focus; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to the component's container's <bpt id="p1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property should initially be set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any container that adds the sink to its components list will set KeyboardInputSite before any other methods are called, and it can be set multiple times after that.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should set the property to <ph id="ph1">`null`</ph> again before disposal.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A reference to the container's <bpt id="p1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Called when one of the mnemonics (access keys) for this sink is invoked.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]</ph> message must be WM_CHAR, WM_SYSCHAR, WM_DEADCHAR or WM_SYSDEADCHAR.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the component has contained components, the message must be passed in your implementation by calling each contained component's OnMnemonic method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>An interface that returns <ph id="ph1">`true`</ph> from &lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt; will not call OnMnemonic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations can choose to perform all specific key combination handling in &lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A&gt;.and bypass OnMnemonic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The message for the mnemonic and associated data.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Do not modify this message structure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the message was handled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Registers the <bpt id="p1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface of a contained component.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Components with child components should maintain internal collections of sites and use this method to add a new sink and return the new site.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You only need to maintain the site collection, because the sink can be obtained from the site.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> sink of the contained component.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> site of the contained component.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sets focus on either the first tab stop or the last tab stop of the sink.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Input.FocusNavigationDirection&gt; and &lt;xref:System.Windows.Input.FocusNavigationDirection&gt; are the only relevant values that should be passed to this method in the &lt;xref:System.Windows.Input.TraversalRequest&gt;.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Specifies whether focus should be set to the first or the last tab stop.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the focus has been set as requested; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if there are no tab stops.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Processes keyboard input at the keydown message level.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The message must either be WM_KEYDOWN or WM_SYSKEYDOWN.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the component is unable to handle the input translations and has child components that might have translations, it typically calls TranslateAccelerator method on the child component that holds the current focus before returning a result.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the message cannot be handled immediately, you can re-dispatch it from within the TranslateAccelerator implementation if necessary, and then return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A primary scenario for translating accelerator keys is handling the VK_TAB keydown message and determining whether to set focus within the component, to call &lt;xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A&gt; to a child component, or to call &lt;xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A&gt; on the parent site because the tab sequence has reached the beginning or end bounds.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain components may choose to not handle the tab key in this fashion.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The message and associated data.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Do not modify this structure.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the message was handled by the method implementation; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before &lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic*&gt; is called.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you implement this method to return <ph id="ph1">`true`</ph>, the input architecture will not call &lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A&gt; for that key message.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The message and associated data.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Do not modify this structure.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the message was processed and &lt;xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic*&gt; should not be called; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>