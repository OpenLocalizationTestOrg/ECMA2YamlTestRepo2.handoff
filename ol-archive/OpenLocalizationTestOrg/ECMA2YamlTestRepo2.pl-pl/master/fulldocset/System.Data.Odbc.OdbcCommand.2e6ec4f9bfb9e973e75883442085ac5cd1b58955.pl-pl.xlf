<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bb24e794fede20895936913c4055a5b6d79c02e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Data.Odbc.OdbcCommand.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8db602e2bde1f0fe5b70a90eb44629a8b8c57ef6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86b89eaa451fb6dafa8762ed7f1f2dfdfde411e8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an SQL statement or stored procedure to execute against a data source.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OdbcCommand class provides the following methods for executing commands against a data source:      |Item|Description|   |----------|-----------------|   |&lt;xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A&gt;|Executes commands that return rows.|   |&lt;xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A&gt;|Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.|   |&lt;xref:System.Data.Odbc.OdbcCommand.ExecuteScalar%2A&gt;|Retrieves a single value, for example, an aggregate value, from a database.|       You can reset the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt; property and reuse the OdbcCommand object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you must close the &lt;xref:System.Data.Odbc.OdbcDataReader&gt; before you can execute a new or previous command.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If execution of the command causes a fatal &lt;xref:System.Data.Odbc.OdbcException&gt; such as a SQL Server severity level of 20 or more, &lt;xref:System.Data.Odbc.OdbcConnection&gt; may close.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the user can reopen the connection and continue.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base constructor initializes all fields to their default values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows initial property values for an instance of &lt;xref:System.Data.Odbc.OdbcCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Properties|Initial Value|   |----------------|-------------------|   |&lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt;|empty string ("")|   |&lt;xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A&gt;|30|   |&lt;xref:System.Data.Odbc.OdbcCommand.CommandType%2A&gt;|<ph id="ph1">`Text`</ph>|   |&lt;xref:System.Data.Odbc.OdbcCommand.Connection%2A&gt;|null|</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the text of the query.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The text of the query.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the text of the query and an <bpt id="p2">&lt;xref href="System.Data.Odbc.OdbcConnection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The text of the query.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcConnection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the connection to a data source.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the text of the query, an <bpt id="p2">&lt;xref href="System.Data.Odbc.OdbcConnection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object, and the &lt;xref:System.Data.Odbc.OdbcCommand.Transaction*&gt;.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows initial property values for an instance of this implementation of the &lt;xref:System.Data.Odbc.OdbcCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Properties|Initial Value|   |----------------|-------------------|   |&lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt;|<ph id="ph1">`cmdText`</ph>|   |&lt;xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A&gt;|30|   |&lt;xref:System.Data.Odbc.OdbcCommand.CommandType%2A&gt;|<ph id="ph2">`Text`</ph>|   |&lt;xref:System.Data.Odbc.OdbcCommand.Connection%2A&gt;|A new &lt;xref:System.Data.Odbc.OdbcConnection&gt; that is the value for the <ph id="ph3">`connection`</ph> parameter.|       You can change the value for any one of these parameters by setting the related property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The text of the query.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcConnection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the connection to a data source.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The transaction in which the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> executes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Tries to cancel the execution of an <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is nothing to cancel, nothing occurs.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if there is a command in process, and the cancellation try fails, no exception is generated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel a query on one thread, Cancel must be called from another thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because you cannot execute commands asynchronously with &lt;xref:System.Data.Odbc.OdbcCommand&gt;, to cancel a command from another thread, one thread must be running synchronously.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the &lt;xref:System.Data.Odbc.OdbcCommand&gt; object must be accessible from both threads.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets or sets the SQL statement or stored procedure to execute against the data source.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Data.IDbCommand.CommandType%2A&gt; property is set to <ph id="ph1">`StoredProcedure`</ph>, the CommandText property should be set using standard ODBC stored procedure escape sequences.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the CommandText to the name of the stored procedure does not function as it does for other .NET Framework data providers.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many language features, such as outer joins and scalar function calls, are generally implemented by data sources.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even the syntax for these features is generally data source-specific.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, ODBC defines escape sequences that contain standard syntax for the following language features:      -   Date, time, timestamp, and datetime interval literals      -   Scalar functions such as numeric, string, and data type conversion functions      -   LIKE predicate escape character      -   Outer joins      -   Procedure calls       The escape sequence used by ODBC is as follows:      <ph id="ph1">```   {extension}   ```</ph>       This escape sequence is recognized and parsed by ODBC drivers.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>They then replace any escape sequences with data source-specific grammar.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A procedure is an executable object stored at the data source.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, it is one or more SQL statements that have been precompiled.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The escape sequence for calling a procedure is      <ph id="ph1">```   {[?=]call procedure-name[([parameter][,[parameter]]...)]}   ```</ph>       where <ph id="ph2">`procedure-name`</ph> specifies the name of a procedure and <ph id="ph3">`parameter`</ph> specifies a procedure parameter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes this stored procedure when you call one of the Execute methods (for example, &lt;xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A&gt; or &lt;xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A&gt;).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the &lt;xref:System.Data.Odbc.OdbcCommand.Connection%2A&gt;, &lt;xref:System.Data.Odbc.OdbcCommand.CommandType%2A&gt; and CommandText properties if the current connection is performing an execute or fetch operation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ODBC.NET Provider does not support named parameters for passing parameters to an SQL statement or a stored procedure called by an &lt;xref:System.Data.Odbc.OdbcCommand&gt; when &lt;xref:System.Data.Odbc.OdbcCommand.CommandType%2A&gt; is set to <ph id="ph1">`Text`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the question mark (?) placeholder must be used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:      <ph id="ph1">```   SELECT * FROM Customers WHERE CustomerID = ?   ```</ph>       Therefore, the order in which &lt;xref:System.Data.Odbc.OdbcParameter&gt; objects are added to the &lt;xref:System.Data.Odbc.OdbcParameterCollection&gt; must directly correspond to the position of the question mark placeholder for the parameter.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a parameter contains a null value, the .NET Framework Data Provider for ODBC still binds that parameter, but uses a default parameter, if one has been defined by using SQL_DEFAULT_PARAM, instead of the null value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the &lt;xref:System.Data.Odbc.OdbcParameterCollection&gt;:      <ph id="ph1">```   {1, null, 2}   ```</ph>       passed into the CommandText property:      <ph id="ph2">```   {call sp(?, ?, ?)}   ```</ph>       causes the .NET Framework Data Provider for ODBC binding the first parameter to the value 1, the third parameter to the value 2, and the second parameter as SQL_DEFAULT_PARAM.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this behavior is driver-dependent.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the driver does not support this functionality, just do not pass in a value for the parameter.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use the &lt;xref:System.Data.Odbc.OdbcParameterCollection&gt;:      <ph id="ph1">```   {1, 2}   ```</ph>       and set the CommandText property to the following:      <ph id="ph2">```   {call sp(?, null, ?)}   ```</ph><ph id="ph3">      &gt; </ph><ph id="ph4">[!NOTE]</ph> &gt;  If a parameter is omitted, the comma delimiting it from other parameters must still appear.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an input or input/output parameter is omitted, the procedure uses the default value of the parameter.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another way to specify the default value of an input or input/output parameter is to set the value of the length/indicator buffer bound to the parameter to SQL_DEFAULT_PARAM.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The SQL statement or stored procedure to execute.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The default value is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets or sets the wait time before terminating an attempt to execute a command and generating an error.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of zero (0) specifies no limit to the wait time, instead of no wait time, and therefore should be avoided.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The time in seconds to wait for the command to execute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The default is 30 seconds.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates how the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText*&gt; property is interpreted.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the CommandType property is set to <ph id="ph1">`StoredProcedure`</ph>, you should set the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt; property to the full ODBC call syntax.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command then executes this stored procedure when you call one of the Execute methods (for example, &lt;xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A&gt; or &lt;xref:System.Data.Odbc.OdbcCommand.ExecuteNonQuery%2A&gt;).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Data.Odbc.OdbcCommand.Connection%2A&gt;, CommandType and &lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt; properties cannot be set if the current connection is performing an execute or fetch operation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Data Provider for ODBC does not support passing named parameters to an SQL statement or to a stored procedure called by an &lt;xref:System.Data.Odbc.OdbcCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>In either of these cases, use the question mark (?) placeholder.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:      <ph id="ph1">```   SELECT * FROM Customers WHERE CustomerID = ?   ```</ph>       The order in which &lt;xref:System.Data.Odbc.OdbcParameter&gt; objects are added to the &lt;xref:System.Data.Odbc.OdbcParameterCollection&gt; must directly correspond to the position of the question mark placeholder for the parameter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The .NET Framework Data Provider for ODBC does not support the &lt;xref:System.Data.CommandType&gt; setting of <ph id="ph2">`TableDirect`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.CommandType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_Text" name="Text" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The value was not a valid <bpt id="p1">&lt;xref href="System.Data.CommandType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcConnection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used by this instance of the <bpt id="p2">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the Connection, &lt;xref:System.Data.Odbc.OdbcCommand.CommandType%2A&gt;, and &lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt; properties if the current connection is performing an execute or fetch operation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set Connection while a transaction is in progress and the &lt;xref:System.Data.Odbc.OdbcCommand.Transaction%2A&gt; property is not null, an &lt;xref:System.InvalidOperationException&gt; is generated.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set Connection after the transaction has been committed or rolled back, and the &lt;xref:System.Data.Odbc.OdbcCommand.Transaction%2A&gt; property is not null, the &lt;xref:System.Data.Odbc.OdbcCommand.Transaction%2A&gt; property is then set to a null value.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The connection to a data source.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The default is a null value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The Connection property was changed while a transaction was in progress.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Creates a new instance of an <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcParameter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CreateParameter method is a strongly-typed version of &lt;xref:System.Data.IDbCommand.CreateParameter%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcParameter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the command object should be visible in a customized interface control.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept>, if the command object should be visible in a control; otherwise <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Executes an SQL statement against the &lt;xref:System.Data.Odbc.OdbcCommand.Connection*&gt; and returns the number of rows affected.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables); or to change the data in a database, without using a &lt;xref:System.Data.DataSet&gt;, by executing UPDATE, INSERT, or DELETE statements.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use ExecuteNonQuery to execute multiple SQL statements if the underlying ODBC driver supports this functionality.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the return value is the number of rows affected by all statements in the command.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although ExecuteNonQuery returns no rows, any output parameters or return values mapped to parameters are populated with data.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other types of statements, the return value is -1.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a rollback occurs, the return value is also -1.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a trigger exists on a table and data is being added or changed in the table, the return value includes the number of rows affected by both the insert or update operation and the number of rows affected by the trigger or triggers.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For all other types of statements, the return value is -1.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The connection does not exist.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-or-       The connection is not open.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Sends the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText<bpt id="p1">*</bpt>&gt; to the &lt;xref:System.Data.Odbc.OdbcCommand.Connection<ept id="p1">*</ept>&gt; and builds an <bpt id="p2">&lt;xref href="System.Data.Odbc.OdbcDataReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should set the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt; property to the full ODBC call syntax for stored procedures.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes this stored procedure when you call ExecuteReader.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the &lt;xref:System.Data.Odbc.OdbcDataReader&gt; is used, the associated &lt;xref:System.Data.Odbc.OdbcConnection&gt; is busy serving the &lt;xref:System.Data.Odbc.OdbcDataReader&gt;.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>While in this state, no other operations can be performed on the &lt;xref:System.Data.Odbc.OdbcConnection&gt; other than closing it.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the case until the &lt;xref:System.Data.Odbc.OdbcDataReader.Close%2A&gt; method of the &lt;xref:System.Data.Odbc.OdbcDataReader&gt; is called.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcDataReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Sends the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText<bpt id="p1">*</bpt>&gt; to the &lt;xref:System.Data.Odbc.OdbcCommand.Connection<ept id="p1">*</ept>&gt;, and builds an <bpt id="p2">&lt;xref href="System.Data.Odbc.OdbcDataReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> using one of the <bpt id="p3">&lt;xref uid="langword_csharp_CommandBehavior" name="CommandBehavior" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you expect your SQL statement to return only a single row, specifying <ph id="ph1">`SingleRow`</ph> as the &lt;xref:System.Data.CommandBehavior&gt; value may improve application performance.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should set the &lt;xref:System.Data.Odbc.OdbcCommand.CommandText%2A&gt; property to the full ODBC call syntax for stored procedures.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command executes this stored procedure when you call &lt;xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Data.Odbc.OdbcDataReader&gt; supports a special mode that enables large binary values to be read efficiently.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">`SequentialAccess`</ph> setting for &lt;xref:System.Data.CommandBehavior&gt;.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`SequentialAccess`</ph> value of &lt;xref:System.Data.CommandBehavior&gt; is not a limiting setting; it just means that you will have at least sequential access to the &lt;xref:System.Data.Odbc.OdbcDataReader&gt;.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when you use the SQL Server ODBC Driver in <ph id="ph1">`SequentialAccess`</ph> mode, you can still move to the first column of an &lt;xref:System.Data.Odbc.OdbcDataReader&gt; row after having read through all the other columns sequentially.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the &lt;xref:System.Data.Odbc.OdbcDataReader&gt; is used, the associated &lt;xref:System.Data.Odbc.OdbcConnection&gt; is busy serving the &lt;xref:System.Data.Odbc.OdbcDataReader&gt;.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>While in this state, no other operations can be performed on the &lt;xref:System.Data.Odbc.OdbcConnection&gt; other than closing it.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the case until you call the &lt;xref:System.Data.Odbc.OdbcDataReader.Close%2A?displayProperty=fullName&gt; method.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Data.Odbc.OdbcDataReader&gt; is created with &lt;xref:System.Data.CommandBehavior&gt; set to <ph id="ph1">`CloseConnection`</ph>, closing the &lt;xref:System.Data.Odbc.OdbcDataReader&gt; closes the connection automatically.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref uid="langword_csharp_System.Data.CommandBehavior" name="System.Data.CommandBehavior" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcDataReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Executes the query, and returns the first column of the first row in the result set returned by the query.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Additional columns or rows are ignored.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a data source.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>This requires less code than using the &lt;xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A&gt; method, and then performing the operations required to generate the single value from the data returned by an &lt;xref:System.Data.Odbc.OdbcDataReader&gt;.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The first column of the first row in the result set, or a null reference if the result set is empty.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcParameterCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Data.Odbc.OdbcCommand.CommandType%2A&gt; is set to <ph id="ph1">`Text`</ph>, the .NET Framework Data Provider for ODBC does not support passing named parameters to an SQL statement or to a stored procedure called by an &lt;xref:System.Data.Odbc.OdbcCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>In either of these cases, use the question mark (?) placeholder.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:      <ph id="ph1">```   SELECT * FROM Customers WHERE CustomerID = ?   ```</ph>       The order in which &lt;xref:System.Data.Odbc.OdbcParameter&gt; objects are added to the &lt;xref:System.Data.Odbc.OdbcParameterCollection&gt; must directly correspond to the position of the question mark placeholder for the parameter in the command text.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the parameters in the collection do not match the requirements of the query to be executed, an error may result.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The parameters of the SQL statement or stored procedure.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The default is an empty collection.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Creates a prepared or compiled version of the command at the data source.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Prepare method calls the ODBC <ph id="ph1">`SQLPrepare`</ph> function.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the capabilities of the underlying ODBC driver and data source, parameter information such as data types may be checked when the statement is prepared, if all parameters have been bound, or when it is executed if not all parameters have been bound.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>For maximum interoperability, an application should unbind all parameters that applied to a previous SQL statement before preparing a new SQL statement on the same &lt;xref:System.Data.Odbc.OdbcCommand&gt;.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This prevents errors that are caused by previous parameter information being applied to the new SQL statement.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call an Execute method after you call Prepare, any parameter value that is larger than the value specified by the &lt;xref:System.Data.Odbc.OdbcParameter.Size%2A&gt; property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Output parameters (whether prepared or not) must have a user-specified data type.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a variable length data type, you must also specify the maximum &lt;xref:System.Data.Odbc.OdbcParameter.Size%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.Odbc.OdbcCommand.Connection<bpt id="p1">*</bpt>&gt; is not set.       -or-       The &lt;xref:System.Data.Odbc.OdbcCommand.Connection<ept id="p1">*</ept>&gt; is not &lt;xref:System.Data.Odbc.OdbcConnection.Open*&gt;.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Resets the &lt;xref:System.Data.Odbc.OdbcCommand.CommandTimeout*&gt; property to the default value.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of the &lt;xref:System.Data.Odbc.OdbcCommand.CommandTimeout%2A&gt; is 30 seconds.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.ICloneable.Clone%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Data.Odbc.OdbcCommand&gt; instance is cast to an &lt;xref:InterfaceName&gt; interface.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">[</bpt>T;System.Object<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> that is a copy of this instance.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> within which the <bpt id="p2">&lt;xref href="System.Data.Odbc.OdbcCommand"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> executes.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the Transaction property if it is already set to a specific value, and the command is in the process of executing.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the transaction property to an &lt;xref:System.Data.Odbc.OdbcTransaction&gt; object that is not connected to the same &lt;xref:System.Data.Odbc.OdbcConnection&gt; as the &lt;xref:System.Data.Odbc.OdbcCommand&gt; object, an exception will be thrown the next time that you try to execute a statement.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.Odbc.OdbcTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The default is a null value.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies how the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method should apply command results to the <bpt id="p2">**</bpt>DataRow<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default &lt;xref:System.Data.UpdateRowSource&gt; value is <bpt id="p1">**</bpt>Both<ept id="p1">**</ept> unless the command is automatically generated, as with the &lt;xref:System.Data.Odbc.OdbcCommandBuilder&gt;, in which case the default is <bpt id="p2">**</bpt>None<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use the UpdatedRowSource property, see <bpt id="p1">[</bpt>DataAdapter Parameters<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.UpdateRowSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>