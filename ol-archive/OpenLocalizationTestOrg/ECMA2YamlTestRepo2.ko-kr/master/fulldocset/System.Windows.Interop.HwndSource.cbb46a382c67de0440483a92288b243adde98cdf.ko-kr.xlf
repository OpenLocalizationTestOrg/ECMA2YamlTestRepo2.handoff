<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a81e40b9009905d8831137a0249b3348431659b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.HwndSource.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2ded6a8d36ea4aecdb81cf828951d8932e37b90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9705cf6641d5a3355f2b1ae3c51ceba957caae14</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Presents <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> content in a <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  Many members of this class are unavailable in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An HwndSource implements a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window that can contain <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content in the window is arranged, measured, and rendered; and is interactive to input.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the HwndSource is specifically designed to interoperate with <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>, this class exposes several low-level <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> features.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this class to do the following:      -   Specify window styles, window class styles, and extended window styles.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Hook the window procedure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Provide access to the window handle (HWND).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Destroy the window.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The HwndSource class is designed for general interoperability and is not designed as a managed HWND wrapper.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, it does not provide managed methods for manipulating the window or properties for inspecting its state.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the HwndSource class provides access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window handle (HWND) through the &lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt; property, which can be passed by means of PInvoke techniques to <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> in order to manipulate the window.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Construction<ept id="p1">**</ept>       Many aspects of the HwndSource can only be specified at construction time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an HwndSource, first create an &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure and populate it with the desired parameters.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>These parameters include the following:      -   The class, window, and extended window styles.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use PInvoke to change the styles after the window is created.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all styles can be changed after the window is created.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consult the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> documentation before changing window styles.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The initial position of the window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The initial size of the window, which includes whether the size is specified or should be determined from the determined size of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The parent window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Windows.Interop.HwndSourceHook&gt; to include in the window procedure chain.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a hook at construction time, it receives all messages for the window.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; to add a hook after the window is created.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The transparency settings.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A top-level window can be configured to blend with the other windows on the desktop according to the per-pixel transparency of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this, set the &lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt; property in the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can only be specified at construction time, and only through the &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; constructor signature, and it imposes several limitations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you populate the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure, pass it to the &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; constructor for the HwndSource.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Object Lifetime<ept id="p1">**</ept>       An HwndSource is a regular <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> object, and its lifetime is managed by the garbage collector.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the HwndSource represents an unmanaged resource, HwndSource implements &lt;xref:System.IDisposable&gt;.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronously calling &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt; immediately destroys the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window if called from the owner thread.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If called from another thread, the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window is destroyed asynchronously.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt; explicitly from the interoperating code might be necessary for certain interoperation scenarios.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Window Procedures<ept id="p1">**</ept>       The HwndSource class implements its own window procedure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This window procedure is used to process important window messages, such as those related to layout, rendering, and input.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can also hook the window procedure for your own use.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify your own hook during construction by setting the &lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt; property, or you can also use &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; and &lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt; to add and remove hooks after the window is created.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hooks are called by last-in first-out order, which enables your hooks to execute before the built-in processing.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual hooks are held by a weak reference.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, make sure that you manage the lifetime of your hook delegate.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about HwndSource and other interoperation classes, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice how the constructors for HwndSource take parameters that resemble the parameters for <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> functions such as <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scale transformations should not be applied to the &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt; of an HwndSource.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by using a structure that contains the initial settings.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor signature might be more convenient in certain situations, because the default structure contains some appropriate initial default values.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If you use this signature, do not use the default &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor to construct the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure for the <ph id="ph2">`parameters`</ph> value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor that enables you to specify an initial window name.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the default &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor and create an &lt;xref:System.Windows.Interop.HwndSource&gt; with it, that &lt;xref:System.Windows.Interop.HwndSource&gt; does not display because an initial window name is a construction requirement for the represented HWND.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A structure that contains the parameters that are required to create the window.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified class style, style, extended style, x-y position, name, and parent window.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This method is not available in the Internet security zone.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>