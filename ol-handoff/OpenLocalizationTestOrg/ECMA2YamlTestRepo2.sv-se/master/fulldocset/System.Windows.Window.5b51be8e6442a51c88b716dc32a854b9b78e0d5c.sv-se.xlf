<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sv-se">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7172c27ebcd4693a42b484604cff94ac6acd1306</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Window.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4119341e55e118230bf70eed4f7179ef30065f01</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">582455b08242d27076383f3e723bd48f521b75e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The point of interaction between a user and a standalone application is a window.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window consists of two distinct areas:      -   A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A client area, which hosts application-specific content.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard window is shown in the following figure:       <bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept>       Window encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:       <bpt id="p3">**</bpt>Lifetime Management<ept id="p3">**</ept>: &lt;xref:System.Windows.Window.Activate%2A&gt;, &lt;xref:System.Windows.Window.Activated&gt;, &lt;xref:System.Windows.Window.Close%2A&gt;, &lt;xref:System.Windows.Window.Closed&gt;, &lt;xref:System.Windows.Window.Closing&gt;, &lt;xref:System.Windows.Window.Deactivated&gt;, &lt;xref:System.Windows.Window.Hide%2A&gt;, &lt;xref:System.Windows.Window.IsActive%2A&gt;, &lt;xref:System.Windows.Window.Show%2A&gt;, &lt;xref:System.Windows.Window.SourceInitialized&gt;.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.GetWindow%2A&gt;, &lt;xref:System.Windows.Window.OwnedWindows%2A&gt;, &lt;xref:System.Windows.Window.Owner%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;, &lt;xref:System.Windows.Window.ContentRendered&gt;, &lt;xref:System.Windows.Window.DragMove%2A&gt;, &lt;xref:System.Windows.Window.Icon%2A&gt;, &lt;xref:System.Windows.Window.Left%2A&gt;, &lt;xref:System.Windows.Window.LocationChanged&gt;, &lt;xref:System.Windows.Window.ResizeMode%2A&gt;, &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;, &lt;xref:System.Windows.Window.ShowActivated%2A&gt;, &lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;, &lt;xref:System.Windows.Window.SizeToContent%2A&gt;, &lt;xref:System.Windows.Window.StateChanged&gt;, &lt;xref:System.Windows.Window.Title%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, &lt;xref:System.Windows.Window.Topmost%2A&gt;, &lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;, &lt;xref:System.Windows.Window.WindowState%2A&gt;, &lt;xref:System.Windows.Window.WindowStyle%2A&gt;       <bpt id="p2">**</bpt>Dialog Boxes<ept id="p2">**</ept>: &lt;xref:System.Windows.Window.DialogResult%2A&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, &lt;xref:System.Windows.Application&gt; exposes special support for managing all of the windows in an application:      -   Application maintains a list of all the windows that are currently instantiated in the application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This list is exposed by the &lt;xref:System.Windows.Application.Windows%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   By default, &lt;xref:System.Windows.Application.MainWindow%2A&gt; is automatically set with a reference to the first Window that is instantiated in an application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This thereby making the window the main application window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Window can be implemented using markup, markup and code-behind, or code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Window is primarily used to display windows and dialog boxes for standalone applications.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use &lt;xref:System.Windows.Navigation.NavigationWindow&gt; instead; &lt;xref:System.Windows.Navigation.NavigationWindow&gt; derives from Window and extends it with browser-style navigation support.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Islands of navigable content can be incorporated into other content and content containers using &lt;xref:System.Windows.Controls.Frame&gt;.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Window needs <ph id="ph1">`UnmanagedCode`</ph> security permission to be instantiated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This has the following consequences:      -   <ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Window is a &lt;xref:System.Windows.Controls.ContentControl&gt;, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.Windows.Controls.ContentControl&gt; class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, Window is a root element and, therefore, cannot be part of another element's content.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, and &lt;xref:System.Windows.Window.Left%2A&gt; properties set on a Window through a style will not be applied at run time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Customizing the Window Control    To apply the same property settings to multiple Window controls, use the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can modify the default &lt;xref:System.Windows.Controls.ControlTemplate&gt; to give the control a unique appearance.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating a &lt;xref:System.Windows.Controls.ControlTemplate&gt;, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>To see the parts and states that are specific to the Window, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Setting a visual property will only have an effect if that property is both present in Window control's default template and is set by using a .</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor initializes the &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, and &lt;xref:System.Windows.Window.Left%2A&gt; properties to their default &lt;xref:System.Windows.Window&gt; values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window is created within an &lt;xref:System.AppDomain&gt; that has an &lt;xref:System.Windows.Application&gt; object, the constructor adds the &lt;xref:System.Windows.Window&gt; object to the set of &lt;xref:System.Windows.Application&gt;-managed windows via the &lt;xref:System.Windows.Application.Windows%2A&gt; property of the &lt;xref:System.Windows.Application&gt; object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Attempts to bring the window to the foreground and activates it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the window is activated in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, &lt;xref:System.Windows.Application.Activated&gt; event is raised.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> was successfully activated; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes the foreground window.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is activated (becomes the foreground window) when:      -   The window is first opened.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A user clicks the window's taskbar button.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows that need to detect when they become activate can handle the Activated event.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application's behavior or state depends on its activation state, it can inspect &lt;xref:System.Windows.Window.IsActive%2A&gt; to determine which activation state it's in.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can also be &lt;xref:System.Windows.Application.Activated&gt;.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Controls.Control.Background%2A&gt; property of a window is set to a transparent color, using &lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt; for example, the window remains opaque.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this type of transparency, AllowsTransparency must be set to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>AllowsTransparency exists to facilitate the creation of non-rectangular windows, and, consequently, when AllowsTransparency is set to <ph id="ph1">`true`</ph>, a window's &lt;xref:System.Windows.Window.WindowStyle%2A&gt; property must be set to &lt;xref:System.Windows.WindowStyle&gt;.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowAllowsTransparency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.AllowsTransparencyProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window supports transparency; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A window that has a &lt;xref:System.Windows.Window.WindowStyle*&gt; value of anything other than <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.AllowsTransparency*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Override this method to arrange and size a window and its child elements.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>ArrangeOverride is not called when the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property has a value of &lt;xref:System.Windows.Visibility&gt;.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is either &lt;xref:System.Windows.Visibility&gt; or &lt;xref:System.Windows.Visibility&gt;, ArrangeOverride is called.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When either &lt;xref:System.Windows.Window.Show%2A&gt; or &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are called, the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of a &lt;xref:System.Windows.Window&gt; is set to &lt;xref:System.Windows.Visibility&gt;.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the final size that the window should use to arrange itself and its children.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the actual size that was used.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Manually closes a <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Windows.Window&gt; can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:      -   ALT+F4.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Windows.Window&gt; can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:      -   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set &lt;xref:System.Windows.Window.DialogResult%2A&gt;, which automatically closes a window that was opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>These mechanisms require you to explicitly call Close to close a window.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If a window, opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, and with a &lt;xref:System.Windows.Controls.Button&gt; with its &lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt; property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the window was opened using &lt;xref:System.Windows.Window.Show%2A&gt;, however, Close must be explicitly called, such as from &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event handler for the &lt;xref:System.Windows.Controls.Button&gt;.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing a window causes the &lt;xref:System.Windows.Window.Closing&gt; event to be raised.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Windows.Window.Closing&gt; event isn't canceled, the following occurs:      -   The &lt;xref:System.Windows.Window&gt; is removed from &lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt; (if an &lt;xref:System.Windows.Application&gt; object exists).</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Windows.Window&gt; is removed from the owner &lt;xref:System.Windows.Window&gt; if the owner/owned relationship was established before the owned &lt;xref:System.Windows.Window&gt; was shown and after the owner &lt;xref:System.Windows.Window&gt; was opened.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Unmanaged resources created by the &lt;xref:System.Windows.Window&gt; are disposed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If &lt;xref:System.Windows.Window.ShowDialog%2A&gt; was called to show the &lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt; returns.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing a &lt;xref:System.Windows.Window&gt; causes any windows that it owns to be closed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Furthermore, closing a &lt;xref:System.Windows.Window&gt; may cause an application to stop running depending on how the &lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt; property is set.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Occurs when the window is about to close.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.Visibility<bpt id="p1">*</bpt>&gt; is set, or &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;, &lt;xref:System.Windows.Window.ShowDialog<bpt id="p2">*</bpt>&gt;, or &lt;xref:System.Windows.Window.Hide<ept id="p2">*</ept>&gt; is called while a window is closing.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Occurs directly after &lt;xref:System.Windows.Window.Close*&gt; is called, and can be handled to cancel window closure.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing can be handled to detect when a window is being closed (for example, when &lt;xref:System.Windows.Window.Close%2A&gt; is called).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Furthermore, Closing can be used to prevent a window from closing.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a window from closing, you can set the &lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; property of the &lt;xref:System.ComponentModel.CancelEventArgs&gt; argument to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Closing event is raised when &lt;xref:System.Windows.Window.Close%2A&gt; is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owned window was opened by its owner window using &lt;xref:System.Windows.Window.Show%2A&gt;, and the owner window is closed, the owned window's Closing event is not raised.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the owner of a window is closed (see &lt;xref:System.Windows.Window.Owner%2A&gt;), Closing is not raised on the owned window.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Application.Shutdown%2A&gt; is called, the Closing event for each window is raised.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if Closing is canceled, cancellation is ignored.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a session ends because a user logs off or shuts down, Closing is not raised; handle &lt;xref:System.Windows.Application.SessionEnding&gt; to implement code that cancels application closure.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the Closing event, cancel it, and call the &lt;xref:System.Windows.Window.Hide%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then, you can call &lt;xref:System.Windows.Window.Show%2A&gt; on the same instance to reopen it.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.Visibility<bpt id="p1">*</bpt>&gt; is set, or &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;, &lt;xref:System.Windows.Window.ShowDialog<bpt id="p2">*</bpt>&gt;, or &lt;xref:System.Windows.Window.Close<ept id="p2">*</ept>&gt; is called while a window is closing.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Occurs after a window's content has been rendered.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the window has no content, this event is not raised.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes a background window.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is deactivated (becomes a background window) when:      -   A user switches to another window in the current application.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A user clicks the taskbar button for a window in another application.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows that need to detect when they become deactivated by handling the Deactivated event.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application's behavior or state depends on its activation state, it can inspect &lt;xref:System.Windows.Window.IsActive%2A&gt; to determine which activation state it's in.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can also be &lt;xref:System.Windows.Application.Deactivated&gt;.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets the dialog result value, which is the value that is returned from the &lt;xref:System.Windows.Window.ShowDialog*&gt; method.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>DialogResult can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph1">`true`</ph>) or canceled (<ph id="ph2">`false`</ph>) the dialog box.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, a dialog box is canceled when a user does one of the following:      -   PressesALT+F4.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>In all of these cases, DialogResult is <ph id="ph1">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose &lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>In either of these cases, DialogResult remains <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dialog box also typically provides an accept button, which is the button whose &lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>A button configured this way will raise its &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event when either it or the ENTER key is pressed.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it won't automatically close the dialog box, nor will it set DialogResult to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>You need to manually write this code, usually from the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event handler for the default button.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>DialogResult is <ph id="ph1">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a dialog box closes, you can get the dialog result from the value returned by &lt;xref:System.Windows.Window.ShowDialog%2A&gt; method, or by inspecting the DialogResult property.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>DialogResult can only be set when a &lt;xref:System.Windows.Window&gt; is opened by calling its &lt;xref:System.Windows.Window.ShowDialog%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> value of type &lt;xref:System.Boolean&gt;.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>DialogResult is set before a window is opened by calling &lt;xref:System.Windows.Window.ShowDialog<bpt id="p1">*</bpt>&gt;.       -or-       DialogResult is set on a window that is opened by calling &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for when the DPI of the screen the Window is on changes.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The left mouse button must be down when DragMove is called.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>One way to detect when the left mouse button is pressed is to handle the &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; event.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>When DragMove is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The left mouse button is not down.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a reference to the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that hosts the content tree within which the dependency object is located.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The dependency object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> reference to the host window.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dependencyObject&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Makes a window invisible.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is not closed when it is hidden, and neither the &lt;xref:System.Windows.Window.Closing&gt; nor &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the window's &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is set to &lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window is the application's &lt;xref:System.Windows.Application.MainWindow%2A&gt; and the application's &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; is &lt;xref:System.Windows.ShutdownMode&gt;, the application does not shut down.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is &lt;xref:System.Windows.ShutdownMode&gt;.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the &lt;xref:System.Windows.Window.Closing&gt; event, cancel it, and call the Hide method.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then, you can call &lt;xref:System.Windows.Window.Show%2A&gt; on the same instance to re-open it.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Hide is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's icon.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:      -   One assembly icon, which is specified by using the <ph id="ph2">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This icon is used as the desktop icon for an assembly.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you run the executable, the icon will appear.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   One icon per window that is specified by setting Icon.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window always displays an icon.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>When one is not provided by setting Icon, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> chooses an icon to display based on the following rules:      1.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the assembly icon, if specified.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the assembly icon is not specified, use the default <ph id="ph1">[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]</ph> icon.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use Icon to specify a custom window icon, you can restore the default application icon by setting Icon to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single icon can be used in a variety of ways in <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>If icons for all possible sizes and color depths exist within an icon file, &lt;xref:System.Windows.Window&gt; will use the appropriate icon.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an icon file contains only a subset of all the possible icons, &lt;xref:System.Windows.Window&gt; uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result is that an icon will always be used by &lt;xref:System.Windows.Window&gt;, although the icon used may not target the required size and color depth.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIcon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.IconProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the icon.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Icon*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the window is active.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the &lt;xref:System.Windows.Window.Topmost%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIsActive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.IsActiveProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window is active; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.IsActive*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Window&gt; is maximized or minimized, this value represents the left edge of the restore point for the &lt;xref:System.Windows.Window&gt;.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property cannot be set through a style.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a value, Left is set to the system default value.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also specify the system default value by setting Left to &lt;xref:System.Double.NaN&gt;.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither &lt;xref:System.Double.NegativeInfinity&gt; nor &lt;xref:System.Double.PositiveInfinity&gt; is a valid value for Left.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowLeft"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.LeftProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Left*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Occurs when the window's location changes.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window's location changes when:      -   A user moves a window by dragging it with the window's title bar.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A window is moved after &lt;xref:System.Windows.Window.DragMove%2A&gt; is called.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Either the &lt;xref:System.Windows.Window.Left%2A&gt; or &lt;xref:System.Windows.Window.Top%2A&gt; property is set programmatically.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Windows.Window.WindowState%2A&gt; property is changed.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Gets an enumerator for a window's logical child elements.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; a window's logical child elements.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Override this method to measure the size of a window.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>MeasureOverride is not called when the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property has a value of &lt;xref:System.Windows.Visibility&gt;.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is either &lt;xref:System.Windows.Visibility&gt; or &lt;xref:System.Windows.Visibility&gt;, MeasureOverride is called.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When either &lt;xref:System.Windows.Window.Show%2A&gt; or &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are called, the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of a &lt;xref:System.Windows.Window&gt; is set to &lt;xref:System.Windows.Visibility&gt;.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the available size that this window can give to the child.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Activated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnActivated raises the &lt;xref:System.Windows.Window.Activated&gt; event.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnActivated.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnActivated on the base class if &lt;xref:System.Windows.Window.Activated&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnClosed raises the &lt;xref:System.Windows.Window.Closed&gt; event.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnClosed.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnClosed on the base class if &lt;xref:System.Windows.Window.Closed&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnClosing raises the &lt;xref:System.Windows.Window.Closing&gt; event.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnClosing.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnClosing on the base class if &lt;xref:System.Windows.Window.Closing&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Called when the &lt;xref:System.Windows.Controls.ContentControl.Content*&gt; property changes.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A reference to the root of the old content tree.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A reference to the root of the new content tree.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.ContentRendered"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnContentRendered raises the &lt;xref:System.Windows.Window.ContentRendered&gt; event.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnContentRendered.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnContentRendered on the base class if &lt;xref:System.Windows.Window.ContentRendered&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Creates and returns a <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Deactivated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnDeactivated raises the &lt;xref:System.Windows.Window.Deactivated&gt; event.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnDeactivated.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnDeactivated on the base class if &lt;xref:System.Windows.Window.Deactivated&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Called when the DPI at which this window is rendered changes.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The previous DPI scale setting.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The new DPI scale setting.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.LocationChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnLocationChanged raises the &lt;xref:System.Windows.Window.LocationChanged&gt; event.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnLocationChanged.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnLocationChanged on the base class if &lt;xref:System.Windows.Window.LocationChanged&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation does not change the handled state (the &lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt; property) of the &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; event data.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.SourceInitialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnSourceInitialized raises the &lt;xref:System.Windows.Window.SourceInitialized&gt; event.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnSourceInitialized.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnSourceInitialized on the base class if &lt;xref:System.Windows.Window.SourceInitialized&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.StateChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>OnStateChanged raises the &lt;xref:System.Windows.Window.StateChanged&gt; event.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnStateChanged.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call OnStateChanged on the base class if &lt;xref:System.Windows.Window.StateChanged&gt; needs to be raised.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Called when the parent of the window is changed.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The previous parent.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Set to null if the <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> did not have a previous parent.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Gets a collection of windows for which this window is the owner.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>An owned window is one whose &lt;xref:System.Windows.Window.Owner%2A&gt; property is set with a reference to another window, which is known as the owner window.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>To find all the windows that an owner window owns, you can enumerate &lt;xref:System.Windows.WindowCollection&gt; that is returned by the OwnedWindows property.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains references to the windows for which this window is the owner.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that owns this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a child window is opened by a parent window by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, an implicit relationship is established between both parent and child window.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a child window is created by a parent window by calling &lt;xref:System.Windows.Window.Show%2A&gt;, however, the child window does not have a relationship with the parent window.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that:      -   The child window does not have a reference to the parent window.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow you to create a relationship between a child window and a parent window, &lt;xref:System.Windows.Window&gt; supports the notion of ownership.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once this relationship is established, the following behaviors are exhibited:      -   If an owner window is minimized, all its owned windows are minimized as well.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If an owned window is minimized, its owner is not minimized.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If an owner window is maximized, both the owner window and its owned windows are restored.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   An owner window can never cover an owned window.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Owned windows that were not opened using &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are not modal.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can still interact with the owner window.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If you close an owner window, its owned windows are also closed.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If an owned window was opened by its owner window using &lt;xref:System.Windows.Window.Show%2A&gt;, and the owner window is closed, the owned window's &lt;xref:System.Windows.Window.Closing&gt; event is not raised.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you open a child window by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, you should also set the Owner property of the child window.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  You should also set the Owner property on a window that that is opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt; to ensure correct behavior with .</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the owner of this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A window tries to own itself       -or-       Two windows try to own each other.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The Owner property is set on a visible window shown using &lt;xref:System.Windows.Window.ShowDialog*&gt;       -or-       The Owner property is set with a window that has not been previously shown.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Gets or sets the resize mode.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are four options:      -   <bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user cannot resize the window.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Maximize and Minimize boxes are not shown.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Default).</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>This option has the same functionality as &lt;xref:System.Windows.ResizeMode&gt;, but adds a "resize grip" to the lower right corner of the window.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowResizeMode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ResizeModeProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.ResizeMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value specifying the resize mode.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ResizeMode*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use RestoreBounds to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you query RestoreBounds before the window has been shown or after it has been closed, &lt;xref:System.Windows.Rect.Empty%2A&gt; is returned.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies the size and location of a window before being either minimized or maximized.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Window&gt; class is instantiated, it is not visible by default.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>Show shows a window and returns immediately, without waiting for the window to be closed.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window that is opened by calling Show does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>This relationship can be established using the &lt;xref:System.Windows.Window.Owner%2A&gt; property and managed using the &lt;xref:System.Windows.Window.OwnedWindows%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling Show achieves the same end result as setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of the &lt;xref:System.Windows.Window&gt; object to &lt;xref:System.Windows.Visibility&gt;.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, there is a difference between the two from a timing perspective.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling Show is a synchronous operation that returns only after the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event on the child window has been raised:       <bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p2">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p4">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync)</ept><ept id="p3">]</ept>       Setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, however, is an asynchronous operation that returns immediately:       <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p6">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)</ept><ept id="p5">]</ept>  <bpt id="p7">[!code-cs</bpt><bpt id="p8">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p8">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync)</ept><ept id="p7">]</ept>       When setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, any window events you register before you set &lt;xref:System.Windows.UIElement.Visibility%2A&gt; may not be raised until after the method in which you set &lt;xref:System.Windows.UIElement.Visibility%2A&gt; has completed execution.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Show is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a window with its ShowActivated property set to <ph id="ph1">`false`</ph> is opened, the window is not activated and its &lt;xref:System.Windows.Window.Activated&gt; event is not raised until a user manually activates the window by selecting it.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the window is selected, it activates and deactivates normally.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a window from being activated when it opens, the ShowActivated property must be set to <ph id="ph1">`false`</ph> before the window is shown (by calling &lt;xref:System.Windows.Window.Show%2A&gt;); setting ShowActivated to <ph id="ph2">`false`</ph> after a window is shown has no effect.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting ShowActivated to <ph id="ph1">`false`</ph> on a window that is opened modally, by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, has no real impact.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowActivated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ShowActivatedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a window is activated when first shown; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ShowActivated*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a &lt;xref:System.Windows.Window&gt; class is instantiated, it is not visible by default.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>ShowDialog shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modal windows are primarily used as dialog boxes.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>ShowDialog returns a &lt;xref:System.Nullable%601&gt;&lt;xref:System.Boolean&gt; value that specifies whether the activity was accepted or canceled.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the value of the &lt;xref:System.Windows.Window.DialogResult%2A&gt; property before a window closes.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Windows.Window.DialogResult%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window that is opened by calling the ShowDialog method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>This relationship can be established using the &lt;xref:System.Windows.Window.Owner%2A&gt; property and managed using the &lt;xref:System.Windows.Window.OwnedWindows%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>), &lt;xref:System.Windows.Window.Owner%2A&gt; must be set for a window opened by calling ShowDialog.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window (a window opened by calling ShowDialog) is closed, the previously activated window is reactivated.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window has an owner window (see &lt;xref:System.Windows.Window.Owner%2A&gt;), the owner window is not reactivated when the modal <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window is closed unless it was the previously activated window.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> value of type &lt;xref:System.Boolean&gt; that specifies whether the activity was accepted (<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or canceled (<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The return value is the value of the &lt;xref:System.Windows.Window.DialogResult*&gt; property before a window closes.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>ShowDialog is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>If ShowInTaskbar is set to <ph id="ph1">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the &lt;xref:System.Windows.Window.Icon%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowInTaskbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ShowInTaskbarProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window has a task bar button; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Does not apply when the window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ShowInTaskbar*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting either &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; or &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; does not change the height of the window.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; does not change the width of the window.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>If SizeToContent has a value other than &lt;xref:System.Windows.SizeToContent&gt;:      -   SizeToContent is automatically set to &lt;xref:System.Windows.SizeToContent&gt; if a user resizes the window by using the resize grip or dragging the border.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the size of the content changes in a way that causes the window to resize itself, &lt;xref:System.Windows.FrameworkElement.SizeChanged&gt; is raised.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window is transparent (see &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;), you should consider setting SizeToContent to &lt;xref:System.Windows.SizeToContent&gt; to ensure the window is no larger than its visible content.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowSizeToContent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.SizeToContentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.SizeToContent*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when the window's &lt;xref:System.Windows.Window.WindowState*&gt; property changes.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail for the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail, see the &lt;xref:System.Windows.Shell.TaskbarItemInfo&gt; class.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail for the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.TaskbarItemInfo*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's title.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>The title of a &lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Navigation.NavigationWindow&gt;, or <ph id="ph1">[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using &lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TitleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that contains the window's title.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Title*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Window&gt; is maximized or minimized, this value represents the top edge of the restore point for the &lt;xref:System.Windows.Window&gt;.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property cannot be set through a style.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a value, Top is set to the system default value.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also specify the system default value by setting Top to &lt;xref:System.Double.NaN&gt;.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither &lt;xref:System.Double.NegativeInfinity&gt; nor &lt;xref:System.Double.PositiveInfinity&gt; is a valid value for Top.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TopProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The position of the window's top, in logical units (1/96").</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window whose Topmost property is set to <ph id="ph1">`true`</ph> appears above all windows whose Topmost properties are set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the group of windows that have Topmost property is set to <ph id="ph1">`true`</ph>, the window that is currently activated is the topmost window.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise for the group of windows that have Topmost property is set to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTopmost"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TopmostProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window is topmost; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Topmost*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Top*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window when first shown.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; to &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned according to its &lt;xref:System.Windows.Window.Left%2A&gt; and &lt;xref:System.Windows.Window.Top%2A&gt; property values.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either the &lt;xref:System.Windows.Window.Left%2A&gt; or &lt;xref:System.Windows.Window.Top%2A&gt; properties aren't specified, their values are determined by <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; to &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned in the center of its owner window (see &lt;xref:System.Windows.Window.Owner%2A&gt;), if specified.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and &lt;xref:System.Windows.Interop.WindowInteropHelper&gt;.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if &lt;xref:System.Windows.WindowStartupLocation&gt; is set to &lt;xref:System.Windows.WindowStartupLocation&gt;.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get the value of this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value that specifies the top/left position of a window when first shown.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before a window is minimized or maximized, its size and location are stored in &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a window is subsequently restored, its size and location values are restored with the values from &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the WindowState property is changed, &lt;xref:System.Windows.Window.StateChanged&gt; is raised.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowState"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.WindowStateProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;|</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that determines whether a window is restored, minimized, or maximized.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (restored).</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.WindowState*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's border style.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>WindowStyle can be one of the &lt;xref:System.Windows.WindowStyle&gt; enumeration values, including &lt;xref:System.Windows.WindowStyle&gt;, &lt;xref:System.Windows.WindowStyle&gt;, &lt;xref:System.Windows.WindowStyle&gt; (default), and &lt;xref:System.Windows.WindowStyle&gt;.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):       <bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.WindowStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies a window's border style.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.WindowStyle*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>