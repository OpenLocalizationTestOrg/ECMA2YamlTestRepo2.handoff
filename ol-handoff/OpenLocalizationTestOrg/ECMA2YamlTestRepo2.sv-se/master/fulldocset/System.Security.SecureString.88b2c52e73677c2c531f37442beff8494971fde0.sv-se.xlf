<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sv-se">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174f0da1081f35785157244fe1d71fc69c350a80</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.SecureString.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b26f781b33daffc80c63d1ac4f68a7a5430ae291</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d18f00588ef24993438e6e7b3941d250b8f6593</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>SecureString is a string type that provides a measure of security.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tries to avoid storing potentially sensitive strings in process memory as plain text.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For limitations, however, see the <bpt id="p1">[</bpt>How secure is SecureString?<ept id="p1">](#HowSecure)</ept> section.) The value of an instance of SecureString is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application can render the instance immutable and prevent further modification by invoking the &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum length of a SecureString instance is 65,536 characters.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SecureString class and its members are not visible to COM.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this section:       <bpt id="p1">[</bpt>String vs. SecureString<ept id="p1">](#vsString)</ept>     <bpt id="p2">[</bpt>SecureString operations<ept id="p2">](#Ops)</ept>     <bpt id="p3">[</bpt>SecureString and interop<ept id="p3">](#interop)</ept>     <bpt id="p4">[</bpt>How secure is  SecureString?<ept id="p4">](#HowSecure)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="vsString"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## String versus SecureString    An instance of the &lt;xref:System.String?displayProperty=fullName&gt; class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because &lt;xref:System.String?displayProperty=fullName&gt; instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, if a &lt;xref:System.String&gt; object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>A SecureString object is similar to a &lt;xref:System.String&gt; object in that it has a text value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the value of a SecureString object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method  or by the .NET Framework garbage collector.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a discussion of the limitations of the SecureString class, see the <bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept> section.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="Ops"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## SecureString operations    The SecureString class includes members that allow you to do the following:       Instantiate a SecureString object    You instantiate a SecureString object by calling its parameterless constructor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add characters to a SecureString object    You can add a single character at a time to a SecureString object  by calling its &lt;xref:System.Security.SecureString.AppendChar%2A&gt; or &lt;xref:System.Security.SecureString.InsertAt%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  A SecureString object should never be constructed from a &lt;xref:System.String&gt;, because the sensitive data is already subject to the memory persistence consequences of the immutable &lt;xref:System.String&gt; class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The best way to construct a SecureString object is from a character-at-a-time unmanaged source, such as the &lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt; method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remove characters from a SecureString object    You can replace an individual character by calling the &lt;xref:System.Security.SecureString.SetAt%2A&gt; method, remove an individual character by calling the &lt;xref:System.Security.SecureString.RemoveAt%2A&gt; method, or remove all characters from the SecureString instance by calling the  &lt;xref:System.Security.SecureString.Clear%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make the SecureString object read-only    Once you have defined the string that the SecureString object represents, you call its  &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method to make the string read-only.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get information about the SecureString object    The SecureString class has only two members that provide information about the string: its &lt;xref:System.Security.SecureString.Length%2A&gt; property, which indicates the number of UTF16-encoded code units in the string; and the &lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;, method, which indicates whether the instance is read-only.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Release the memory allocated to the SecureString instance    Because SecureString implements the &lt;xref:System.IDisposable&gt; interface, you release its memory by calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SecureString class has no members that inspect, compare, or convert the value of a SecureString.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The absence of such members helps protect the value of the instance from accidental or malicious exposure.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use appropriate members of the &lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt; class, such as the &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt; method, to manipulate the value of a SecureString object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework Class Library commonly uses SecureString instances in the following ways:      -   To provide password information to a process by using the &lt;xref:System.Diagnostics.ProcessStartInfo&gt; structure or by calling an overload of the &lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt; method that has a parameter of type SecureString.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   To provide network password information by calling a &lt;xref:System.Net.NetworkCredential&gt; class constructor that has a parameter of type SecureString or by using the &lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt; property.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   To provide password information for SQL Server Authentication by calling the &lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt; constructor or retrieving the value of the &lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt; property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   To pass a string to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="interop"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## SecureString and interop    Because the operating system does not  directly support SecureString, you must convert the value of the SecureString object to the required string type before passing the string to a native method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.InteropServices.Marshal&gt; class has five methods that do this:      -   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;, which converts the SecureString string value to a binary string (BSTR) recognized by COM.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt; and &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;, which copy the SecureString string value to an ANSI string in unmanaged memory.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt; and &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;, which copy the SecureString string value to a Unicode string in unmanaged memory.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these methods creates a clear-text string in unmanaged memory.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:      |Allocation and conversion method|Zero and free method|   |--------------------------------------|--------------------------|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;|       <bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="HowSecure"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## How secure is SecureString?</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>When created properly, a SecureString instance provides more data protection than a &lt;xref:System.String&gt;.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>When creating a string from a character-at-a-time source, &lt;xref:System.String&gt; creates multiple intermediate in memory, whereas  SecureString creates just a single instance.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection of &lt;xref:System.String&gt; objects  is non-deterministic.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, because its memory is not pinned, the garbage collector will make additional copies of &lt;xref:System.String&gt; values when moving and compacting memory.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, the memory allocated to a SecureString object is pinned,  and that memory can be freed by calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although data stored in a SecureString instance is more secure than data stored in a &lt;xref:System.String&gt; instance, there are significant limitations on how secure a SecureString instance is.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>These include:       Platform    On the Windows operating system, the contents of a SecureString instance's internal character array is encrypted.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, SecureString is available on Desktop (Windows only), and not on .NET Core.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Duration    Even if the SecureString implementation is able to take advantage of encryption, the plain text assigned to the SecureString instance may be exposed at various times:      -   Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Whenever the value of the secure string is modified by methods such as &lt;xref:System.Security.SecureString.AppendChar%2A&gt; or &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The time interval for which the SecureString instance's value is exposed  is merely shortened in comparison to the &lt;xref:System.String&gt; class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Storage versus usage    More generally, the SecureString class defines a storage mechanism for string values that should be protected or kept confidential.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, outside of the .NET Framework itself, no usage mechanism supports SecureString.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overall, SecureString is more secure than &lt;xref:System.String&gt; because it limits the exposure of sensitive string data.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of using SecureString to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this instance.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This operation is not supported on this platform.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class from a subarray of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This constructor is not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The CLS-compliant alternative is <ph id="ph1">&amp;lt;</ph>xref:System.Security.SecureString.%23ctor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the new &lt;xref:System.Security.SecureString&gt; object to the number of characters in <ph id="ph1">`value`</ph> specified by <ph id="ph2">`length`</ph>; the value of the instance is then encrypted.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, this constructor is defined only in the context of unsafe code.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to an array of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The number of elements of <ph id="ph1">`value`</ph> to include in the new instance.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero or greater than 65,536.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This operation is not supported on this platform.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Appends a character to the end of the current secure string.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is appended; then the new value of the secure string is re-protected.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A character to append to this secure string.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Deletes the value of the current secure string.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current secure string.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an instance of a &lt;xref:System.Security.SecureString&gt; is marked read-only, the copy of that instance will not be read-only.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A duplicate of this secure string.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method writes binary zeroes to the allocated memory that contains the value of this &lt;xref:System.Security.SecureString&gt; object, then frees the allocated memory.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Inserts a character in this secure string at the specified index position.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The index is zero-based; the first character in this secure string is at index position zero.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is inserted at the specified index position; then the new value is re-protected.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The InsertAt method yields the same results as the &lt;xref:System.Security.SecureString.AppendChar%2A&gt; method, which inserts a character at the end of a secure string, if the <ph id="ph1">`index`</ph> parameter of InsertAt is set to the length of this instance.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The index position where parameter <ph id="ph1">`c`</ph> is inserted.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The character to insert.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than the length of this secure string.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-or-       Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Indicates whether this secure string is marked read-only.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an instance of &lt;xref:System.Security.SecureString&gt; is marked read-only by the &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method, any attempt to modify the value of the instance throws an &lt;xref:System.InvalidOperationException&gt;.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the IsReadOnly method to test whether a &lt;xref:System.Security.SecureString&gt; is read-only before attempting to modify it.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this secure string is marked read-only; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Gets the number of characters in the current secure string.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Length property returns the number of &lt;xref:System.Char&gt; objects in this instance, not the number of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Unicode character might be represented by more than one &lt;xref:System.Char&gt; object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum length of a &lt;xref:System.Security.SecureString&gt; instance is 65,536 characters.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects in this secure string.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Makes the text value of this secure string read-only.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initialize the text value of an instance of the &lt;xref:System.Security.SecureString&gt; class with the &lt;xref:System.Security.SecureString.%23ctor%2A&gt; constructors, and modify the value with the &lt;xref:System.Security.SecureString.Clear%2A&gt;, &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;, &lt;xref:System.Security.SecureString.SetAt%2A&gt;, &lt;xref:System.Security.SecureString.InsertAt%2A&gt;, and &lt;xref:System.Security.SecureString.AppendChar%2A&gt; methods.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have made your final modifications, use the MakeReadOnly method to make the value of the instance immutable (read-only).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the value is marked as read-only, any further attempt to modify it throws an &lt;xref:System.InvalidOperationException&gt;.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The effect of invoking MakeReadOnly is permanent because the &lt;xref:System.Security.SecureString&gt; class provides no means to make the secure string modifiable again.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Security.SecureString.IsReadOnly%2A&gt; method to test whether an instance of &lt;xref:System.Security.SecureString&gt; is read-only.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Removes the character at the specified index position from this secure string.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The index position of a character in this secure string.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Replaces the existing character at the specified index position with another character.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is assigned to the specified index position; then the new value is re-protected.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The index position of an existing character in this secure string</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A character that replaces the existing character.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>