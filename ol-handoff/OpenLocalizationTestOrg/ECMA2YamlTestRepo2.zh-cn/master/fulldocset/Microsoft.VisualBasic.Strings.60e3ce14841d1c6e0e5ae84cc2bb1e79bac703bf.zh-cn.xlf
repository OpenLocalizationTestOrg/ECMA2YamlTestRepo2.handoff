<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">835d48ef298d118f4c72e7888f734da0ad8b1b49</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\Microsoft.VisualBasic.Strings.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54afeab5fd817282b85b0a2a760e1b66fd1a6c9c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4989b6f0d59887429b4198491c25b76544368f0d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Strings" name="Strings" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> module contains procedures used to perform string operations.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This can be 0 through 65535.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This can be 0 through 65535.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This can be 0 through 65535.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Asc`</ph> returns the <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, for the input character.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AscW`</ph> returns the Unicode code point for the input character.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This can be 0 through 65535.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The returned value is independent of the culture and code page settings for the current thread.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`AscB`</ph> function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`AscB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression, only the first character of the string is used for input.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`String`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or contains no characters, an &lt;xref:System.ArgumentException&gt; error occurs.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character code corresponding to a character.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns the character associated with the specified character code.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The asymmetric range accepted for <ph id="ph1">`CharCode`</ph> compensates for the storage differences between the <ph id="ph2">`Short`</ph> and the <ph id="ph3">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, -29183 is a <ph id="ph1">`Short`</ph> but +36353 is an <ph id="ph2">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This also facilitates compatibility with Visual Basic 6.0.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Chr`</ph> uses the &lt;xref:System.Text.Encoding&gt; class in the &lt;xref:System.Text?displayProperty=fullName&gt; namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It then takes <ph id="ph1">`CharCode`</ph> as a code point in the appropriate set.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The returned value depends on the code page for the current thread, which is contained in the &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; property of the &lt;xref:System.Globalization.TextInfo&gt; class in the &lt;xref:System.Globalization&gt; namespace.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can obtain &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; by specifying <ph id="ph1">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ChrW`</ph> takes <ph id="ph2">`CharCode`</ph> as a Unicode code point.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The range is independent of the culture and code page settings for the current thread.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Chr(10)`</ph> returns a line feed character.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`ChrB`</ph> function in earlier versions of Visual Basic returns a single byte.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>All strings in Visual Basic and the .NET Framework are in Unicode, and <ph id="ph1">`ChrB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression representing the <ph id="ph1">`code point`</ph>, or character code, for the character.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns the character associated with the specified character code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;CharCode&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or <ph id="ph3">&amp;gt;</ph> 255 for <bpt id="p1">&lt;xref uid="langword_csharp_Chr" name="Chr" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the character associated with the specified character code.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The asymmetric range accepted for <ph id="ph1">`CharCode`</ph> compensates for the storage differences between the <ph id="ph2">`Short`</ph> and the <ph id="ph3">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, -29183 is a <ph id="ph1">`Short`</ph> but +36353 is an <ph id="ph2">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This also facilitates compatibility with Visual Basic 6.0.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Chr`</ph> uses the &lt;xref:System.Text.Encoding&gt; class in the &lt;xref:System.Text?displayProperty=fullName&gt; namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>It then takes <ph id="ph1">`CharCode`</ph> as a code point in the appropriate set.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The returned value depends on the code page for the current thread, which is contained in the &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; property of the &lt;xref:System.Globalization.TextInfo&gt; class in the &lt;xref:System.Globalization&gt; namespace.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can obtain &lt;xref:System.Globalization.TextInfo.ANSICodePage%2A&gt; by specifying <ph id="ph1">`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ChrW`</ph> takes <ph id="ph2">`CharCode`</ph> as a Unicode code point.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The range is independent of the culture and code page settings for the current thread.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Chr(10)`</ph> returns a line feed character.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`ChrB`</ph> function in earlier versions of Visual Basic returns a single byte.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>All strings in Visual Basic and the .NET Framework are in Unicode, and <ph id="ph1">`ChrB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression representing the <ph id="ph1">`code point`</ph>, or character code, for the character.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns the character associated with the specified character code.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;CharCode&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> -32768 or <ph id="ph3">&amp;gt;</ph> 65535 for <bpt id="p1">&lt;xref uid="langword_csharp_ChrW" name="ChrW" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns a zero-based array containing a subset of a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array based on specified filter criteria.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If no matches of <ph id="ph1">`Match`</ph> are found within <ph id="ph2">`Source`</ph>, the <ph id="ph3">`Filter`</ph> function returns an empty array.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An error occurs if <ph id="ph1">`Source`</ph> is set to <ph id="ph2">`Nothing`</ph> or is not a one-dimensional array.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The array returned by the <ph id="ph1">`Filter`</ph> function contains only enough elements to contain the number of matched items.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`CompareMethod.Binary`</ph>|Performs a binary comparison|   |<ph id="ph2">`CompareMethod.Text`</ph>|Performs a textual comparison|</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>One-dimensional array of strings to be searched.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>String to search for.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether to return substrings that include or exclude <ph id="ph1">`Match`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Include`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Filter" name="Filter" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the subset of the array that contains <ph id="ph2">`Match`</ph> as a substring.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Include`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Filter" name="Filter" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the subset of the array that does not contain <ph id="ph2">`Match`</ph> as a substring.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Numeric value indicating the kind of string comparison to use.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns a zero-based array containing a subset of a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array based on specified filter criteria.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Source&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or is not a one-dimensional array.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a zero-based array containing a subset of a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array based on specified filter criteria.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If no matches of <ph id="ph1">`Match`</ph> are found within <ph id="ph2">`Source`</ph>, the <ph id="ph3">`Filter`</ph> function returns an empty array.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An error occurs if <ph id="ph1">`Source`</ph> is set to <ph id="ph2">`Nothing`</ph> or is not a one-dimensional array.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The array returned by the <ph id="ph1">`Filter`</ph> function contains only enough elements to contain the number of matched items.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`CompareMethod.Binary`</ph>|Performs a binary comparison|   |<ph id="ph2">`CompareMethod.Text`</ph>|Performs a textual comparison|</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>One-dimensional array of strings to be searched.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>String to search for.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether to return substrings that include or exclude <ph id="ph1">`Match`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Include`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Filter" name="Filter" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the subset of the array that contains <ph id="ph2">`Match`</ph> as a substring.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Include`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Filter" name="Filter" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the subset of the array that does not contain <ph id="ph2">`Match`</ph> as a substring.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Numeric value indicating the kind of string comparison to use.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Returns a zero-based array containing a subset of a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array based on specified filter criteria.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Source&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or is not a one-dimensional array.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns a string formatted according to instructions contained in a format <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Any valid expression.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A valid named or user-defined format <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns a string formatted according to instructions contained in a format <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The position of the currency symbol relative to the currency value is determined by the system's regional settings.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  All settings information comes from the locale of the application.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>By default, that will be the locale set in the control panel.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the <ph id="ph1">`Number`</ph> tab.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, and <ph id="ph3">`GroupDigits`</ph> arguments take the following TriState enumeration values.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Value|Description|   |<ph id="ph1">`TriState.True`</ph>|True|   |<ph id="ph2">`TriState.False`</ph>|False|   |<ph id="ph3">`TriState.UseDefault`</ph>|The computer's regional settings|</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Expression to be formatted.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Numeric value indicating how many places are displayed to the right of the decimal.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Default value is –1, which indicates that the computer's regional settings are used.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that indicates whether or not a leading zero is displayed for fractional values.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>See "Remarks" for values.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that indicates whether or not to place negative values within parentheses.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>See "Remarks" for values.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See "Remarks" for values.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Number of digits after decimal point is greater than 99.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Type is not numeric.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Returns a string expression representing a date/time value.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Date`</ph> data type always contains both date and time information.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you format a <ph id="ph1">`Date`</ph> value as a date/time string, <ph id="ph2">`FormatDateTime`</ph> does not include neutral values in the resulting string.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>However, the date information is still present in the original <ph id="ph1">`Date`</ph> value and can be recovered with functions such as <ph id="ph2">`DatePart`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you pass the <ph id="ph2">`Expression`</ph> argument as a <ph id="ph3">`String`</ph> literal, <ph id="ph4">`FormatDateTime`</ph> interprets it according to the &lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt; setting of your application.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>However, if you pass it as a <ph id="ph1">`Date`</ph> literal, use the format #mm/dd/yyyy#, because <ph id="ph2">`FormatDateTime`</ph> always interprets a <ph id="ph3">`Date`</ph> literal according to the English (US) culture.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This is necessary because, if an application is developed and coded using <ph id="ph1">`Date`</ph> literals from one culture, but is then executed on a platform with a different culture, the <ph id="ph2">`Date`</ph> literals could be parsed incorrectly.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NamedFormat`</ph> argument has the following settings.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`DateFormat.GeneralDate`</ph>|Display a date and/or time.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Display a date part as a short date.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If there is a time part, display it as a long time.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If present, both parts display.|   |<ph id="ph1">`DateFormat.LongDate`</ph>|Display a date using the long date format specified in your computer's regional settings.|   |<ph id="ph2">`DateFormat.ShortDate`</ph>|Display a date using the short date format specified in your computer's regional settings.|   |<ph id="ph3">`DateFormat.LongTime`</ph>|Display a time using the time format specified in your computer's regional settings.|   |<ph id="ph4">`DateFormat.ShortTime`</ph>|Display a time using the 24-hour format (hh:mm).|</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Date" name="Date" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression to be formatted.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Numeric value that indicates the date/time format used.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If omitted, <bpt id="p1">&lt;xref uid="langword_csharp_DateFormat.GeneralDate" name="DateFormat.GeneralDate" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is used.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Returns a string expression representing a date/time value.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;NamedFormat&lt;/code&gt;</ph> setting is not valid.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns an expression formatted as a number.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  All settings information comes from the locale of the application.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>By default, that will be the locale set in the control panel.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>However, it may be changed programmatically by using the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, and <ph id="ph3">`GroupDigits`</ph> arguments have the following settings.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`TriState.True`</ph>|True|   |<ph id="ph2">`TriState.False`</ph>|False|   |<ph id="ph3">`TriState.UseDefault`</ph>|The computer's regional settings|</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Expression to be formatted.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Numeric value indicating how many places are displayed to the right of the decimal.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The default value is –1, which indicates that the computer's regional settings are used.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that indicates whether a leading 0 is displayed for fractional values.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that indicates whether to place negative values within parentheses.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Returns an expression formatted as a number.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Type is not numeric.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  All settings information comes from the locale of the application.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>By default, that will be the locale set in the control panel.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>However, it may be changed programmatically by using the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IncludeLeadingDigit`</ph>, <ph id="ph2">`UseParensForNegativeNumbers`</ph>, and <ph id="ph3">`GroupDigits`</ph> arguments have the following settings.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`TriState.True`</ph>|True|   |<ph id="ph2">`TriState.False`</ph>|False|   |<ph id="ph3">`TriState.Default`</ph>|The computer's regional settings|</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Expression to be formatted.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Numeric value indicating how many places to the right of the decimal are displayed.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Default value is –1, which indicates that the locale settings are used.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that indicates whether or not a leading zero displays for fractional values.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that indicates whether or not to place negative values within parentheses.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.TriState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Type is not numeric.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character from the specified index in the supplied string.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Index`</ph> is less than 1 or greater than the index of the last character in <ph id="ph2">`str`</ph>, an <ph id="ph3">`ArgumentException`</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The (1-based) index of the character in <ph id="ph1">`str`</ph> to be returned.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the character from the specified index in the supplied string.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;str&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, <ph id="ph2">&lt;code&gt;Index&lt;/code&gt;</ph> <ph id="ph3">&amp;lt;</ph> 1, or <ph id="ph4">&lt;code&gt;Index&lt;/code&gt;</ph> is greater than index of last character of <ph id="ph5">&lt;code&gt;str&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns an integer specifying the start position of the first occurrence of one string within another.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Typically, the <ph id="ph1">`InStr`</ph> function is used when parsing strings.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`InStrB`</ph> function in previous versions of Visual Basic returns a number of bytes rather than a character position.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`InStrB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |<ph id="ph2">`Binary`</ph>|0|Performs a binary comparison|   |<ph id="ph3">`Text`</ph>|1|Performs a text comparison|</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression being searched.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression sought.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Specifies the type of string comparison.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Compare`</ph> is omitted, the <bpt id="p1">&lt;xref uid="langword_csharp_Option Compare" name="Option Compare" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> setting determines the type of comparison.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>InStr returns</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String1&lt;/code&gt;</ph> is zero length or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String2&lt;/code&gt;</ph> is zero length or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The starting position for the search, which defaults to the first character position.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String2&lt;/code&gt;</ph> is not found</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String2&lt;/code&gt;</ph> is found within <ph id="ph2">&lt;code&gt;String1&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Position where match begins</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns an integer specifying the start position of the first occurrence of one string within another.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Typically, the <ph id="ph1">`InStr`</ph> function is used when parsing strings.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`InStrB`</ph> function in previous versions of Visual Basic returns a number of bytes rather than a character position.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>All Visual Basic 2005 strings are in Unicode, and <ph id="ph1">`InStrB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument settings are:      ||||   |-|-|-|   |Constant|Value|Description|   |<ph id="ph2">`Binary`</ph>|0|Performs a binary comparison|   |<ph id="ph3">`Text`</ph>|1|Performs a text comparison|</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Numeric expression that sets the starting position for each search.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>If omitted, search begins at the first character position.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The start index is 1-based.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression being searched.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression sought.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Specifies the type of string comparison.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Compare`</ph> is omitted, the <bpt id="p1">&lt;xref uid="langword_csharp_Option Compare" name="Option Compare" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> setting determines the type of comparison.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>InStr returns</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String1&lt;/code&gt;</ph> is zero length or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String2&lt;/code&gt;</ph> is zero length or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String2&lt;/code&gt;</ph> is not found</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;String2&lt;/code&gt;</ph> is found within <ph id="ph2">&lt;code&gt;String1&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Position where match begins</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;Start&lt;/code&gt;</ph> <ph id="ph2">&amp;gt;</ph> length of <ph id="ph3">&lt;code&gt;String1&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> 1.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Note that the syntax for the <ph id="ph1">`InStrRev`</ph> function is not the same as the syntax for the <ph id="ph2">`InStr`</ph> function.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`Binary`</ph>|Performs a binary comparison.|   |<ph id="ph2">`Text`</ph>|Performs a textual comparison.|</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>String expression being searched.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>String expression being searched for.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Start`</ph> is omitted then –1 is used, meaning the search begins at the last character position.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Search then proceeds from right to left.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Numeric value indicating the kind of comparison to use when evaluating substrings.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>If omitted, a binary comparison is performed.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>See Settings for values.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>InStrRev returns</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;StringCheck&lt;/code&gt;</ph> is zero-length</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;StringMatch&lt;/code&gt;</ph> is zero-length</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;StringMatch&lt;/code&gt;</ph> is not found</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;StringMatch&lt;/code&gt;</ph> is found within <ph id="ph2">&lt;code&gt;StringCheck&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Position at which the first match is found, starting with the right side of the string.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">           &lt;code&gt;Start&lt;/code&gt;</ph> is greater than length of <ph id="ph2">&lt;code&gt;StringMatch&lt;/code&gt;</ph></source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Start&lt;/code&gt;</ph> = 0 or <ph id="ph2">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id="ph3">&amp;lt;</ph> -1.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>There is a parity between the <ph id="ph1">`Join`</ph> and <ph id="ph2">`Split`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Join`</ph> function takes an array of strings and joins them using a delimiter string, to return a single string.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Split`</ph> function takes a string and separates it at the delimiter, to return an array of strings.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>However, a key difference is that <ph id="ph1">`Join`</ph> can concatenate strings with any delimiter string, <ph id="ph2">`Split`</ph> can only separate strings using a single character delimiter.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>One-dimensional array containing substrings to be joined.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Any string, used to separate the substrings in the returned string.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>If omitted, the space character (" ") is used.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Delimiter`</ph> is a zero-length string ("") or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, all items in the list are concatenated with no delimiters.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;SourceArray&lt;/code&gt;</ph> is not one dimensional.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>There is a parity between the <ph id="ph1">`Join`</ph> and <ph id="ph2">`Split`</ph> functions.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Join`</ph> function takes an array of strings and joins them using a delimiter string, to return a single string.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Split`</ph> function takes a string and separates it at the delimiter, to return an array of strings.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>However, a key difference is that <ph id="ph1">`Join`</ph> can concatenate strings with any delimiter string, <ph id="ph2">`Split`</ph> can only separate strings using a single character delimiter.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>One-dimensional array containing substrings to be joined.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Any string, used to separate the substrings in the returned string.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>If omitted, the space character (" ") is used.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Delimiter`</ph> is a zero-length string ("") or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, all items in the list are concatenated with no delimiters.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Returns a string created by joining a number of substrings contained in an array.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;SourceArray&lt;/code&gt;</ph> is not one dimensional.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Returns a string or character converted to lowercase.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id="ph2">`comparisonType`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Returns a string or character converted to lowercase.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Returns a string or character converted to lowercase.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id="ph2">`comparisonType`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Returns a string or character converted to lowercase.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Returns a string containing a specified number of characters from the left side of a string.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If used in a Windows Forms application, or any other class that has a <ph id="ph1">`Left`</ph> property, you must fully qualify the function with <ph id="ph2">`Microsoft.VisualBasic.Left`</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LeftB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LeftB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression from which the leftmost characters are returned.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Numeric expression indicating how many characters to return.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If 0, a zero-length string ("") is returned.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If greater than or equal to the number of characters in <ph id="ph1">`str`</ph>, the entire string is returned.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Returns a string containing a specified number of characters from the left side of a string.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>With user-defined types and <ph id="ph1">`Object`</ph> variables, the <ph id="ph2">`Len`</ph> function returns the size as it will be written to the file by the <ph id="ph3">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the string.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, it will return the size of the object as it will be written to the file by the <ph id="ph2">`FilePut`</ph> function.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`VBFixedString`</ph> attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Len`</ph> function uses the <ph id="ph2">`VBFixedString`</ph> attribute, if available, when determining the size of <ph id="ph3">`Object`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`Len`</ph> function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`LenB`</ph> function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`LenB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Smart Device Developer Notes    The <ph id="ph1">`Len`</ph> function accepts only <ph id="ph2">`String`</ph> and <ph id="ph3">`Object`</ph> variables as parameters.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains a <ph id="ph2">`String`</ph>, it will return the length of the <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>If a parameter is a NULL <ph id="ph1">`Object`</ph> reference, the function returns zero.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">`Object`</ph> contains any other type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression or variable name.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_Len" name="Len" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> function returns the size as it will be written to the file by the <bpt id="p3">&lt;xref uid="langword_csharp_FilePut" name="FilePut" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Returns a left-aligned string containing the specified string adjusted to the specified length.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>If the specified string is longer than the specified length, the returned string is shortened to the specified length.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Name of string variable.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Length of returned string.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Returns a left-aligned string containing the specified string adjusted to the specified length.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<bpt id="p1">&lt;xref uid="langword_csharp_LTrim" name="LTrim" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id="p2">&lt;xref uid="langword_csharp_RTrim" name="RTrim" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id="p3">&lt;xref uid="langword_csharp_Trim" name="Trim" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, and <ph id="ph3">`Trim`</ph> functions remove spaces from the ends of strings.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<bpt id="p1">&lt;xref uid="langword_csharp_LTrim" name="LTrim" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id="p2">&lt;xref uid="langword_csharp_RTrim" name="RTrim" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id="p3">&lt;xref uid="langword_csharp_Trim" name="Trim" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Returns a string that contains all the characters starting from a specified position in a string.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Visual Basic has a <ph id="ph1">`Mid`</ph> function and a <ph id="ph2">`Mid`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>These elements both operate on a specified number of characters in a string, but the <ph id="ph1">`Mid`</ph> function returns the characters while the <ph id="ph2">`Mid`</ph> statement replaces the characters.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Mid Statement<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`MidB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>All Visual Basic strings are in Unicode, and <ph id="ph1">`MidB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression from which characters are returned.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Starting position of the characters to return.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Start`</ph> is greater than the number of characters in <ph id="ph2">`str`</ph>, the <bpt id="p1">&lt;xref uid="langword_csharp_Mid" name="Mid" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> function returns a zero-length string ("").</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Start`</ph> is one-based.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>A string that consists of all the characters starting from the specified position in the string.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph>= 0 or <ph id="ph3">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Returns a string that contains a specified number of characters starting from a specified position in a string.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Visual Basic has a <ph id="ph1">`Mid`</ph> function and a <ph id="ph2">`Mid`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>These elements both operate on a specified number of characters in a string, but the <ph id="ph1">`Mid`</ph> function returns the characters while the <ph id="ph2">`Mid`</ph> statement replaces the characters.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Mid Statement<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`MidB`</ph> function in previous versions of Visual Basic returns a string in bytes rather than characters.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>All Visual Basic strings are in Unicode, and <ph id="ph1">`MidB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression from which characters are returned.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Starting position of the characters to return.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Start`</ph> is greater than the number of characters in <ph id="ph2">`str`</ph>, the <bpt id="p1">&lt;xref uid="langword_csharp_Mid" name="Mid" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> function returns a zero-length string ("").</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Start`</ph> is one based.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Number of characters to return.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>If omitted or if there are fewer than <ph id="ph1">`Length`</ph> characters in the text (including the character at position <ph id="ph2">`Start`</ph>), all characters from the start position to the end of the string are returned.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>A string that consists of the specified number of characters starting from the specified position in the string.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph>= 0 or <ph id="ph3">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>The return value of the <ph id="ph1">`Replace`</ph> function is a string that begins at the position specified by <ph id="ph2">`Start`</ph> and concludes at the end of the <ph id="ph3">`Expression`</ph> string, with the substitutions made as specified by the <ph id="ph4">`Find`</ph> and <ph id="ph5">`Replace`</ph> values.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument can have the following values.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Constant|Description|   |<ph id="ph1">`Binary`</ph>|Performs a binary comparison|   |<ph id="ph2">`Text`</ph>|Performs a textual comparison|</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>String expression containing substring to replace.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Substring being searched for.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Replacement substring.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Position within <ph id="ph1">`Expression`</ph> that starts a substring used for replacement.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>The return value of <bpt id="p1">&lt;xref uid="langword_csharp_Replace" name="Replace" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a string that begins at <ph id="ph1">`Start`</ph>, with appropriate substitutions.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>If omitted, 1 is assumed.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Number of substring substitutions to perform.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>If omitted, the default value is –1, which means "make all possible substitutions."</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Numeric value indicating the kind of comparison to use when evaluating substrings.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>See Settings for values.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Replace" name="Replace" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> returns the following values.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Replace returns</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Find</ph><ept id="p1">&lt;/code&gt;</ept> is zero-length or <bpt id="p2">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept></source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Replace</ph><ept id="p1">&lt;/code&gt;</ept> is zero-length</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> with no occurrences of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Find</ph><ept id="p2">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> is zero-length or <bpt id="p2">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">Start</ph><ept id="p3">&lt;/code&gt;</ept> is greater than length of <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">Expression</ph><ept id="p4">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Count</ph><ept id="p1">&lt;/code&gt;</ept> is 0</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Copy of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Count&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> -1 or <ph id="ph3">&lt;code&gt;Start&lt;/code&gt;</ph> <ph id="ph4">&amp;lt;</ph>= 0.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Returns a string containing a specified number of characters from the right side of a string.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>To determine the number of characters in <ph id="ph1">`str`</ph>, use the <ph id="ph2">`Len`</ph> function.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>If used in a Windows Form, or any other class that has a <ph id="ph1">`Right`</ph> property, you must fully qualify the function with <ph id="ph2">`Microsoft.VisualBasic.Strings.Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`RightB`</ph> function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>It is used primarily for converting strings in double-byte character set (DBCS) applications.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>All current Visual Basic strings are in Unicode, and <ph id="ph1">`RightB`</ph> is no longer supported.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression from which the rightmost characters are returned.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Numeric expression indicating how many characters to return.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>If 0, a zero-length string ("") is returned.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>If greater than or equal to the number of characters in <ph id="ph1">`str`</ph>, the entire string is returned.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Returns a string containing a specified number of characters from the right side of a string.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Length&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Returns a right-aligned string containing the specified string adjusted to the specified length.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Source`</ph> is longer than <ph id="ph2">`Length`</ph>, <ph id="ph3">`RSet`</ph> places only the leftmost characters, up to the length of <ph id="ph4">`Source`</ph>, in the returned string.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>If the specified string is longer than the specified length, it is shortened to the specified length.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Name of string variable.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Length of returned string.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Returns a right-aligned string containing the specified string adjusted to the specified length.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<bpt id="p1">&lt;xref uid="langword_csharp_LTrim" name="LTrim" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id="p2">&lt;xref uid="langword_csharp_RTrim" name="RTrim" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id="p3">&lt;xref uid="langword_csharp_Trim" name="Trim" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, and <ph id="ph3">`Trim`</ph> functions remove spaces from the ends of strings.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<bpt id="p1">&lt;xref uid="langword_csharp_LTrim" name="LTrim" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id="p2">&lt;xref uid="langword_csharp_RTrim" name="RTrim" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id="p3">&lt;xref uid="langword_csharp_Trim" name="Trim" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Returns a string consisting of the specified number of spaces.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Space`</ph> function is useful for formatting output and clearing data in fixed-length strings.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>The number of spaces you want in the string.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Returns a string consisting of the specified number of spaces.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Returns a zero-based, one-dimensional array containing a specified number of substrings.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>By default, or when <ph id="ph1">`Limit`</ph> equals -1, the <ph id="ph2">`Split`</ph> function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Limit`</ph> parameter is greater than zero, the <ph id="ph2">`Split`</ph> function splits the string at the first <ph id="ph3">`Limit`</ph>-1 occurrences of the delimiter, and returns an array with the resulting substrings.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Split("a:b:c", ":")`</ph> returns the array <ph id="ph2">`{"a", "b", "c"}`</ph>, while <ph id="ph3">`Split("a:b:c", ":", 2)`</ph> returns the array <ph id="ph4">`{"a", "b:c"}`</ph>.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Split`</ph> function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Split("xx", "x")`</ph> returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>This table demonstrates how the optional <ph id="ph1">`Delimiter`</ph>, <ph id="ph2">`Limit`</ph>, and <ph id="ph3">`Compare`</ph> parameters can change the behavior of the <ph id="ph4">`Split`</ph> function.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>|||   |-|-|   |Split Call|Return Value|   |<ph id="ph1">`Split("42, 12, 19")`</ph>|{"42," , "12," , "19"}|   |<ph id="ph2">`Split("42, 12, 19", ", ")`</ph>|{"42", "12", "19"}|   |<ph id="ph3">`Split("42, 12, 19", ", ", 2)`</ph>|{"42", "12, 19"}|   |<ph id="ph4">`Split("192.168.0.1", ".")`</ph>|{"192", "168", "0", "1"}|   |<ph id="ph5">`Split("Alice and Bob", " AND ")`</ph>|{"Alice and Bob"}|   |<ph id="ph6">`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`</ph>|{"Alice", "Bob"}|   |<ph id="ph7">`Split("someone@example.com", "@",1)`</ph>|{"<ph id="ph8">someone@example.com</ph>"}|   |<ph id="ph9">`Split("someone@example.com", "@",2)`</ph>|{"someone", "example.com"}|       The <ph id="ph10">`Compare`</ph> argument can have the following values.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>||||   |-|-|-|   |Constant|Description|Value|   |<ph id="ph1">`CompareMethod.Binary`</ph>|Performs a binary comparison|0|   |<ph id="ph2">`CompareMethod.Text`</ph>|Performs a textual comparison|1|</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression containing substrings and delimiters.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Any single character used to identify substring limits.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Delimiter`</ph> is omitted, the space character (" ") is assumed to be the delimiter.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Maximum number of substrings into which the input string should be split.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The default, –1, indicates that the input string should be split at every occurrence of the <ph id="ph1">`Delimiter`</ph> string.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Numeric value indicating the comparison to use when evaluating substrings.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>See "Settings" for values.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> is a zero-length string (""), <bpt id="p2">&lt;xref uid="langword_csharp_Split" name="Split" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> returns a single-element array containing a zero-length string.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Delimiter</ph><ept id="p1">&lt;/code&gt;</ept> is a zero-length string, or if it does not appear anywhere in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Expression</ph><ept id="p2">&lt;/code&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_Split" name="Split" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> returns a single-element array containing the entire <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">Expression</ph><ept id="p4">&lt;/code&gt;</ept> string.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Returns -1, 0, or 1, based on the result of a string comparison.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>The strings are compared by alphanumeric sort values beginning with the first character.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>For further information on binary comparisons, textual comparisons, and sort order, see <bpt id="p1">[</bpt>Option Compare Statement<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compare`</ph> argument settings are:      |||   |-|-|   |Constant|Description|   |<ph id="ph2">`Binary`</ph>|Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.|   |<ph id="ph3">`Text`</ph>|Performs a text comparison, based on a case-insensitive text sort order determined by your system's <ph id="ph4">`LocaleID`</ph> value.|</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Specifies the type of string comparison.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Compare`</ph> is omitted, the <bpt id="p1">&lt;xref uid="langword_csharp_Option Compare" name="Option Compare" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> setting determines the type of comparison.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_StrComp" name="StrComp" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> function has the following return values.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>If</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>StrComp returns</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">String1</ph><ept id="p1">&lt;/code&gt;</ept> sorts ahead of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">String2</ph><ept id="p2">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>-1</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">String1</ph><ept id="p1">&lt;/code&gt;</ept> is equal to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">String2</ph><ept id="p2">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">String1</ph><ept id="p1">&lt;/code&gt;</ept> sorts after <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">String2</ph><ept id="p2">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Compare&lt;/code&gt;</ph> value is not valid.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Returns a string converted as specified.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>The constants <ph id="ph1">`VbStrConv.Wide`</ph>, <ph id="ph2">`VbStrConv.Narrow`</ph>, <ph id="ph3">`VbStrConv.SimplifiedChinese`</ph>, <ph id="ph4">`VbStrConv.TraditionalChinese`</ph>, <ph id="ph5">`VbStrConv.Katakana`</ph>, and <ph id="ph6">`VbStrConv.Hiragana`</ph> can cause run-time errors when used in locales where they do not apply, but not always: the constants <ph id="ph7">`VbStrConv.Katakana`</ph> and <ph id="ph8">`VbStrConv.Hiragana`</ph> can be used in a non-Japanese system with the Japanese Language Pack installed.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>In addition, use of the constants <ph id="ph1">`VbStrConv.Wide`</ph> and <ph id="ph2">`VbStrConv.Narrow`</ph> is supported on any system with an East Asian language installed.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id="ph2">`comparisonType`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conversion`</ph> argument settings are:      |||   |-|-|   |Enumeration member|Description|   |<ph id="ph2">`VbStrConv.None`</ph>|Performs no conversion|   |<ph id="ph3">`VbStrConv.LinguisticCasing`</ph>|Uses linguistic rules for casing, rather than File System (default).</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Valid with <ph id="ph1">`VbStrConv.UpperCase`</ph> and <ph id="ph2">`VbStrConv.LowerCase`</ph> only.|   |<ph id="ph3">`VbStrConv.UpperCase`</ph>|Converts the string to uppercase characters.|   |<ph id="ph4">`VbStrConv.LowerCase`</ph>|Converts the string to lowercase characters.|   |<ph id="ph5">`VbStrConv.ProperCase`</ph>|Converts the first letter of every word in string to uppercase.|   |<ph id="ph6">`VbStrConv.Wide`</ph> <bpt id="p1">&lt;sup&gt;</bpt><bpt id="p2">*</bpt><ept id="p2">&lt;/sup&gt;</ept>|Converts narrow (half-width) characters in the string to wide (full-width) characters.|   |<ph id="ph7">`VbStrConv.Narrow`</ph> <bpt id="p3">&lt;sup&gt;</bpt><ept id="p3">*</ept><ept id="p1">&lt;/sup&gt;</ept>|Converts wide (full-width) characters in the string to narrow (half-width) characters.|   |<ph id="ph8">`VbStrConv.Katakana`</ph> <bpt id="p4">&lt;sup&gt;</bpt><bpt id="p5">**</bpt><ept id="p5">&lt;/sup&gt;</ept>|Converts Hiragana characters in the string to Katakana characters.|   |<ph id="ph9">`VbStrConv.Hiragana`</ph> <bpt id="p6">&lt;sup&gt;</bpt><ept id="p6">**</ept><ept id="p4">&lt;/sup&gt;</ept>|Converts Katakana characters in the string to Hiragana characters.|   |<ph id="ph10">`VbStrConv.SimplifiedChinese`</ph> <bpt id="p7">&lt;sup&gt;</bpt><bpt id="p8">*</bpt><ept id="p8">&lt;/sup&gt;</ept>|Converts Traditional Chinese characters to Simplified Chinese.|   |<ph id="ph11">`VbStrConv.TraditionalChinese`</ph> <bpt id="p9">&lt;sup&gt;</bpt><ept id="p9">*</ept><ept id="p7">&lt;/sup&gt;</ept>|Converts Simplified Chinese characters to Traditional Chinese.|       <bpt id="p10">&lt;sup&gt;</bpt><bpt id="p11">*</bpt><ept id="p11">&lt;/sup&gt;</ept> Applies to Asian locales.       <bpt id="p12">&lt;sup&gt;</bpt><ept id="p12">*</ept><ph id="ph12">*</ph><ept id="p10">&lt;/sup&gt;</ept> Applies to Japan only.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  These constants are specified in the .NET Framework common language runtime.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>As a result, they can be used anywhere in your code in place of the actual values.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Most can be combined (for example, <ph id="ph1">`UpperCase + Wide`</ph>), except when they are mutually exclusive (for example, <ph id="ph2">`VbStrConv.Wide + VbStrConv.Narrow`</ph>).</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The following are valid word separators for proper casing: Null (<ph id="ph1">`Chr$(0)`</ph>), horizontal tab (<ph id="ph2">`Chr$(9)`</ph>), line feed (<ph id="ph3">`Chr$(10)`</ph>), vertical tab (<ph id="ph4">`Chr$(11)`</ph>), form feed (<ph id="ph5">`Chr$(12)`</ph>), carriage return (<ph id="ph6">`Chr$(13)`</ph>), space (single-byte character set) (<ph id="ph7">`Chr$(32)`</ph>).</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression to be converted.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="Microsoft.VisualBasic.VbStrConv"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> member.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>The enumeration value specifying the type of conversion to perform.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_LocaleID" name="LocaleID" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value, if different from the system <bpt id="p2">&lt;xref uid="langword_csharp_LocaleID" name="LocaleID" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> value.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>(The system <bpt id="p1">&lt;xref uid="langword_csharp_LocaleID" name="LocaleID" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value is the default.)</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Returns a string converted as specified.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Unsupported <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">LocaleID</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Conversion</ph><ept id="p2">&lt;/code&gt;</ept> <ph id="ph3">&amp;lt;</ph> 0 or <ph id="ph4">&amp;gt;</ph> 2048, or unsupported conversion for specified locale.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>This function returns a <ph id="ph1">`String`</ph> made up of repeated characters.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The character that makes up the string is the first character in the <ph id="ph1">`Character`</ph> argument, and it is duplicated <ph id="ph2">`Number`</ph> number of times.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>The length to the string to be returned.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, or <bpt id="p3">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Only the first character of the expression will be used.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>If Character is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, it must contain either a <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or a <bpt id="p3">&lt;xref uid="langword_csharp_String " name="String " href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>value.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is less than 0 or <ph id="ph2">&lt;code&gt;Character&lt;/code&gt;</ph> type is not valid.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Character&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>This function returns a <ph id="ph1">`String`</ph> made up of repeated characters.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>The character that makes up the string is the first character in the <ph id="ph1">`Character`</ph> argument, and it is duplicated <ph id="ph2">`Number`</ph> number of times.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>The length to the string to be returned.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, or <bpt id="p3">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Only the first character of the expression will be used.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>If Character is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, it must contain either a <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or a <bpt id="p3">&lt;xref uid="langword_csharp_String " name="String " href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>value.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is less than 0 or <ph id="ph2">&lt;code&gt;Character&lt;/code&gt;</ph> type is not valid.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Character&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>This function returns a <ph id="ph1">`String`</ph> made up of repeated characters.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>The character that makes up the string is the first character in the <ph id="ph1">`Character`</ph> argument, and it is duplicated <ph id="ph2">`Number`</ph> number of times.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>The length to the string to be returned.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, or <bpt id="p3">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Only the first character of the expression will be used.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>If Character is of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, it must contain either a <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or a <bpt id="p3">&lt;xref uid="langword_csharp_String " name="String " href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>value.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>Returns a string or object consisting of the specified character repeated the specified number of times.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is less than 0 or <ph id="ph2">&lt;code&gt;Character&lt;/code&gt;</ph> type is not valid.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Character&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Returns a string in which the character order of a specified string is reversed.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StrReverse`</ph> function returns a string that contains the same characters as <ph id="ph2">`Expression`</ph>, but in the opposite order.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>String expression whose characters are to be reversed.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Expression`</ph> is a zero-length string (""), a zero-length string is returned.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Returns a string in which the character order of a specified string is reversed.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<bpt id="p1">&lt;xref uid="langword_csharp_LTrim" name="LTrim" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id="p2">&lt;xref uid="langword_csharp_RTrim" name="RTrim" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id="p3">&lt;xref uid="langword_csharp_Trim" name="Trim" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LTrim`</ph>, <ph id="ph2">`RTrim`</ph>, and <ph id="ph3">`Trim`</ph> functions remove spaces from the ends of strings.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Returns a string containing a copy of a specified string with no leading spaces (<bpt id="p1">&lt;xref uid="langword_csharp_LTrim" name="LTrim" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), no trailing spaces (<bpt id="p2">&lt;xref uid="langword_csharp_RTrim" name="RTrim" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>), or no leading or trailing spaces (<bpt id="p3">&lt;xref uid="langword_csharp_Trim" name="Trim" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id="ph2">`comparisonType`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the &lt;xref:System.String.Compare%2A?displayProperty=fullName&gt; method, and pass &lt;xref:System.StringComparison&gt; or &lt;xref:System.StringComparison&gt; for the <ph id="ph2">`comparisonType`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How Culture Affects Strings in Visual Basic<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Any valid <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_Char" name="Char" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Returns a string or character containing the specified string converted to uppercase.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>