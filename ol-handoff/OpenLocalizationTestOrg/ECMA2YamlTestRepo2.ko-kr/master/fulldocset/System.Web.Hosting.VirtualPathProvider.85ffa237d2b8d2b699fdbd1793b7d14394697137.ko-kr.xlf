<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7282c6c3def2eb9d8e44a564c98c54ae2a8cf8a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Web.Hosting.VirtualPathProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a556762392ff490850806651b1257c0dbde41510</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">988e76d1173e6e70007d1f37af4b5ecb9ed9ba38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a set of methods that enable a Web application to retrieve resources from a virtual file system.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The VirtualPathProvider class provides a set of methods for implementing a virtual file system for a Web application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a virtual file system, the files and directories are managed by a data store other than the file system provided by the server's operating system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use a virtual file system to store content in a SQL Server database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can store any file that is processed on request in a virtual file system.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes:      -   ASP.NET pages, master pages, user controls, and other objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Standard Web pages with extensions such as .htm and .jpg.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Any custom extension mapped to a &lt;xref:System.Web.Compilation.BuildProvider&gt; instance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Any named theme in the <ph id="ph1">`App_Theme`</ph> folder.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot store ASP.NET application folders or files that generate application-level assemblies in a virtual file system.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes:      -   The Global.asax file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Web.config files.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Site map data files used by the &lt;xref:System.Web.XmlSiteMapProvider&gt;.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Directories that contain application assemblies or that generate application assemblies: <ph id="ph1">`Bin`</ph>, <ph id="ph2">`App_Code`</ph>, <ph id="ph3">`App_GlobalResources`</ph>, any <ph id="ph4">`App_LocalResources`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The application data folder, <ph id="ph1">`App_Data`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If a Web site is precompiled for deployment, content provided by a VirtualPathProvider instance is not compiled, and no VirtualPathProvider instances are used by the precompiled site.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registering a VirtualPathProvider    A custom VirtualPathProvider instance should be registered with the ASP.NET compilation system by using the &lt;xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName&gt; method before any page parsing or compilation is performed by the Web application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, a VirtualPathProvider instance is registered in an <ph id="ph1">`AppInitialize`</ph> method defined in the <ph id="ph2">`App_Code`</ph> directory, or during the <ph id="ph3">`Application_Start`</ph> event in the <ph id="ph4">`Global.asax`</ph> file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of registering a VirtualPathProvider instance in an <ph id="ph1">`AppInitialize`</ph> method, see the Example section.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can register a VirtualPathProvider instance during other events, but pages compiled and cached before the VirtualPathProvider instance is registered will not be invalidated, even if the new VirtualPathProvider instance would now provide the source for the previously compiled page.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes the class for use by an inherited class instance.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This constructor can be called only by an inherited class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>When overriding the VirtualPathProvider constructor, defer any initialization that must occur after the &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; object is registered to the &lt;xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Combines a base path with a relative path to return a complete path to a virtual resource.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the CombineVirtualPaths method to inspect the contents of a relative path to a virtual resource and perform any modifications required.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation combines the <ph id="ph1">`basePath`</ph> and <ph id="ph2">`relativePath`</ph> parameters according to standard ASP.NET path processing.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The base path for the application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The path to the virtual resource, relative to the base path.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The complete path to a virtual resource.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a directory exists in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override the DirectoryExists method to indicate to the compilation system that the resource represented by <ph id="ph1">`virtualDir`</ph> exists in the virtual file system provided by this &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your custom &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; class does not support directories, the DirectoryExists method should return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If your virtual file system will contain themes for the Web site (by creating a virtual <ph id="ph2">`App_Themes`</ph> directory), your custom &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; class must support directories.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The path to the virtual directory.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the directory exists in the virtual file system; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a file exists in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override the FileExists method to indicate to the compilation system that the resource represented by <ph id="ph1">`virtualPath`</ph> exists in the virtual file system provided by this &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The path to the virtual file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the file exists in the virtual file system; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Creates a cache dependency based on the specified virtual paths.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of the GetCacheDependency method returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cache virtual resources for later use you must override either the GetCacheDependency method or the &lt;xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The path to the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An array of paths to other resources required by the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The UTC time at which the virtual resources were read.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Web.Caching.CacheDependency"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the specified virtual resources.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a cache key to use for the specified virtual path.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the GetCacheKey method to provide a custom cache key for virtual resources.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not override the GetCacheKey method, the virtual path is used for the cache key.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The path to the virtual resource.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A cache key for the specified virtual resource.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a virtual directory from the virtual file system.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetDirectory method returns a descendent of the &lt;xref:System.Web.Hosting.VirtualDirectory&gt; class that contains the file and directories contained in the directory specified in the <ph id="ph1">`virtualDir`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your custom &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; class does not support directories, the GetDirectory method should return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If your virtual file system will contain themes for the Web site (by creating a virtual <ph id="ph2">`App_Themes`</ph> directory), your custom &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; class must support directories.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The path to the virtual directory.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A descendent of the <bpt id="p1">&lt;xref href="System.Web.Hosting.VirtualDirectory"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that represents a directory in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets a virtual file from the virtual file system.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetFile method returns a descendent of the &lt;xref:System.Web.Hosting.VirtualFile&gt; class that represents the file specified by the <ph id="ph1">`virtualPath`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The path to the virtual file.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A descendent of the <bpt id="p1">&lt;xref href="System.Web.Hosting.VirtualFile"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that represents a file in the virtual file system.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns a hash of the specified virtual paths.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the GetFileHash method to provide a hash of the dependencies for a virtual-file-system resource.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The path to the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An array of paths to other virtual resources required by the primary virtual resource.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A hash of the specified virtual paths.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializes the <bpt id="p1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Initialize method is called after the provider is registered with the ASP.NET compilation system.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Initialize method is used to provide any initialization required after the &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance is placed into the environment the application occupies.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gives the <bpt id="p1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object an infinite lifetime by preventing a lease from being created.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides the &lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A&gt; method in its base class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>It always returns <ph id="ph1">`null`</ph> and thereby prevents a lease from being created that would limit the &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; object's lifetime.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Always <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Returns a stream from a virtual file.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OpenFile method is a convenience method that enables you to get a stream from a virtual file without creating a &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The path to the virtual file.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A read-only &lt;xref:System.IO.Stream&gt; object for the specified virtual file or resource.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets a reference to a previously registered <bpt id="p1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object in the compilation system.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; object is registered with the ASP.NET compilation system, it is added to a chain of providers.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the Previous property to hand processing off to the previous &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; object in the chain if the requested path is not provided by this &lt;xref:System.Web.Hosting.VirtualPathProvider&gt; instance.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The chain of path providers always ends with the default ASP.NET provider, which serves files from the file system.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The next <bpt id="p1">&lt;xref href="System.Web.Hosting.VirtualPathProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object in the compilation system.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>