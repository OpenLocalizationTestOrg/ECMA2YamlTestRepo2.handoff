<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f55a66b17a0893f709950c5df6dd09df06a0d1f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c1d5cdf045e6e0c7279481a6b3c5549586dc398</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a29166a9764d72ef00d0e8acb4275872a44bc25e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides default implementation and base class definitions for a XAML writer.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is not a working default XAML writer; you must either derive from XamlWriter and implement its abstract members, or use an existing XamlWriter derived class.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The two most relevant practical derived classes of XamlWriter are the &lt;xref:System.Xaml.XamlXmlWriter&gt; and &lt;xref:System.Xaml.XamlObjectWriter&gt; classes, as the following details explain:      -   &lt;xref:System.Xaml.XamlXmlWriter&gt; processes a XAML node set and produces an XML text file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class might be used for serialization or as part of the function of a tool that works with in-memory representation of XAML and produces XAML file output.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Xaml.XamlObjectWriter&gt; processes a XAML node set and produces an object graph.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This class might be used as part of a full or partial customization of a technology's XAML parser.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.XamlWriterSettings&gt; is a class for settings that are used by a XamlWriter; however, by default, the &lt;xref:System.Xaml.XamlWriterSettings&gt; class does not hold any specific settings.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The XamlWriter base constructor does not use this settings class as an argument, nor does any other XamlWriter member.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Instead, the &lt;xref:System.Xaml.XamlXmlWriter&gt; and &lt;xref:System.Xaml.XamlObjectWriter&gt; classes include their own settings classes as construction arguments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These settings classes are &lt;xref:System.Xaml.XamlXmlWriterSettings&gt; and &lt;xref:System.Xaml.XamlObjectWriterSettings&gt;.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The settings classes define actual settings values and are based on &lt;xref:System.Xaml.XamlWriterSettings&gt;, so that they can use the &lt;xref:System.Xaml.XamlWriterSettings&gt; merge feature.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Closes the XAML writer object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the base implementation, calling Close calls the &lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt; method with the <ph id="ph1">`isDisposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You must call the base class to get &lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt; = <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release the managed resources; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets whether &lt;xref:System.Xaml.XamlWriter.Dispose*&gt; has been called.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if &lt;xref:System.Xaml.XamlWriter.Dispose*&gt; has been called; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, gets the active XAML schema context.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The active XAML schema context.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.IDisposable.Dispose*&gt;.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces the representation of an end member node.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces the representation of an end object node.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes a XAML namespace declaration node.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The namespace declaration to write.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Performs switching based on node type from the XAML reader (<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlReader.NodeType%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>) and calls the relevant <bpt id="p1">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method for the writer implementation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">##</ph> Notes for Inheritors    The WriteNode method is not a virtual method because it has practical implementation for all existing &lt;xref:System.Xaml.XamlNodeType&gt; values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Based on &lt;xref:System.Xaml.XamlNodeType&gt;, WriteNode calls into the <ph id="ph1">`Write`</ph> virtual members that are dedicated to particular node types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you have an advanced XAML writing scenario that expands the XAML type system and XAML node stream concept so that new node types are defined, do not use WriteNode calls in your logic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must instead provide your own alternative for node-type switching logic in the class or in virtual overrides.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The reader to use for node determination.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default implementation encountered a <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is not in the default enumeration.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes the representation of a start member node.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The member node to write.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes the representation of a start object node.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The XAML type of the object to write.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes a value node.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>