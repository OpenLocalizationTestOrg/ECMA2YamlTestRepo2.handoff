<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1760ecc87b3cd04b5a6e237efc7328ea69b3f2b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.PeekCompletedEventArgs.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2a804d4a0c39141ea25bcd38aab4dec2d762dee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a498762110cbd6a0ec16a82463b4c5396871b719</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides data for the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueue.PeekCompleted"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When your asynchronous peek operation calls an event handler, an instance of this class is passed to the handler.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you use event notification to peek (read without removing) messages asynchronously from the queue, you must create a method that handles your message processing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Your code must call &lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt; to begin the asynchronous processing.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When a message is peeked, your application is notified through the &lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt; event.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An instance of PeekCompletedEventArgs is passed into the event delegate that calls your event handler.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The data associated with the &lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt; event is contained in the delegate's &lt;xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A&gt; parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are two ways to provide notification of event completion: event notification and callbacks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>PeekCompletedEventArgs is used only with event notification.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information comparing callbacks and event notification, see "Events vs. Callbacks" on MSDN.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>PeekCompletedEventArgs provides access to the message that initiated the end of the asynchronous peek operation, through the &lt;xref:System.Messaging.PeekCompletedEventArgs.Message%2A&gt; member.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is an alternate access to the message, and behaves much the same as a call to &lt;xref:System.Messaging.MessageQueue.EndPeek%2A?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gets or sets the result of the asynchronous operation requested.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>AsyncResult identifies ongoing or completed asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables &lt;xref:System.Messaging.MessageQueue.EndPeek%2A&gt; to access the message associated with the completed operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you call &lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;, a &lt;xref:System.IAsyncResult&gt; is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The AsyncResult indicates the state of the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt; creates the object, which is modified throughout the operation until &lt;xref:System.Messaging.MessageQueue.EndPeek%2A&gt; completes it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IAsyncResult&gt; that contains the data associated with the peek operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets the message associated with the asynchronous peek operation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Message property provides a means for retrieving the message that initiated the end of the asynchronous peek operation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageQueue.EndPeek%2A?displayProperty=fullName&gt; is called the first time the Message property is read, so it is not necessary to call &lt;xref:System.Messaging.MessageQueue.EndPeek%2A&gt; prior to getting the value of this property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the end result of the asynchronous peek operation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Message could not be retrieved.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The time-out on the asynchronous operation might have expired.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>