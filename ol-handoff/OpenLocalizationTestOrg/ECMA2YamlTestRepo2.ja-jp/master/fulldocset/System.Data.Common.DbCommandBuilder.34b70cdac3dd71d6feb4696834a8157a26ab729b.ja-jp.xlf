<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae519f75c8c36943c1b881b3fcdd404d64da27dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Data.Common.DbCommandBuilder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f6395d49f29809bc219dfe1545ff7ab6f0c364c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8dbefb0650ad7b86f7af1f13c72f7fee0300e1da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Automatically generates single-table commands used to reconcile changes made to a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with the associated database.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is an abstract class that can only be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The DbCommandBuilder class is provided for the convenience of provider writers creating their own command builders.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By inheriting from this class, developers can implement provider specific behavior in their own code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.Common.DbDataAdapter&gt; does not automatically generate the SQL statements required to reconcile changes made to a &lt;xref:System.Data.DataSet&gt; with the associated data source.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, you can create a DbCommandBuilder object to automatically generate SQL statements for single-table updates if you set the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; property of the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then, any additional SQL statements that you do not set are generated by the DbCommandBuilder.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The DbCommandBuilder registers itself as a listener for &lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt; events whenever you set the &lt;xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can only associate one &lt;xref:System.Data.Common.DbDataAdapter&gt; or DbCommandBuilder object with each other at one time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To generate INSERT, UPDATE, or DELETE statements, the DbCommandBuilder uses the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; property to retrieve a required set of metadata automatically.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you change the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; after the metadata has been retrieved (for example, after the first update), you should call the &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; method to update the metadata.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SelectCommand`</ph> must also return at least one primary key or unique column.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If none exist, an &lt;xref:System.InvalidOperationException&gt; exception is generated, and the commands are not generated.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The DbCommandBuilder also uses the &lt;xref:System.Data.Common.DbCommand.Connection%2A&gt;, &lt;xref:System.Data.Common.DbCommand.CommandTimeout%2A&gt;, and &lt;xref:System.Data.Common.DbCommand.Transaction%2A&gt; properties referenced by the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The user should call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if any of these properties are modified, or if the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt; itself is replaced.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Otherwise the &lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;, &lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;, and &lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt; properties retain their previous values.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.ComponentModel.Component.Dispose%2A&gt;, the DbCommandBuilder is disassociated from the &lt;xref:System.Data.Common.DbDataAdapter&gt;, and the generated commands are no longer used.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a class that inherits from the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Allows the provider implementation of the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class to handle additional parameter properties.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This method allows an implementation of the &lt;xref:System.Data.Common.DbCommandBuilder&gt; class to handle provider-specific parameter properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.Common.DbParameter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to which the additional modifications are applied.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from the schema table provided by &lt;xref:System.Data.Common.DbDataReader.GetSchemaTable*&gt;.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of command being generated; INSERT, UPDATE or DELETE.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the parameter is part of the update or delete WHERE clause, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if it is part of the insert or update values.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Sets or gets the <bpt id="p1">&lt;xref href="System.Data.Common.CatalogLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for an instance of the <bpt id="p2">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.Common.CatalogLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sets or gets a string used as the catalog separator for an instance of the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A string indicating the catalog separator for use with an instance of the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies which <bpt id="p1">&lt;xref href="System.Data.ConflictOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is to be used by the <bpt id="p2">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns one of the <bpt id="p1">&lt;xref href="System.Data.ConflictOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values describing the behavior of this <bpt id="p2">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets a <bpt id="p1">&lt;xref href="System.Data.Common.DbDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for which Transact-SQL statements are automatically generated.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.Common.DbCommandBuilder&gt; registers itself as a listener for &lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt; events that are generated by the &lt;xref:System.Data.Common.DbDataAdapter&gt; specified in this property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you create a new instance of &lt;xref:System.Data.Common.DbCommandBuilder&gt;, any existing &lt;xref:System.Data.Common.DbCommandBuilder&gt; associated with this &lt;xref:System.Data.Common.DbDataAdapter&gt; is released.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.Common.DbDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt; method and the <ph id="ph1">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt; invokes the protected Dispose method with the disposing parameter set to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Data.Common.DbCommandBuilder&gt; references.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method invokes the &lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt; method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform deletions at the data source.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An application can use the GetDeleteCommand method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can also use GetDeleteCommand as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, you might call GetDeleteCommand and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Otherwise, the GetDeleteCommand will still be using information from the previous statement, which might not be correct.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or GetDeleteCommand.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform deletions.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform deletions at the data source, optionally using columns for parameter names.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An application can use the &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also use &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, you might call &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Otherwise, the &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt; will still be using information from the previous statement, which might not be correct.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or &lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the &lt;xref:System.Data.Common.DbCommandBuilder&gt; to generate parameters based on the column names instead.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This succeeds only if the following conditions are met:      -   The &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt; has been specified and its length is equal to or greater than the generated parameter name.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-   The generated parameter name meets the criteria specified in the &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt; regular expression.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-   A &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt; is specified.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, generate parameter names matching column names, if possible.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, generate <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform deletions.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform insertions at the data source.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An application can use the GetInsertCommand method for informational or troubleshooting purposes because it returns the text of the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can also use GetInsertCommand as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, you might call GetInsertCommand and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Otherwise, the GetInsertCommand will still be using information from the previous statement, which might not be correct.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or GetInsertCommand.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform insertions.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform insertions at the data source, optionally using columns for parameter names.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An application can use the &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; method for informational or troubleshooting purposes because it returns the text of the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can also use &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, you might call &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Otherwise, the &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt; will still be using information from the previous statement, which might not be correct.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or &lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the &lt;xref:System.Data.Common.DbCommandBuilder&gt; to generate parameters based on the column names instead.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt; has been specified and its length is equal to or greater than the generated parameter name.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>-   The generated parameter name meets the criteria specified in the &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt; regular expression.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-   A &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt; is specified.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, generate parameter names matching column names, if possible.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, generate <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform insertions.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Returns the name of the specified parameter in the format of <ph id="ph1">@p</ph><bpt id="p1">*</bpt><ph id="ph2">#</ph><ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use when building a custom command builder.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The number to be included as part of the parameter's name..</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The name of the parameter with the specified number appended as part of the parameter name.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns the full parameter name, given the partial parameter name.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The partial name of the parameter.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The full parameter name corresponding to the partial parameter name requested.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns the placeholder for the parameter in the associated SQL statement.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The number to be included as part of the parameter's name.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The name of the parameter with the specified number appended.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns the schema table for the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for which to retrieve the corresponding schema table.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the schema for the specific <bpt id="p2">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform updates at the data source.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An application can use the GetUpdateCommand method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can also use GetUpdateCommand as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, you might call GetUpdateCommand and modify the command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Otherwise, the GetUpdateCommand will still be using information from the previous statement, which might not be correct.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or GetUpdateCommand.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform updates.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform updates at the data source, optionally using columns for parameter names.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An application can use the &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; method for informational or troubleshooting purposes because it returns the &lt;xref:System.Data.Common.DbCommand&gt; object to be executed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can also use &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, you might call &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; and modify command text, and then explicitly set that on the &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>After the SQL statement is first generated, the application must explicitly call &lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt; if it changes the statement in any way.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Otherwise, the &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt; will still be using information from the previous statement, which might not be correct.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The SQL statements are first generated either when the application calls &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; or &lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the &lt;xref:System.Data.Common.DbCommandBuilder&gt; to generate parameters based on the column names instead.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Generation of the parameters based on column names succeeds only if the following conditions are met:      -   The &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt; has been specified and its length is equal to or greater than the generated parameter name.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-   The generated parameter name meets the criteria specified in the &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt; regular expression.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-   A &lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt; is specified.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, generate parameter names matching column names, if possible.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, generate <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The automatically generated <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object required to perform updates.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Resets the &lt;xref:System.Data.Common.DbCommand.CommandTimeout<bpt id="p1">*</bpt>&gt;, &lt;xref:System.Data.Common.DbCommand.Transaction<ept id="p1">*</ept>&gt;, &lt;xref:System.Data.Common.DbCommand.CommandType*&gt;, and <bpt id="p2">&lt;xref href="System.Data.UpdateRowSource"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> properties on the <bpt id="p3">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to be used by the command builder for the corresponding insert, update, or delete command.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance to use for each insert, update, or delete operation.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Passing a null value allows the InitializeCommand method to create a <bpt id="p1">&lt;xref href="System.Data.Common.DbCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object based on the Select command associated with the <bpt id="p2">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The original unquoted identifier.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The quoted version of the identifier.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Embedded quotes within the identifier are properly escaped.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Some data sources may have objects that can contain characters such as spaces, commas, and semicolons.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To accommodate this capability, use the QuotePrefix and &lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt; properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Although you cannot change the QuotePrefix or &lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt; properties after an insert, update, or delete command has been generated, you can change their settings after calling the <ph id="ph2">`Update`</ph> method of a &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The beginning character or characters to use.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The default is an empty string.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This property cannot be changed after an insert, update, or delete command has been generated.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Some data sources may have objects that can contain characters such as spaces, commas, and semicolons.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To accommodate this capability, use the &lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt; and QuoteSuffix properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Although you cannot change the &lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt; or QuoteSuffix properties after an insert, update, or delete command has been generated, you can change their settings after calling the <ph id="ph2">`Update`</ph> method of a &lt;xref:System.Data.Common.DbDataAdapter&gt;.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The ending character or characters to use.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The default is an empty string.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Clears the commands associated with this <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Calling the RefreshSchema method effectively removes all the &lt;xref:System.Data.Common.DbCommand&gt; objects referred to by the &lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;,       &lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;,       &lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;, and       &lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt; properties.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Adds an event handler for the <bpt id="p1">&lt;xref href="System.Data.OleDb.OleDbDataAdapter.RowUpdating"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.Common.RowUpdatingEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance containing information about the event.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Generally, database servers indicate the schema for an identifier by separating the schema name from the identifier with some character.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For example, SQL Server uses a colon, creating complete identifiers such as <bpt id="p1">**</bpt>Person:CustomerName<ept id="p1">**</ept>, where "Person" is the schema name and "CustomerName" is the identifier.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Setting this property allows developers to modify this behavior.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The character to be used as the schema separator.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Specifies whether all column values in an update statement are included or only changed ones.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The UPDATE statement generated by a &lt;xref:System.Data.Common.DbCommandBuilder&gt; can include update information about all the columns, or it can include information only about those columns whose values have changed.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Setting the SetAllValues property to <ph id="ph1">`true`</ph> causes the generated UPDATE statement to include all the columns, whether their values have changed or not.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the UPDATE statement generated by the <bpt id="p2">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> includes all columns; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> if it includes only changed columns.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Registers the <bpt id="p1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to handle the <bpt id="p2">&lt;xref href="System.Data.OleDb.OleDbDataAdapter.RowUpdating"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event for a <bpt id="p3">&lt;xref href="System.Data.Common.DbDataAdapter"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>When a new &lt;xref:System.Data.Common.DbDataAdapter&gt; is added to the &lt;xref:System.Data.Common.DbCommandBuilder&gt;, it is registered for the DbDataAdapter's <bpt id="p1">**</bpt>RowUpdating<ept id="p1">**</ept> event.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If this method is called again with the same &lt;xref:System.Data.Common.DbDataAdapter&gt;, the &lt;xref:System.Data.Common.DbCommandBuilder&gt; is unregistered for that DbDataAdapter's <bpt id="p1">**</bpt>RowUpdating<ept id="p1">**</ept> event.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.Common.DbDataAdapter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to be used for the update.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The identifier that will have its embedded quotes removed.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The unquoted identifier, with embedded quotes properly un-escaped.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>