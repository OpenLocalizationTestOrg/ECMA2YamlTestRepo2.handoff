<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47318ef78c00c6b7d9b5ac5cb331571267f6b0cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.Overlapped.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bb1fa4ada2a25a001f85a90be2227273a3d79d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1aa8c5188cc422b014bf1c0bcc83be07b14e3d0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a managed representation of a Win32 <ph id="ph1">`OVERLAPPED`</ph> structure, including methods to transfer information from an Overlapped instance to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Overlapped.Pack%2A&gt; and &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; methods transfer information from an Overlapped object to a &lt;xref:System.Threading.NativeOverlapped&gt; structure that can be passed to Win32 API functions for asynchronous file I/O.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; method transfers information from a &lt;xref:System.Threading.NativeOverlapped&gt; structure to an instance of the Overlapped class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Changes to the properties of an Overlapped object affect its associated &lt;xref:System.Threading.NativeOverlapped&gt; structure, and vice versa.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified file position, the 32-bit integer handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; property to get the handle of any managed synchronization event that derives from the &lt;xref:System.Threading.WaitHandle&gt; class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Your implementation of &lt;xref:System.IAsyncResult&gt; provides status information on the I/O operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If a callback method is specified for the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; or &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method, the callback can retrieve your &lt;xref:System.IAsyncResult&gt; by unpacking the &lt;xref:System.Threading.NativeOverlapped&gt; structure it receives.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The low word of the file position at which to start the transfer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The high word of the file position at which to start the transfer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface and provides status information on the I/O operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified file position, the handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To get the handle of a managed synchronization object that derives from the &lt;xref:System.Threading.WaitHandle&gt; class, use the &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; property to get a &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; object, and then call the &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your implementation of &lt;xref:System.IAsyncResult&gt; provides status information on the I/O operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If a callback method is specified for the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; or &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method, the callback can retrieve your &lt;xref:System.IAsyncResult&gt; by unpacking the &lt;xref:System.Threading.NativeOverlapped&gt; structure it receives.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The low word of the file position at which to start the transfer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The high word of the file position at which to start the transfer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface and provides status information on the I/O operation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets or sets the object that provides status information on the I/O operation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets or sets the 32-bit integer handle to a synchronization event that is signaled when the I/O operation is complete.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This property cannot be used on 64-bit platforms.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt; property instead.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; property to get the handle of any managed synchronization event that derives from the &lt;xref:System.Threading.WaitHandle&gt; class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the handle of the synchronization event.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets the handle to the synchronization event that is signaled when the I/O operation is complete.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To get the handle of a managed synchronization object that derives from the &lt;xref:System.Threading.WaitHandle&gt; class, use the &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; property to get a &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; object, and then call the &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; representing the handle of the event.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Frees the unmanaged memory associated with a native overlapped structure allocated by the &lt;xref:System.Threading.Overlapped.Pack*&gt; method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You must call the Free method exactly once on every &lt;xref:System.Threading.NativeOverlapped&gt; pointer you receive from the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you don't call the Free method, you will leak memory.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you call the Free method more than once, memory will be corrupted.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure to be freed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the high-order word of the file position at which to start the transfer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The file position is a byte offset from the start of the file.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the high word of the file position.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets or sets the low-order word of the file position at which to start the transfer.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The file position is a byte offset from the start of the file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the low word of the file position.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying the delegate to be invoked when the asynchronous I/O operation is complete.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The caller is responsible for pinning the buffer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For this reason, it is better to use the &lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt; method overload, in which the runtime pins the buffer.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete and a managed object that serves as a buffer.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The runtime pins the buffer or buffers specified in <ph id="ph2">`userData`</ph> for the duration of the I/O operation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Each object represents a buffer, for example an array of bytes.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Unpacks the specified unmanaged <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure into a managed <bpt id="p2">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is not freed from physical memory until you call the &lt;xref:System.Threading.Overlapped.Free%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object containing the information unpacked from the native structure.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure specifying the delegate to invoke when the asynchronous I/O operation is complete.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Does not propagate the calling stack.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The caller is responsible for pinning the buffer.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For this reason, it is better to use the &lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt; method overload, in which the runtime pins the buffer.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method could inadvertently open up a security hole.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method does not propagate the calling stack.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying the delegate to invoke when the asynchronous I/O operation is complete and the managed object that serves as a buffer.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Does not propagate the calling stack.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The runtime pins the buffer or buffers specified in<ph id="ph1">`userData`</ph> for the duration of the I/O operation.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the UnsafePack method could inadvertently open up a security hole.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The UnsafePack method does not propagate the calling stack.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Each object represents a buffer, for example an array of bytes.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is already packed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>