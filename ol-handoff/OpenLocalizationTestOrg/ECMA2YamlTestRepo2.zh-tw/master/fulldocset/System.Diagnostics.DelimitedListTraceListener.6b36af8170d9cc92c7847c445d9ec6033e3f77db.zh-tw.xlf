<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c8815f43b85906ab9f8f054c9bf98dde34e8d3c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Diagnostics.DelimitedListTraceListener.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89991ac5b4e5bb1e2e14c1ab1d26310c8e45541c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">569f3cc9d5bbf613e810a575b2d0643e5e36ee92</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The trace output is in a delimited text format that uses the delimiter specified by the &lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The delimiter is used to terminate each field in a line of output.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, to display the trace output in a Microsoft Excel spreadsheet, you might specify a comma (",") as a delimiter and create a comma-separated value (CSV) file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.IDisposable&gt; interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a<ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can enable or disable a DelimitedListTraceListener through the application configuration file and then use the configured DelimitedListTraceListener in your application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Alternately, you can create a DelimitedListTraceListener in your code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The DelimitedListTraceListener delimits only text that is emitted by using the methods that have names starting with the word <ph id="ph2">`Trace`</ph>, such as &lt;xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A?displayProperty=fullName&gt; or &lt;xref:System.Diagnostics.Trace.TraceWarning%2A?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trace data that is emitted by using the &lt;xref:System.Diagnostics.Debug.Write%2A?displayProperty=fullName&gt; and &lt;xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A?displayProperty=fullName&gt; methods is not delimited.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To configure a DelimitedListTraceListener, edit the configuration file that corresponds to the name of your application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this file, you can add a listener, set the properties for a listener, or remove a listener.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The configuration file should be formatted as shown in the following example:      <ph id="ph1">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush="false" indentsize="4"&gt;         &lt;listeners&gt;           &lt;add name="delimitedListener"              type="System.Diagnostics.DelimitedListTraceListener"              delimiter=","              initializeData="delimitedOutput.csv"              traceOutputOptions="ProcessId, DateTime" /&gt;         &lt;/listeners&gt;       &lt;/trace&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If you try to write to a file that is in use or unavailable, the file name is automatically prefixed by a GUID.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Listeners are intended to be used by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace information.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Listener methods, except for constructors, should not be called directly from application code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.DelimitedListTraceListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that writes to the specified output stream.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.Stream&gt; to receive the output.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.DelimitedListTraceListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that writes to the specified text writer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to receive the output.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;writer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.DelimitedListTraceListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that writes to the specified file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The name of the file to receive the output.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fileName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.DelimitedListTraceListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that writes to the specified output stream and has the specified name.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property to the value of the <ph id="ph1">`name`</ph> parameter, or to an empty string ("") if the <ph id="ph2">`name`</ph> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property can be used as an index into the <ph id="ph1">`Listeners`</ph> collection to programmatically change the properties for the listener.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following code sets the &lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt; property for the instance of &lt;xref:System.Diagnostics.DelimitedListTraceListener&gt; that has the name "delimListener":      <ph id="ph1">```   ((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"   ```</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.Stream&gt; to receive the output.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name of the new instance of the trace listener.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.DelimitedListTraceListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that writes to the specified text writer and has the specified name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property to the value of the <ph id="ph1">`name`</ph> parameter, or to an empty string ("") if the <ph id="ph2">`name`</ph> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property can be used as an index into the <ph id="ph1">`Listeners`</ph> collection to programmatically change the properties for the listener.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example the following code sets the &lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt; property for the instance of &lt;xref:System.Diagnostics.DelimitedListTraceListener&gt; that has the name "delimListener":      <ph id="ph1">```   ((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"   ```</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to receive the output.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The name of the new instance of the trace listener.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;writer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.DelimitedListTraceListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that writes to the specified file and has the specified name.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This constructor initializes a new instance of the &lt;xref:System.IO.StreamWriter&gt; class for the specified file on the specified path, using &lt;xref:System.Text.Encoding.UTF8%2A&gt; encoding.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the file exists, it is appended to.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the file does not exist, a new file is created.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To reduce the chance of an exception, any character that might invalidate the output is replaced with a "?" character.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property is set to the value of the <ph id="ph1">`name`</ph> parameter, or to an empty string ("") if the <ph id="ph2">`name`</ph> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; property can be used as an index into the <ph id="ph1">`Listeners`</ph> collection to programmatically change the properties for the listener.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the following code sets the &lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt; property for the instance of &lt;xref:System.Diagnostics.DelimitedListTraceListener&gt; that has the name "delimListener":      <ph id="ph1">```   ((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"   ```</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The name of the file to receive the output.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The name of the new instance of the trace listener.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fileName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets or sets the delimiter for the delimited list.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default delimiter is ";" (semicolon).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following configuration file example shows the setting of the Delimiter property using the <ph id="ph1">`delimiter`</ph> attribute in a configuration file:      <ph id="ph2">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush="false" indentsize="4"&gt;         &lt;listeners&gt;           &lt;add name="delimitedListener"              type="System.Diagnostics.DelimitedListTraceListener"              delimiter=":"              initializeData="delimitedOutput.txt"              traceOutputOptions="ProcessId, DateTime" /&gt;           &lt;remove name="Default" /&gt;         &lt;/listeners&gt;       &lt;/trace&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;      ```</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The delimiter for the delimited list.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Delimiter is set to <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Delimiter is set to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns the custom configuration file attribute supported by the delimited trace listener.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A custom attribute is an attribute that is not inherited from the base class that can be used to set a property for the class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The custom attribute for &lt;xref:System.Diagnostics.DelimitedListTraceListener&gt; is used to set the &lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following configuration file example shows the use of the <ph id="ph1">`delimiter`</ph> attribute to set the &lt;xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A&gt; property:      <ph id="ph2">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush="false" indentsize="4"&gt;         &lt;listeners&gt;           &lt;add name="delimitedListener"              type="System.Diagnostics.DelimitedListTraceListener"              delimiter=":"              initializeData="delimitedOutput.txt"              traceOutputOptions="ProcessId, DateTime" /&gt;           &lt;remove name="Default" /&gt;         &lt;/listeners&gt;       &lt;/trace&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A string array that contains the single value "delimiter".</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Writes trace information, a data object, and event information to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph>, and <ph id="ph3">`id`</ph> parameters are written as a header.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The data object is converted to a string using the <ph id="ph1">`ToString`</ph> method of the object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer whose content depends on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.DelimitedListTraceListener.TraceData%2A&gt; method is not intended to be called by application code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A data object to write to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Writes trace information, an array of data objects, and event information to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph>, and <ph id="ph3">`id`</ph> parameters are written as a header.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The data objects are converted to strings using the <ph id="ph1">`ToString`</ph> method of each object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer whose content depends on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.DelimitedListTraceListener.TraceData%2A&gt; method is not intended to be called by application code.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It is called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>An array of data objects to write to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Writes trace information, a message, and event information to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph>, and <ph id="ph3">`id`</ph> parameters are written as a header, followed by the <ph id="ph4">`message`</ph> data.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer whose content depends on the value of the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A&gt; method is not intended to be called by application code.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It is called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The trace message to write to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Writes trace information, a formatted array of objects, and event information to the output file or stream.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A format string that contains zero or more format items that correspond to objects in the <ph id="ph1">`args`</ph> array.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An array containing zero or more objects to format.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>