<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nb-no">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">407f6a9d8a677ca56b07af087cbe00271f077fb4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.D3DImage.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd61e163311e51174b24ed668e58a73af67b079f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac1ac022ae41e27e6828851c358734e5ea9a5442</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that displays a user-created Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the D3DImage class to host Direct3D content in a Windows Presentation Foundation (WPF) application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt; method to change the Direct3D content displayed by the D3DImage.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method to assign a Direct3D surface to a D3DImage.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; method to track updates to the Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt; method to display the changed areas.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The D3DImage class manages two display buffers, which are called the <bpt id="p1">*</bpt>back buffer<ept id="p1">*</ept> and the <bpt id="p2">*</bpt>front buffer<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The back buffer is your Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the back buffer are copied forward to the front buffer when you call the &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt; method, where it is displayed on the hardware.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Occasionally, the front buffer becomes unavailable.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This lack of availability can be caused by screen locking, full-screen exclusive Direct3D applications, user-switching, or other system activities.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this occurs, your WPF application is notified by handling the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Responding to an Unavailable Front Buffer when WPF Does not Fall Back to Software Rendering    When you call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt; overload or call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>, the rendering system releases its reference to the back buffer when the front buffer becomes unavailable and nothing is displayed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the front buffer is available again, the rendering system raises the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to notify your WPF application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to restart rendering again with a valid Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restart rendering, you must call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Responding to an Unavailable Front Buffer when WPF Falls Back to Software Rendering    When you call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`true`</ph>, the rendering system retains its reference to the back buffer when the front buffer becomes unavailable, so there is no need to call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; when the front buffer is available again.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>There may be situations where the user’s device becomes unavailable.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When that occurs, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; to release WPF’s reference to the back buffer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to reset your device, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; with the <ph id="ph1">`backBuffer`</ph> parameter set to <ph id="ph2">`null`</ph>, and then call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; again with <ph id="ph3">`backBuffer`</ph> set to a valid Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Performance depends greatly on the settings of the Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Performance Considerations for Direct3D9 and WPF Interoperability<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The D3DImage class does not display Direct3D content when WPF renders in software, such as over a Remote Desktop connection, unless you call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; and specify <ph id="ph2">`true`</ph> for the <ph id="ph3">`enableSoftwareFallback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default display resolution is 1/96th inch.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified display resolution.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default display resolution is 1/96th inch.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The display resolution on the x-axis.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The display resolution on the y-axis.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dpiX&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;dpiY&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifies the area of the back buffer that changed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the AddDirtyRect method to indicate changes your code has made to the back buffer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be rendered, the changed area on the back buffer must have a corresponding changed area on the &lt;xref:System.Windows.Interop.D3DImage&gt;.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; and &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt; methods before calling the AddDirtyRect method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt; method to copy the changed areas to the front buffer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  After a few calls to the AddDirtyRect method, the changed areas are merged into a single area.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means you must have valid data outside of the changed areas.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Int32Rect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the area that changed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The bitmap has not been locked by a call to the &lt;xref:System.Windows.Interop.D3DImage.Lock<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Interop.D3DImage.TryLock<ept id="p1">*</ept>&gt; methods.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-or-       The back buffer has not been assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer*&gt; method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One or more of the following conditions is true.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dirtyRect.X</ph><ept id="p1">&lt;/code&gt;</ept> <ph id="ph2">&amp;lt;</ph> 0       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">dirtyRect.Y</ph><ept id="p2">&lt;/code&gt;</ept> <ph id="ph4">&amp;lt;</ph> 0       <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">dirtyRect.Width</ph><ept id="p3">&lt;/code&gt;</ept> <ph id="ph6">&amp;lt;</ph> 0 or <bpt id="p4">&lt;code&gt;</bpt><ph id="ph7">dirtyRect.Width</ph><ept id="p4">&lt;/code&gt;</ept> <ph id="ph8">&amp;gt;</ph> &lt;xref:System.Windows.Interop.D3DImage.PixelWidth<bpt id="p5">*</bpt><ph id="ph9">&gt;       </ph><bpt id="p6">&lt;code&gt;</bpt><ph id="ph10">dirtyRect.Height</ph><ept id="p6">&lt;/code&gt;</ept> <ph id="ph11">&amp;lt;</ph> 0 or <bpt id="p7">&lt;code&gt;</bpt><ph id="ph12">dirtyRect.Height</ph><ept id="p7">&lt;/code&gt;</ept> <ph id="ph13">&amp;gt;</ph> &lt;xref:System.Windows.Interop.D3DImage.PixelHeight<ept id="p5">*</ept><ph id="ph14">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Creates a modifiable clone of this <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object, making deep copies of this object's values.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When copying dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to produce modifiable copies of frozen &lt;xref:System.Windows.Freezable&gt; objects (or any &lt;xref:System.Windows.Freezable&gt; object).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For convenience, this method shadows the inherited version with a strongly typed implementation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A modifiable clone of the current object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen<bpt id="p1">*</bpt>&gt; property will be <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen<ept id="p1">*</ept>&gt; property was <bpt id="p3">&lt;xref uid="langword_csharp_true." name="true." href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Makes the instance a clone (deep copy) of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using base (non-animated) property values.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Creates a modifiable clone of this <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object, making deep copies of this object's current values.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Resource references, data bindings, and animations are not copied, but their current values are copied.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to produce modifiable copies of frozen &lt;xref:System.Windows.Freezable&gt; objects (or any &lt;xref:System.Windows.Freezable&gt; object).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For convenience, this method shadows the inherited version with a strongly typed implementation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A modifiable clone of the current object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen<bpt id="p1">*</bpt>&gt; property will be <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen<ept id="p1">*</ept>&gt; property was <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Makes the instance a modifiable clone (deep copy) of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using current property values.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to be cloned.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Creates a software copy of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CopyBackBuffer method is called by clients such as the printing system and the &lt;xref:System.Windows.Media.Imaging.RenderTargetBitmap&gt; class.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally override the CopyBackBuffer method to implement custom logic and return a different &lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can return a placeholder &lt;xref:System.Windows.Media.Imaging.BitmapSource&gt; if the default CopyBackBuffer implementation returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Media.Imaging.BitmapSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a software copy of the current state of the back buffer; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the back buffer cannot be read.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, creates a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you derive from the &lt;xref:System.Windows.Interop.D3DImage&gt; class, you must override the CreateInstanceCore method to enable correct cloning.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation performs a <ph id="ph1">`return new D3DImage()`</ph>, which will not be correct if the instance is a different class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The new instance.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Frees resources and performs other cleanup operations before the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is reclaimed by garbage collection.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Object.Finalize%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application code should not call this method; an object's <ph id="ph1">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Makes the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> unmodifiable or determines whether it can be made unmodifiable.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage&gt; class does not allow freezing because changes are always possible due to front buffer availability.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Has no effect.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in all cases.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Makes the instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using base (non-animated) property values.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The instance to copy.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Makes the current instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to copy and freeze.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets the height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of Height can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in measure units.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A measure unit is 1/96th inch.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a front buffer exists.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Occasionally, the front buffer becomes unavailable.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This lack of availability can be caused by screen locking, full-screen exclusive Direct3D applications, user-switching, or other system activities.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this occurs, your WPF application is notified by handling the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the remarks in the &lt;xref:System.Windows.Interop.D3DImage&gt; class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFrontBufferAvailable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a front buffer exists; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt; property changes.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handle the IsFrontBufferAvailableChanged to be notified when the status of the front buffer changes.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the remarks in the &lt;xref:System.Windows.Interop.D3DImage&gt; class.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt; dependency property.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To be added.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Locks the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and enables operations on the back buffer.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the Lock method to change the back buffer by calling the &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; and &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; methods.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the &lt;xref:System.Windows.Interop.D3DImage&gt; is locked, your application can also render to the Direct3D surface assigned to the back buffer.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The Lock method blocks when the rendering system is reading the back buffer to update the front buffer.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Windows.Interop.D3DImage.TryLock%2A&gt; method to avoid blocking indefinitely.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The lock count equals &lt;xref:System.UInt32.MaxValue&gt;.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Gets the metadata associated with the image source.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in all cases.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets the height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of PixelHeight can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets the width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of PixelWidth can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Assigns a Direct3D surface as the source of the back buffer.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the SetBackBuffer method to assign a Direct3D surface to the back buffer.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Performance depends greatly on the settings of the Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Performance Considerations for Direct3D9 and WPF Interoperability<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the SetBackBuffer overload is identical to calling the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call SetBackBuffer or call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>, the rendering system releases its reference to the back buffer when front buffer becomes unavailable and nothing is displayed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the front buffer is available again, the rendering system raises the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to notify your WPF application.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to restart rendering again with a valid Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restart rendering, you must call SetBackBuffer.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the required back buffer settings for the <ph id="ph1">`IDirect3DSurface9`</ph> type.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`D3DFMT_A8R8G8B8`</ph> or <ph id="ph2">`D3DFMT_X8R8G8B8`</ph><ph id="ph3">      -   </ph><ph id="ph4">`D3DUSAGE_RENDERTARGET`</ph><ph id="ph5">      -   </ph><ph id="ph6">`D3DPOOL_DEFAULT`</ph>       Multisampling is allowed on <ph id="ph7">`IDirect3DSurface9Ex`</ph> surfaces only.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The type of Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Must be a valid <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The Direct3D surface to assign as the back buffer.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has not been locked by a call to the &lt;xref:System.Windows.Interop.D3DImage.Lock<bpt id="p2">*</bpt>&gt; or &lt;xref:System.Windows.Interop.D3DImage.TryLock<ept id="p2">*</ept>&gt; methods.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;backBufferType&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The creation parameters for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">backBuffer</ph><ept id="p1">&lt;/code&gt;</ept> do not meet the requirements for the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">backBufferType</ph><ept id="p2">&lt;/code&gt;</ept>-or-The <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">backBuffer</ph><ept id="p3">&lt;/code&gt;</ept> device is not valid.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Assigns a Direct3D surface as the source of the back buffer.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt; overload or call the SetBackBuffer overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>, the rendering system releases its reference to the back buffer when the front buffer becomes unavailable and nothing is displayed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the front buffer is available again, the rendering system raises the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to notify your WPF application.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to restart rendering again with a valid Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restart rendering, you must call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call SetBackBuffer with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`true`</ph>, the rendering system retains its reference to the back buffer when the front buffer becomes unavailable, so there is no need to call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; when the front buffer is available again.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>There may be situations where the user’s device becomes unavailable.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>When that occurs, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; to release WPF’s reference to the back buffer.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to reset your device, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; with <ph id="ph1">`backBuffer`</ph> set to <ph id="ph2">`null`</ph>, and then call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; again with <ph id="ph3">`backBuffer`</ph> set to a valid Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the required back buffer settings for the <ph id="ph1">`IDirect3DSurface9`</ph> type.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`D3DFMT_A8R8G8B8`</ph> or <ph id="ph2">`D3DFMT_X8R8G8B8`</ph><ph id="ph3">      -   </ph><ph id="ph4">`D3DUSAGE_RENDERTARGET`</ph><ph id="ph5">      -   </ph><ph id="ph6">`D3DPOOL_DEFAULT`</ph>       Multisampling is allowed on <ph id="ph7">`IDirect3DSurface9Ex`</ph> surfaces only.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The type of Direct3D surface.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Must be a valid <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The Direct3D surface to assign as the back buffer.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to fall back on software rendering; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Attempts to lock the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and waits for the specified duration.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The duration to wait for the lock to be acquired.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the lock was acquired; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Duration.Automatic*&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The lock count equals &lt;xref:System.UInt32.MaxValue&gt;.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Decrements the lock count for the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the lock count for the &lt;xref:System.Windows.Interop.D3DImage&gt; reaches zero, the &lt;xref:System.Windows.Interop.D3DImage&gt; is fully unlocked.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage&gt; is marked for rendering if the image has changed areas that were specified by previous calls to the &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the changes are committed and rendering occurs, additional calls to the &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt; method block until the render thread has copied the contents of the back buffer to the front buffer.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>This synchronization avoids display artifacts, such as tearing.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Do not update the Direct3D surface while the &lt;xref:System.Windows.Interop.D3DImage&gt; is unlocked.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets the width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of Width can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in measure units.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A measure unit is 1/96th inch.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>